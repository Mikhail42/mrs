// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.ionkin.mrs.hl7.fhir



/**
usage:
val obj = scalaxb.fromXML[Foo](node)
val document = scalaxb.toXML[Foo](obj, "foo", defaultScope)
**/
object `package` extends XMLProtocol { 
  val fhirUrl = "http://hl7.org/fhir"
}
import `package`.fhirUrl
.
trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> fhirUrl,
    Some("tns") -> fhirUrl,
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comionkinmrshl7fhir_DateTypeFormat: scalaxb.XMLFormat[DateType] = new DefaultComionkinmrshl7fhir_DateTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DateTimeTypeFormat: scalaxb.XMLFormat[DateTimeType] = new DefaultComionkinmrshl7fhir_DateTimeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeTypeFormat: scalaxb.XMLFormat[CodeType] = new DefaultComionkinmrshl7fhir_CodeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StringTypeTypeFormat: scalaxb.XMLFormat[StringTypeType] = new DefaultComionkinmrshl7fhir_StringTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_IntegerTypeFormat: scalaxb.XMLFormat[IntegerType] = new DefaultComionkinmrshl7fhir_IntegerTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_OidTypeFormat: scalaxb.XMLFormat[OidType] = new DefaultComionkinmrshl7fhir_OidTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_UriTypeFormat: scalaxb.XMLFormat[UriType] = new DefaultComionkinmrshl7fhir_UriTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_UuidTypeFormat: scalaxb.XMLFormat[UuidType] = new DefaultComionkinmrshl7fhir_UuidTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_InstantTypeFormat: scalaxb.XMLFormat[InstantType] = new DefaultComionkinmrshl7fhir_InstantTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BooleanTypeTypeFormat: scalaxb.XMLFormat[BooleanTypeType] = new DefaultComionkinmrshl7fhir_BooleanTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Base64BinaryTypeTypeFormat: scalaxb.XMLFormat[Base64BinaryTypeType] = new DefaultComionkinmrshl7fhir_Base64BinaryTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_UnsignedIntTypeFormat: scalaxb.XMLFormat[UnsignedIntType] = new DefaultComionkinmrshl7fhir_UnsignedIntTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MarkdownTypeFormat: scalaxb.XMLFormat[MarkdownType] = new DefaultComionkinmrshl7fhir_MarkdownTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TimeTypeFormat: scalaxb.XMLFormat[TimeType] = new DefaultComionkinmrshl7fhir_TimeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultComionkinmrshl7fhir_IdTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PositiveIntTypeFormat: scalaxb.XMLFormat[PositiveIntType] = new DefaultComionkinmrshl7fhir_PositiveIntTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DecimalTypeFormat: scalaxb.XMLFormat[DecimalType] = new DefaultComionkinmrshl7fhir_DecimalTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceContainerFormat: scalaxb.XMLFormat[ResourceContainer] = new DefaultComionkinmrshl7fhir_ResourceContainerFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExtensionTypeFormat: scalaxb.XMLFormat[ExtensionType] = new DefaultComionkinmrshl7fhir_ExtensionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BackboneElementableFormat: scalaxb.XMLFormat[BackboneElementable] = new DefaultComionkinmrshl7fhir_BackboneElementableFormat {}
  implicit lazy val Comionkinmrshl7fhir_BackboneElementTypeFormat: scalaxb.XMLFormat[BackboneElementType] = new DefaultComionkinmrshl7fhir_BackboneElementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NarrativeTypeFormat: scalaxb.XMLFormat[NarrativeType] = new DefaultComionkinmrshl7fhir_NarrativeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NarrativeStatusu45listFormat: scalaxb.XMLFormat[NarrativeStatusu45list] = new DefaultComionkinmrshl7fhir_NarrativeStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NarrativeStatusFormat: scalaxb.XMLFormat[NarrativeStatus] = new DefaultComionkinmrshl7fhir_NarrativeStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementableFormat: scalaxb.XMLFormat[Elementable] = new DefaultComionkinmrshl7fhir_ElementableFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementTypeFormat: scalaxb.XMLFormat[ElementType] = new DefaultComionkinmrshl7fhir_ElementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferenceTypeFormat: scalaxb.XMLFormat[ReferenceType] = new DefaultComionkinmrshl7fhir_ReferenceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuantityableFormat: scalaxb.XMLFormat[Quantityable] = new DefaultComionkinmrshl7fhir_QuantityableFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuantityTypeFormat: scalaxb.XMLFormat[QuantityType] = new DefaultComionkinmrshl7fhir_QuantityTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuantityComparatoru45listFormat: scalaxb.XMLFormat[QuantityComparatoru45list] = new DefaultComionkinmrshl7fhir_QuantityComparatoru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuantityComparatorFormat: scalaxb.XMLFormat[QuantityComparator] = new DefaultComionkinmrshl7fhir_QuantityComparatorFormat {}
  implicit lazy val Comionkinmrshl7fhir_PeriodTypeFormat: scalaxb.XMLFormat[PeriodType] = new DefaultComionkinmrshl7fhir_PeriodTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AttachmentTypeFormat: scalaxb.XMLFormat[AttachmentType] = new DefaultComionkinmrshl7fhir_AttachmentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DurationTypeFormat: scalaxb.XMLFormat[DurationType] = new DefaultComionkinmrshl7fhir_DurationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CountTypeFormat: scalaxb.XMLFormat[CountType] = new DefaultComionkinmrshl7fhir_CountTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RangeTypeTypeFormat: scalaxb.XMLFormat[RangeTypeType] = new DefaultComionkinmrshl7fhir_RangeTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AnnotationTypeFormat: scalaxb.XMLFormat[AnnotationType] = new DefaultComionkinmrshl7fhir_AnnotationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MoneyTypeFormat: scalaxb.XMLFormat[MoneyType] = new DefaultComionkinmrshl7fhir_MoneyTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdentifierTypeFormat: scalaxb.XMLFormat[IdentifierType] = new DefaultComionkinmrshl7fhir_IdentifierTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdentifierUseu45listFormat: scalaxb.XMLFormat[IdentifierUseu45list] = new DefaultComionkinmrshl7fhir_IdentifierUseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdentifierUseFormat: scalaxb.XMLFormat[IdentifierUse] = new DefaultComionkinmrshl7fhir_IdentifierUseFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodingTypeFormat: scalaxb.XMLFormat[CodingType] = new DefaultComionkinmrshl7fhir_CodingTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SignatureTypeFormat: scalaxb.XMLFormat[SignatureType] = new DefaultComionkinmrshl7fhir_SignatureTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SampledDataTypeFormat: scalaxb.XMLFormat[SampledDataType] = new DefaultComionkinmrshl7fhir_SampledDataTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SampledDataDataTypeFormat: scalaxb.XMLFormat[SampledDataDataType] = new DefaultComionkinmrshl7fhir_SampledDataDataTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RatioTypeFormat: scalaxb.XMLFormat[RatioType] = new DefaultComionkinmrshl7fhir_RatioTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DistanceTypeFormat: scalaxb.XMLFormat[DistanceType] = new DefaultComionkinmrshl7fhir_DistanceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AgeTypeFormat: scalaxb.XMLFormat[AgeType] = new DefaultComionkinmrshl7fhir_AgeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeableConceptTypeFormat: scalaxb.XMLFormat[CodeableConceptType] = new DefaultComionkinmrshl7fhir_CodeableConceptTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MetaTypeFormat: scalaxb.XMLFormat[MetaType] = new DefaultComionkinmrshl7fhir_MetaTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AddressType2Format: scalaxb.XMLFormat[AddressType2] = new DefaultComionkinmrshl7fhir_AddressType2Format {}
  implicit lazy val Comionkinmrshl7fhir_AddressUseu45listFormat: scalaxb.XMLFormat[AddressUseu45list] = new DefaultComionkinmrshl7fhir_AddressUseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AddressUseFormat: scalaxb.XMLFormat[AddressUse] = new DefaultComionkinmrshl7fhir_AddressUseFormat {}
  implicit lazy val Comionkinmrshl7fhir_AddressTypeu45listFormat: scalaxb.XMLFormat[AddressTypeu45list] = new DefaultComionkinmrshl7fhir_AddressTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AddressTypeFormat: scalaxb.XMLFormat[AddressType] = new DefaultComionkinmrshl7fhir_AddressTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TriggerDefinitionTypeFormat: scalaxb.XMLFormat[TriggerDefinitionType] = new DefaultComionkinmrshl7fhir_TriggerDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TriggerTypeu45listFormat: scalaxb.XMLFormat[TriggerTypeu45list] = new DefaultComionkinmrshl7fhir_TriggerTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TriggerTypeFormat: scalaxb.XMLFormat[TriggerType] = new DefaultComionkinmrshl7fhir_TriggerTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContributorType2Format: scalaxb.XMLFormat[ContributorType2] = new DefaultComionkinmrshl7fhir_ContributorType2Format {}
  implicit lazy val Comionkinmrshl7fhir_ContributorTypeu45listFormat: scalaxb.XMLFormat[ContributorTypeu45list] = new DefaultComionkinmrshl7fhir_ContributorTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContributorTypeFormat: scalaxb.XMLFormat[ContributorType] = new DefaultComionkinmrshl7fhir_ContributorTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataRequirementTypeFormat: scalaxb.XMLFormat[DataRequirementType] = new DefaultComionkinmrshl7fhir_DataRequirementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataRequirementu46CodeFilterFormat: scalaxb.XMLFormat[DataRequirementu46CodeFilter] = new DefaultComionkinmrshl7fhir_DataRequirementu46CodeFilterFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataRequirementu46DateFilterFormat: scalaxb.XMLFormat[DataRequirementu46DateFilter] = new DefaultComionkinmrshl7fhir_DataRequirementu46DateFilterFormat {}
  implicit lazy val Comionkinmrshl7fhir_DosageTypeFormat: scalaxb.XMLFormat[DosageType] = new DefaultComionkinmrshl7fhir_DosageTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RelatedArtifactTypeFormat: scalaxb.XMLFormat[RelatedArtifactType] = new DefaultComionkinmrshl7fhir_RelatedArtifactTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RelatedArtifactTypeu45listFormat: scalaxb.XMLFormat[RelatedArtifactTypeu45list] = new DefaultComionkinmrshl7fhir_RelatedArtifactTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RelatedArtifactTypeTypeFormat: scalaxb.XMLFormat[RelatedArtifactTypeType] = new DefaultComionkinmrshl7fhir_RelatedArtifactTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactDetailTypeFormat: scalaxb.XMLFormat[ContactDetailType] = new DefaultComionkinmrshl7fhir_ContactDetailTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_HumanNameTypeFormat: scalaxb.XMLFormat[HumanNameType] = new DefaultComionkinmrshl7fhir_HumanNameTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NameUseu45listFormat: scalaxb.XMLFormat[NameUseu45list] = new DefaultComionkinmrshl7fhir_NameUseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NameUseFormat: scalaxb.XMLFormat[NameUse] = new DefaultComionkinmrshl7fhir_NameUseFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactPointTypeFormat: scalaxb.XMLFormat[ContactPointType] = new DefaultComionkinmrshl7fhir_ContactPointTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactPointSystemu45listFormat: scalaxb.XMLFormat[ContactPointSystemu45list] = new DefaultComionkinmrshl7fhir_ContactPointSystemu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactPointSystemFormat: scalaxb.XMLFormat[ContactPointSystem] = new DefaultComionkinmrshl7fhir_ContactPointSystemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactPointUseu45listFormat: scalaxb.XMLFormat[ContactPointUseu45list] = new DefaultComionkinmrshl7fhir_ContactPointUseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContactPointUseFormat: scalaxb.XMLFormat[ContactPointUse] = new DefaultComionkinmrshl7fhir_ContactPointUseFormat {}
  implicit lazy val Comionkinmrshl7fhir_UsageContextTypeFormat: scalaxb.XMLFormat[UsageContextType] = new DefaultComionkinmrshl7fhir_UsageContextTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TimingTypeFormat: scalaxb.XMLFormat[TimingType] = new DefaultComionkinmrshl7fhir_TimingTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Timingu46RepeatFormat: scalaxb.XMLFormat[Timingu46Repeat] = new DefaultComionkinmrshl7fhir_Timingu46RepeatFormat {}
  implicit lazy val Comionkinmrshl7fhir_UnitsOfTimeu45listFormat: scalaxb.XMLFormat[UnitsOfTimeu45list] = new DefaultComionkinmrshl7fhir_UnitsOfTimeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_UnitsOfTimeFormat: scalaxb.XMLFormat[UnitsOfTime] = new DefaultComionkinmrshl7fhir_UnitsOfTimeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventTimingu45listFormat: scalaxb.XMLFormat[EventTimingu45list] = new DefaultComionkinmrshl7fhir_EventTimingu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventTimingFormat: scalaxb.XMLFormat[EventTiming] = new DefaultComionkinmrshl7fhir_EventTimingFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionTypeFormat: scalaxb.XMLFormat[ElementDefinitionType] = new DefaultComionkinmrshl7fhir_ElementDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46ConstraintFormat: scalaxb.XMLFormat[ElementDefinitionu46Constraint] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46ConstraintFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46MappingFormat: scalaxb.XMLFormat[ElementDefinitionu46Mapping] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46MappingFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46BaseFormat: scalaxb.XMLFormat[ElementDefinitionu46Base] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46BaseFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46TypeFormat: scalaxb.XMLFormat[ElementDefinitionu46Type] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46TypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46ExampleFormat: scalaxb.XMLFormat[ElementDefinitionu46Example] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46ExampleFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46SlicingFormat: scalaxb.XMLFormat[ElementDefinitionu46Slicing] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46SlicingFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46BindingFormat: scalaxb.XMLFormat[ElementDefinitionu46Binding] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46BindingFormat {}
  implicit lazy val Comionkinmrshl7fhir_ElementDefinitionu46DiscriminatorFormat: scalaxb.XMLFormat[ElementDefinitionu46Discriminator] = new DefaultComionkinmrshl7fhir_ElementDefinitionu46DiscriminatorFormat {}
  implicit lazy val Comionkinmrshl7fhir_PropertyRepresentationu45listFormat: scalaxb.XMLFormat[PropertyRepresentationu45list] = new DefaultComionkinmrshl7fhir_PropertyRepresentationu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_PropertyRepresentationFormat: scalaxb.XMLFormat[PropertyRepresentation] = new DefaultComionkinmrshl7fhir_PropertyRepresentationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConstraintSeverityu45listFormat: scalaxb.XMLFormat[ConstraintSeverityu45list] = new DefaultComionkinmrshl7fhir_ConstraintSeverityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConstraintSeverityFormat: scalaxb.XMLFormat[ConstraintSeverity] = new DefaultComionkinmrshl7fhir_ConstraintSeverityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AggregationModeu45listFormat: scalaxb.XMLFormat[AggregationModeu45list] = new DefaultComionkinmrshl7fhir_AggregationModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AggregationModeFormat: scalaxb.XMLFormat[AggregationMode] = new DefaultComionkinmrshl7fhir_AggregationModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferenceVersionRulesu45listFormat: scalaxb.XMLFormat[ReferenceVersionRulesu45list] = new DefaultComionkinmrshl7fhir_ReferenceVersionRulesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferenceVersionRulesFormat: scalaxb.XMLFormat[ReferenceVersionRules] = new DefaultComionkinmrshl7fhir_ReferenceVersionRulesFormat {}
  implicit lazy val Comionkinmrshl7fhir_SlicingRulesu45listFormat: scalaxb.XMLFormat[SlicingRulesu45list] = new DefaultComionkinmrshl7fhir_SlicingRulesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SlicingRulesFormat: scalaxb.XMLFormat[SlicingRules] = new DefaultComionkinmrshl7fhir_SlicingRulesFormat {}
  implicit lazy val Comionkinmrshl7fhir_BindingStrengthu45listFormat: scalaxb.XMLFormat[BindingStrengthu45list] = new DefaultComionkinmrshl7fhir_BindingStrengthu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_BindingStrengthFormat: scalaxb.XMLFormat[BindingStrength] = new DefaultComionkinmrshl7fhir_BindingStrengthFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiscriminatorTypeu45listFormat: scalaxb.XMLFormat[DiscriminatorTypeu45list] = new DefaultComionkinmrshl7fhir_DiscriminatorTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiscriminatorTypeFormat: scalaxb.XMLFormat[DiscriminatorType] = new DefaultComionkinmrshl7fhir_DiscriminatorTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParameterDefinitionTypeFormat: scalaxb.XMLFormat[ParameterDefinitionType] = new DefaultComionkinmrshl7fhir_ParameterDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DomainResourcableFormat: scalaxb.XMLFormat[DomainResourcable] = new DefaultComionkinmrshl7fhir_DomainResourcableFormat {}
  implicit lazy val Comionkinmrshl7fhir_DomainResourceTypeFormat: scalaxb.XMLFormat[DomainResourceType] = new DefaultComionkinmrshl7fhir_DomainResourceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourcableFormat: scalaxb.XMLFormat[Resourcable] = new DefaultComionkinmrshl7fhir_ResourcableFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceTypeFormat: scalaxb.XMLFormat[ResourceType] = new DefaultComionkinmrshl7fhir_ResourceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PublicationStatusu45listFormat: scalaxb.XMLFormat[PublicationStatusu45list] = new DefaultComionkinmrshl7fhir_PublicationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_PublicationStatusFormat: scalaxb.XMLFormat[PublicationStatus] = new DefaultComionkinmrshl7fhir_PublicationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchParamTypeu45listFormat: scalaxb.XMLFormat[SearchParamTypeu45list] = new DefaultComionkinmrshl7fhir_SearchParamTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchParamTypeFormat: scalaxb.XMLFormat[SearchParamType] = new DefaultComionkinmrshl7fhir_SearchParamTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdministrativeGenderu45listFormat: scalaxb.XMLFormat[AdministrativeGenderu45list] = new DefaultComionkinmrshl7fhir_AdministrativeGenderu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdministrativeGenderFormat: scalaxb.XMLFormat[AdministrativeGender] = new DefaultComionkinmrshl7fhir_AdministrativeGenderFormat {}
  implicit lazy val Comionkinmrshl7fhir_RemittanceOutcomeu45listFormat: scalaxb.XMLFormat[RemittanceOutcomeu45list] = new DefaultComionkinmrshl7fhir_RemittanceOutcomeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RemittanceOutcomeFormat: scalaxb.XMLFormat[RemittanceOutcome] = new DefaultComionkinmrshl7fhir_RemittanceOutcomeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NoteTypeu45listFormat: scalaxb.XMLFormat[NoteTypeu45list] = new DefaultComionkinmrshl7fhir_NoteTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NoteTypeFormat: scalaxb.XMLFormat[NoteType] = new DefaultComionkinmrshl7fhir_NoteTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapEquivalenceu45listFormat: scalaxb.XMLFormat[ConceptMapEquivalenceu45list] = new DefaultComionkinmrshl7fhir_ConceptMapEquivalenceu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapEquivalenceFormat: scalaxb.XMLFormat[ConceptMapEquivalence] = new DefaultComionkinmrshl7fhir_ConceptMapEquivalenceFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceStatusu45listFormat: scalaxb.XMLFormat[DocumentReferenceStatusu45list] = new DefaultComionkinmrshl7fhir_DocumentReferenceStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceStatusFormat: scalaxb.XMLFormat[DocumentReferenceStatus] = new DefaultComionkinmrshl7fhir_DocumentReferenceStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_AccountTypeFormat: scalaxb.XMLFormat[AccountType] = new DefaultComionkinmrshl7fhir_AccountTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Accountu46CoverageFormat: scalaxb.XMLFormat[Accountu46Coverage] = new DefaultComionkinmrshl7fhir_Accountu46CoverageFormat {}
  implicit lazy val Comionkinmrshl7fhir_Accountu46GuarantorFormat: scalaxb.XMLFormat[Accountu46Guarantor] = new DefaultComionkinmrshl7fhir_Accountu46GuarantorFormat {}
  implicit lazy val Comionkinmrshl7fhir_AccountStatusu45listFormat: scalaxb.XMLFormat[AccountStatusu45list] = new DefaultComionkinmrshl7fhir_AccountStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AccountStatusFormat: scalaxb.XMLFormat[AccountStatus] = new DefaultComionkinmrshl7fhir_AccountStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActivityDefinitionTypeFormat: scalaxb.XMLFormat[ActivityDefinitionType] = new DefaultComionkinmrshl7fhir_ActivityDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActivityDefinitionu46ParticipantFormat: scalaxb.XMLFormat[ActivityDefinitionu46Participant] = new DefaultComionkinmrshl7fhir_ActivityDefinitionu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActivityDefinitionu46DynamicValueFormat: scalaxb.XMLFormat[ActivityDefinitionu46DynamicValue] = new DefaultComionkinmrshl7fhir_ActivityDefinitionu46DynamicValueFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionParticipantTypeu45listFormat: scalaxb.XMLFormat[ActionParticipantTypeu45list] = new DefaultComionkinmrshl7fhir_ActionParticipantTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionParticipantTypeFormat: scalaxb.XMLFormat[ActionParticipantType] = new DefaultComionkinmrshl7fhir_ActionParticipantTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceTypeu45listFormat: scalaxb.XMLFormat[ResourceTypeu45list] = new DefaultComionkinmrshl7fhir_ResourceTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceTypeTypeFormat: scalaxb.XMLFormat[ResourceTypeType] = new DefaultComionkinmrshl7fhir_ResourceTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventTypeFormat: scalaxb.XMLFormat[AdverseEventType] = new DefaultComionkinmrshl7fhir_AdverseEventTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventu46SuspectEntityFormat: scalaxb.XMLFormat[AdverseEventu46SuspectEntity] = new DefaultComionkinmrshl7fhir_AdverseEventu46SuspectEntityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventCausalityu45listFormat: scalaxb.XMLFormat[AdverseEventCausalityu45list] = new DefaultComionkinmrshl7fhir_AdverseEventCausalityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventCausalityFormat: scalaxb.XMLFormat[AdverseEventCausality] = new DefaultComionkinmrshl7fhir_AdverseEventCausalityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventCategoryu45listFormat: scalaxb.XMLFormat[AdverseEventCategoryu45list] = new DefaultComionkinmrshl7fhir_AdverseEventCategoryu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AdverseEventCategoryFormat: scalaxb.XMLFormat[AdverseEventCategory] = new DefaultComionkinmrshl7fhir_AdverseEventCategoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceTypeFormat: scalaxb.XMLFormat[AllergyIntoleranceType] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceu46ReactionFormat: scalaxb.XMLFormat[AllergyIntoleranceu46Reaction] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceu46ReactionFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceCriticalityu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceCriticalityu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCriticalityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceCriticalityFormat: scalaxb.XMLFormat[AllergyIntoleranceCriticality] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCriticalityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceTypeu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceTypeu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceTypeTypeFormat: scalaxb.XMLFormat[AllergyIntoleranceTypeType] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceCategoryu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceCategoryu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCategoryu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceCategoryFormat: scalaxb.XMLFormat[AllergyIntoleranceCategory] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCategoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceVerificationStatusu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceVerificationStatusu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceVerificationStatusFormat: scalaxb.XMLFormat[AllergyIntoleranceVerificationStatus] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceSeverityu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceSeverityu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceSeverityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceSeverityFormat: scalaxb.XMLFormat[AllergyIntoleranceSeverity] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceSeverityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceClinicalStatusu45listFormat: scalaxb.XMLFormat[AllergyIntoleranceClinicalStatusu45list] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AllergyIntoleranceClinicalStatusFormat: scalaxb.XMLFormat[AllergyIntoleranceClinicalStatus] = new DefaultComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_AppointmentTypeFormat: scalaxb.XMLFormat[AppointmentType] = new DefaultComionkinmrshl7fhir_AppointmentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Appointmentu46ParticipantFormat: scalaxb.XMLFormat[Appointmentu46Participant] = new DefaultComionkinmrshl7fhir_Appointmentu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParticipantRequiredu45listFormat: scalaxb.XMLFormat[ParticipantRequiredu45list] = new DefaultComionkinmrshl7fhir_ParticipantRequiredu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParticipantRequiredFormat: scalaxb.XMLFormat[ParticipantRequired] = new DefaultComionkinmrshl7fhir_ParticipantRequiredFormat {}
  implicit lazy val Comionkinmrshl7fhir_AppointmentStatusu45listFormat: scalaxb.XMLFormat[AppointmentStatusu45list] = new DefaultComionkinmrshl7fhir_AppointmentStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AppointmentStatusFormat: scalaxb.XMLFormat[AppointmentStatus] = new DefaultComionkinmrshl7fhir_AppointmentStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParticipationStatusu45listFormat: scalaxb.XMLFormat[ParticipationStatusu45list] = new DefaultComionkinmrshl7fhir_ParticipationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParticipationStatusFormat: scalaxb.XMLFormat[ParticipationStatus] = new DefaultComionkinmrshl7fhir_ParticipationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_AppointmentResponseTypeFormat: scalaxb.XMLFormat[AppointmentResponseType] = new DefaultComionkinmrshl7fhir_AppointmentResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventTypeFormat: scalaxb.XMLFormat[AuditEventType] = new DefaultComionkinmrshl7fhir_AuditEventTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventu46AgentFormat: scalaxb.XMLFormat[AuditEventu46Agent] = new DefaultComionkinmrshl7fhir_AuditEventu46AgentFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventu46NetworkFormat: scalaxb.XMLFormat[AuditEventu46Network] = new DefaultComionkinmrshl7fhir_AuditEventu46NetworkFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventu46SourceFormat: scalaxb.XMLFormat[AuditEventu46Source] = new DefaultComionkinmrshl7fhir_AuditEventu46SourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventu46EntityFormat: scalaxb.XMLFormat[AuditEventu46Entity] = new DefaultComionkinmrshl7fhir_AuditEventu46EntityFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventu46DetailFormat: scalaxb.XMLFormat[AuditEventu46Detail] = new DefaultComionkinmrshl7fhir_AuditEventu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventOutcomeu45listFormat: scalaxb.XMLFormat[AuditEventOutcomeu45list] = new DefaultComionkinmrshl7fhir_AuditEventOutcomeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventOutcomeFormat: scalaxb.XMLFormat[AuditEventOutcome] = new DefaultComionkinmrshl7fhir_AuditEventOutcomeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventActionu45listFormat: scalaxb.XMLFormat[AuditEventActionu45list] = new DefaultComionkinmrshl7fhir_AuditEventActionu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventActionFormat: scalaxb.XMLFormat[AuditEventAction] = new DefaultComionkinmrshl7fhir_AuditEventActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventAgentNetworkTypeu45listFormat: scalaxb.XMLFormat[AuditEventAgentNetworkTypeu45list] = new DefaultComionkinmrshl7fhir_AuditEventAgentNetworkTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AuditEventAgentNetworkTypeFormat: scalaxb.XMLFormat[AuditEventAgentNetworkType] = new DefaultComionkinmrshl7fhir_AuditEventAgentNetworkTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BasicTypeFormat: scalaxb.XMLFormat[BasicType] = new DefaultComionkinmrshl7fhir_BasicTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BinaryTypeFormat: scalaxb.XMLFormat[BinaryType] = new DefaultComionkinmrshl7fhir_BinaryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BodySiteTypeFormat: scalaxb.XMLFormat[BodySiteType] = new DefaultComionkinmrshl7fhir_BodySiteTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_BundleTypeFormat: scalaxb.XMLFormat[BundleType] = new DefaultComionkinmrshl7fhir_BundleTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Bundleu46LinkFormat: scalaxb.XMLFormat[Bundleu46Link] = new DefaultComionkinmrshl7fhir_Bundleu46LinkFormat {}
  implicit lazy val Comionkinmrshl7fhir_Bundleu46EntryFormat: scalaxb.XMLFormat[Bundleu46Entry] = new DefaultComionkinmrshl7fhir_Bundleu46EntryFormat {}
  implicit lazy val Comionkinmrshl7fhir_Bundleu46SearchFormat: scalaxb.XMLFormat[Bundleu46Search] = new DefaultComionkinmrshl7fhir_Bundleu46SearchFormat {}
  implicit lazy val Comionkinmrshl7fhir_Bundleu46RequestFormat: scalaxb.XMLFormat[Bundleu46Request] = new DefaultComionkinmrshl7fhir_Bundleu46RequestFormat {}
  implicit lazy val Comionkinmrshl7fhir_Bundleu46ResponseFormat: scalaxb.XMLFormat[Bundleu46Response] = new DefaultComionkinmrshl7fhir_Bundleu46ResponseFormat {}
  implicit lazy val Comionkinmrshl7fhir_HTTPVerbu45listFormat: scalaxb.XMLFormat[HTTPVerbu45list] = new DefaultComionkinmrshl7fhir_HTTPVerbu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_HTTPVerbFormat: scalaxb.XMLFormat[HTTPVerb] = new DefaultComionkinmrshl7fhir_HTTPVerbFormat {}
  implicit lazy val Comionkinmrshl7fhir_BundleTypeu45listFormat: scalaxb.XMLFormat[BundleTypeu45list] = new DefaultComionkinmrshl7fhir_BundleTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_BundleTypeTypeFormat: scalaxb.XMLFormat[BundleTypeType] = new DefaultComionkinmrshl7fhir_BundleTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchEntryModeu45listFormat: scalaxb.XMLFormat[SearchEntryModeu45list] = new DefaultComionkinmrshl7fhir_SearchEntryModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchEntryModeFormat: scalaxb.XMLFormat[SearchEntryMode] = new DefaultComionkinmrshl7fhir_SearchEntryModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementTypeFormat: scalaxb.XMLFormat[CapabilityStatementType] = new DefaultComionkinmrshl7fhir_CapabilityStatementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46SoftwareFormat: scalaxb.XMLFormat[CapabilityStatementu46Software] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46SoftwareFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46ImplementationFormat: scalaxb.XMLFormat[CapabilityStatementu46Implementation] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46ImplementationFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46RestFormat: scalaxb.XMLFormat[CapabilityStatementu46Rest] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46RestFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46SecurityFormat: scalaxb.XMLFormat[CapabilityStatementu46Security] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46SecurityFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46CertificateFormat: scalaxb.XMLFormat[CapabilityStatementu46Certificate] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46CertificateFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46ResourceFormat: scalaxb.XMLFormat[CapabilityStatementu46Resource] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46ResourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46InteractionFormat: scalaxb.XMLFormat[CapabilityStatementu46Interaction] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46InteractionFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46SearchParamFormat: scalaxb.XMLFormat[CapabilityStatementu46SearchParam] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46SearchParamFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46Interaction1Format: scalaxb.XMLFormat[CapabilityStatementu46Interaction1] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46Interaction1Format {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46OperationFormat: scalaxb.XMLFormat[CapabilityStatementu46Operation] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46OperationFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46MessagingFormat: scalaxb.XMLFormat[CapabilityStatementu46Messaging] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46MessagingFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46EndpointFormat: scalaxb.XMLFormat[CapabilityStatementu46Endpoint] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46EndpointFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46SupportedMessageFormat: scalaxb.XMLFormat[CapabilityStatementu46SupportedMessage] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46SupportedMessageFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46EventFormat: scalaxb.XMLFormat[CapabilityStatementu46Event] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46EventFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementu46DocumentFormat: scalaxb.XMLFormat[CapabilityStatementu46Document] = new DefaultComionkinmrshl7fhir_CapabilityStatementu46DocumentFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementKindu45listFormat: scalaxb.XMLFormat[CapabilityStatementKindu45list] = new DefaultComionkinmrshl7fhir_CapabilityStatementKindu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CapabilityStatementKindFormat: scalaxb.XMLFormat[CapabilityStatementKind] = new DefaultComionkinmrshl7fhir_CapabilityStatementKindFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventCapabilityModeu45listFormat: scalaxb.XMLFormat[EventCapabilityModeu45list] = new DefaultComionkinmrshl7fhir_EventCapabilityModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventCapabilityModeFormat: scalaxb.XMLFormat[EventCapabilityMode] = new DefaultComionkinmrshl7fhir_EventCapabilityModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceVersionPolicyu45listFormat: scalaxb.XMLFormat[ResourceVersionPolicyu45list] = new DefaultComionkinmrshl7fhir_ResourceVersionPolicyu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResourceVersionPolicyFormat: scalaxb.XMLFormat[ResourceVersionPolicy] = new DefaultComionkinmrshl7fhir_ResourceVersionPolicyFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageSignificanceCategoryu45listFormat: scalaxb.XMLFormat[MessageSignificanceCategoryu45list] = new DefaultComionkinmrshl7fhir_MessageSignificanceCategoryu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageSignificanceCategoryFormat: scalaxb.XMLFormat[MessageSignificanceCategory] = new DefaultComionkinmrshl7fhir_MessageSignificanceCategoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentModeu45listFormat: scalaxb.XMLFormat[DocumentModeu45list] = new DefaultComionkinmrshl7fhir_DocumentModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentModeFormat: scalaxb.XMLFormat[DocumentMode] = new DefaultComionkinmrshl7fhir_DocumentModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RestfulCapabilityModeu45listFormat: scalaxb.XMLFormat[RestfulCapabilityModeu45list] = new DefaultComionkinmrshl7fhir_RestfulCapabilityModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RestfulCapabilityModeFormat: scalaxb.XMLFormat[RestfulCapabilityMode] = new DefaultComionkinmrshl7fhir_RestfulCapabilityModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_UnknownContentCodeu45listFormat: scalaxb.XMLFormat[UnknownContentCodeu45list] = new DefaultComionkinmrshl7fhir_UnknownContentCodeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_UnknownContentCodeFormat: scalaxb.XMLFormat[UnknownContentCode] = new DefaultComionkinmrshl7fhir_UnknownContentCodeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TypeRestfulInteractionu45listFormat: scalaxb.XMLFormat[TypeRestfulInteractionu45list] = new DefaultComionkinmrshl7fhir_TypeRestfulInteractionu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TypeRestfulInteractionFormat: scalaxb.XMLFormat[TypeRestfulInteraction] = new DefaultComionkinmrshl7fhir_TypeRestfulInteractionFormat {}
  implicit lazy val Comionkinmrshl7fhir_SystemRestfulInteractionu45listFormat: scalaxb.XMLFormat[SystemRestfulInteractionu45list] = new DefaultComionkinmrshl7fhir_SystemRestfulInteractionu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SystemRestfulInteractionFormat: scalaxb.XMLFormat[SystemRestfulInteraction] = new DefaultComionkinmrshl7fhir_SystemRestfulInteractionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionalReadStatusu45listFormat: scalaxb.XMLFormat[ConditionalReadStatusu45list] = new DefaultComionkinmrshl7fhir_ConditionalReadStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionalReadStatusFormat: scalaxb.XMLFormat[ConditionalReadStatus] = new DefaultComionkinmrshl7fhir_ConditionalReadStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferenceHandlingPolicyu45listFormat: scalaxb.XMLFormat[ReferenceHandlingPolicyu45list] = new DefaultComionkinmrshl7fhir_ReferenceHandlingPolicyu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferenceHandlingPolicyFormat: scalaxb.XMLFormat[ReferenceHandlingPolicy] = new DefaultComionkinmrshl7fhir_ReferenceHandlingPolicyFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionalDeleteStatusu45listFormat: scalaxb.XMLFormat[ConditionalDeleteStatusu45list] = new DefaultComionkinmrshl7fhir_ConditionalDeleteStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionalDeleteStatusFormat: scalaxb.XMLFormat[ConditionalDeleteStatus] = new DefaultComionkinmrshl7fhir_ConditionalDeleteStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanTypeFormat: scalaxb.XMLFormat[CarePlanType] = new DefaultComionkinmrshl7fhir_CarePlanTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanu46ActivityFormat: scalaxb.XMLFormat[CarePlanu46Activity] = new DefaultComionkinmrshl7fhir_CarePlanu46ActivityFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanu46DetailFormat: scalaxb.XMLFormat[CarePlanu46Detail] = new DefaultComionkinmrshl7fhir_CarePlanu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanStatusu45listFormat: scalaxb.XMLFormat[CarePlanStatusu45list] = new DefaultComionkinmrshl7fhir_CarePlanStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanStatusFormat: scalaxb.XMLFormat[CarePlanStatus] = new DefaultComionkinmrshl7fhir_CarePlanStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanActivityStatusu45listFormat: scalaxb.XMLFormat[CarePlanActivityStatusu45list] = new DefaultComionkinmrshl7fhir_CarePlanActivityStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanActivityStatusFormat: scalaxb.XMLFormat[CarePlanActivityStatus] = new DefaultComionkinmrshl7fhir_CarePlanActivityStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanIntentu45listFormat: scalaxb.XMLFormat[CarePlanIntentu45list] = new DefaultComionkinmrshl7fhir_CarePlanIntentu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CarePlanIntentFormat: scalaxb.XMLFormat[CarePlanIntent] = new DefaultComionkinmrshl7fhir_CarePlanIntentFormat {}
  implicit lazy val Comionkinmrshl7fhir_CareTeamTypeFormat: scalaxb.XMLFormat[CareTeamType] = new DefaultComionkinmrshl7fhir_CareTeamTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CareTeamu46ParticipantFormat: scalaxb.XMLFormat[CareTeamu46Participant] = new DefaultComionkinmrshl7fhir_CareTeamu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_CareTeamStatusu45listFormat: scalaxb.XMLFormat[CareTeamStatusu45list] = new DefaultComionkinmrshl7fhir_CareTeamStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CareTeamStatusFormat: scalaxb.XMLFormat[CareTeamStatus] = new DefaultComionkinmrshl7fhir_CareTeamStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ChargeItemTypeFormat: scalaxb.XMLFormat[ChargeItemType] = new DefaultComionkinmrshl7fhir_ChargeItemTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ChargeItemu46ParticipantFormat: scalaxb.XMLFormat[ChargeItemu46Participant] = new DefaultComionkinmrshl7fhir_ChargeItemu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_ChargeItemStatusu45listFormat: scalaxb.XMLFormat[ChargeItemStatusu45list] = new DefaultComionkinmrshl7fhir_ChargeItemStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ChargeItemStatusFormat: scalaxb.XMLFormat[ChargeItemStatus] = new DefaultComionkinmrshl7fhir_ChargeItemStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimTypeFormat: scalaxb.XMLFormat[ClaimType] = new DefaultComionkinmrshl7fhir_ClaimTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46RelatedFormat: scalaxb.XMLFormat[Claimu46Related] = new DefaultComionkinmrshl7fhir_Claimu46RelatedFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46PayeeFormat: scalaxb.XMLFormat[Claimu46Payee] = new DefaultComionkinmrshl7fhir_Claimu46PayeeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46CareTeamFormat: scalaxb.XMLFormat[Claimu46CareTeam] = new DefaultComionkinmrshl7fhir_Claimu46CareTeamFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46InformationFormat: scalaxb.XMLFormat[Claimu46Information] = new DefaultComionkinmrshl7fhir_Claimu46InformationFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46DiagnosisFormat: scalaxb.XMLFormat[Claimu46Diagnosis] = new DefaultComionkinmrshl7fhir_Claimu46DiagnosisFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46ProcedureFormat: scalaxb.XMLFormat[Claimu46Procedure] = new DefaultComionkinmrshl7fhir_Claimu46ProcedureFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46InsuranceFormat: scalaxb.XMLFormat[Claimu46Insurance] = new DefaultComionkinmrshl7fhir_Claimu46InsuranceFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46AccidentFormat: scalaxb.XMLFormat[Claimu46Accident] = new DefaultComionkinmrshl7fhir_Claimu46AccidentFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46ItemFormat: scalaxb.XMLFormat[Claimu46Item] = new DefaultComionkinmrshl7fhir_Claimu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46DetailFormat: scalaxb.XMLFormat[Claimu46Detail] = new DefaultComionkinmrshl7fhir_Claimu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_Claimu46SubDetailFormat: scalaxb.XMLFormat[Claimu46SubDetail] = new DefaultComionkinmrshl7fhir_Claimu46SubDetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_Useu45listFormat: scalaxb.XMLFormat[Useu45list] = new DefaultComionkinmrshl7fhir_Useu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_UseFormat: scalaxb.XMLFormat[Use] = new DefaultComionkinmrshl7fhir_UseFormat {}
  implicit lazy val Comionkinmrshl7fhir_FinancialResourceStatusCodesu45listFormat: scalaxb.XMLFormat[FinancialResourceStatusCodesu45list] = new DefaultComionkinmrshl7fhir_FinancialResourceStatusCodesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FinancialResourceStatusCodesFormat: scalaxb.XMLFormat[FinancialResourceStatusCodes] = new DefaultComionkinmrshl7fhir_FinancialResourceStatusCodesFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseTypeFormat: scalaxb.XMLFormat[ClaimResponseType] = new DefaultComionkinmrshl7fhir_ClaimResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46ItemFormat: scalaxb.XMLFormat[ClaimResponseu46Item] = new DefaultComionkinmrshl7fhir_ClaimResponseu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46AdjudicationFormat: scalaxb.XMLFormat[ClaimResponseu46Adjudication] = new DefaultComionkinmrshl7fhir_ClaimResponseu46AdjudicationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46DetailFormat: scalaxb.XMLFormat[ClaimResponseu46Detail] = new DefaultComionkinmrshl7fhir_ClaimResponseu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46SubDetailFormat: scalaxb.XMLFormat[ClaimResponseu46SubDetail] = new DefaultComionkinmrshl7fhir_ClaimResponseu46SubDetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46AddItemFormat: scalaxb.XMLFormat[ClaimResponseu46AddItem] = new DefaultComionkinmrshl7fhir_ClaimResponseu46AddItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46Detail1Format: scalaxb.XMLFormat[ClaimResponseu46Detail1] = new DefaultComionkinmrshl7fhir_ClaimResponseu46Detail1Format {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46ErrorFormat: scalaxb.XMLFormat[ClaimResponseu46Error] = new DefaultComionkinmrshl7fhir_ClaimResponseu46ErrorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46PaymentFormat: scalaxb.XMLFormat[ClaimResponseu46Payment] = new DefaultComionkinmrshl7fhir_ClaimResponseu46PaymentFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46ProcessNoteFormat: scalaxb.XMLFormat[ClaimResponseu46ProcessNote] = new DefaultComionkinmrshl7fhir_ClaimResponseu46ProcessNoteFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClaimResponseu46InsuranceFormat: scalaxb.XMLFormat[ClaimResponseu46Insurance] = new DefaultComionkinmrshl7fhir_ClaimResponseu46InsuranceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClinicalImpressionTypeFormat: scalaxb.XMLFormat[ClinicalImpressionType] = new DefaultComionkinmrshl7fhir_ClinicalImpressionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClinicalImpressionu46InvestigationFormat: scalaxb.XMLFormat[ClinicalImpressionu46Investigation] = new DefaultComionkinmrshl7fhir_ClinicalImpressionu46InvestigationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClinicalImpressionu46FindingFormat: scalaxb.XMLFormat[ClinicalImpressionu46Finding] = new DefaultComionkinmrshl7fhir_ClinicalImpressionu46FindingFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClinicalImpressionStatusu45listFormat: scalaxb.XMLFormat[ClinicalImpressionStatusu45list] = new DefaultComionkinmrshl7fhir_ClinicalImpressionStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ClinicalImpressionStatusFormat: scalaxb.XMLFormat[ClinicalImpressionStatus] = new DefaultComionkinmrshl7fhir_ClinicalImpressionStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemTypeFormat: scalaxb.XMLFormat[CodeSystemType] = new DefaultComionkinmrshl7fhir_CodeSystemTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemu46FilterFormat: scalaxb.XMLFormat[CodeSystemu46Filter] = new DefaultComionkinmrshl7fhir_CodeSystemu46FilterFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemu46PropertyFormat: scalaxb.XMLFormat[CodeSystemu46Property] = new DefaultComionkinmrshl7fhir_CodeSystemu46PropertyFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemu46ConceptFormat: scalaxb.XMLFormat[CodeSystemu46Concept] = new DefaultComionkinmrshl7fhir_CodeSystemu46ConceptFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemu46DesignationFormat: scalaxb.XMLFormat[CodeSystemu46Designation] = new DefaultComionkinmrshl7fhir_CodeSystemu46DesignationFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemu46Property1Format: scalaxb.XMLFormat[CodeSystemu46Property1] = new DefaultComionkinmrshl7fhir_CodeSystemu46Property1Format {}
  implicit lazy val Comionkinmrshl7fhir_FilterOperatoru45listFormat: scalaxb.XMLFormat[FilterOperatoru45list] = new DefaultComionkinmrshl7fhir_FilterOperatoru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FilterOperatorFormat: scalaxb.XMLFormat[FilterOperator] = new DefaultComionkinmrshl7fhir_FilterOperatorFormat {}
  implicit lazy val Comionkinmrshl7fhir_PropertyTypeu45listFormat: scalaxb.XMLFormat[PropertyTypeu45list] = new DefaultComionkinmrshl7fhir_PropertyTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_PropertyTypeFormat: scalaxb.XMLFormat[PropertyType] = new DefaultComionkinmrshl7fhir_PropertyTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemHierarchyMeaningu45listFormat: scalaxb.XMLFormat[CodeSystemHierarchyMeaningu45list] = new DefaultComionkinmrshl7fhir_CodeSystemHierarchyMeaningu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemHierarchyMeaningFormat: scalaxb.XMLFormat[CodeSystemHierarchyMeaning] = new DefaultComionkinmrshl7fhir_CodeSystemHierarchyMeaningFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemContentModeu45listFormat: scalaxb.XMLFormat[CodeSystemContentModeu45list] = new DefaultComionkinmrshl7fhir_CodeSystemContentModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CodeSystemContentModeFormat: scalaxb.XMLFormat[CodeSystemContentMode] = new DefaultComionkinmrshl7fhir_CodeSystemContentModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CommunicationTypeFormat: scalaxb.XMLFormat[CommunicationType] = new DefaultComionkinmrshl7fhir_CommunicationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Communicationu46PayloadFormat: scalaxb.XMLFormat[Communicationu46Payload] = new DefaultComionkinmrshl7fhir_Communicationu46PayloadFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventStatusu45listFormat: scalaxb.XMLFormat[EventStatusu45list] = new DefaultComionkinmrshl7fhir_EventStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EventStatusFormat: scalaxb.XMLFormat[EventStatus] = new DefaultComionkinmrshl7fhir_EventStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_CommunicationRequestTypeFormat: scalaxb.XMLFormat[CommunicationRequestType] = new DefaultComionkinmrshl7fhir_CommunicationRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CommunicationRequestu46PayloadFormat: scalaxb.XMLFormat[CommunicationRequestu46Payload] = new DefaultComionkinmrshl7fhir_CommunicationRequestu46PayloadFormat {}
  implicit lazy val Comionkinmrshl7fhir_CommunicationRequestu46RequesterFormat: scalaxb.XMLFormat[CommunicationRequestu46Requester] = new DefaultComionkinmrshl7fhir_CommunicationRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestStatusu45listFormat: scalaxb.XMLFormat[RequestStatusu45list] = new DefaultComionkinmrshl7fhir_RequestStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestStatusFormat: scalaxb.XMLFormat[RequestStatus] = new DefaultComionkinmrshl7fhir_RequestStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestPriorityu45listFormat: scalaxb.XMLFormat[RequestPriorityu45list] = new DefaultComionkinmrshl7fhir_RequestPriorityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestPriorityFormat: scalaxb.XMLFormat[RequestPriority] = new DefaultComionkinmrshl7fhir_RequestPriorityFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompartmentDefinitionTypeFormat: scalaxb.XMLFormat[CompartmentDefinitionType] = new DefaultComionkinmrshl7fhir_CompartmentDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompartmentDefinitionu46ResourceFormat: scalaxb.XMLFormat[CompartmentDefinitionu46Resource] = new DefaultComionkinmrshl7fhir_CompartmentDefinitionu46ResourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompartmentTypeu45listFormat: scalaxb.XMLFormat[CompartmentTypeu45list] = new DefaultComionkinmrshl7fhir_CompartmentTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompartmentTypeFormat: scalaxb.XMLFormat[CompartmentType] = new DefaultComionkinmrshl7fhir_CompartmentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompositionTypeFormat: scalaxb.XMLFormat[CompositionType] = new DefaultComionkinmrshl7fhir_CompositionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Compositionu46AttesterFormat: scalaxb.XMLFormat[Compositionu46Attester] = new DefaultComionkinmrshl7fhir_Compositionu46AttesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_Compositionu46RelatesToFormat: scalaxb.XMLFormat[Compositionu46RelatesTo] = new DefaultComionkinmrshl7fhir_Compositionu46RelatesToFormat {}
  implicit lazy val Comionkinmrshl7fhir_Compositionu46EventFormat: scalaxb.XMLFormat[Compositionu46Event] = new DefaultComionkinmrshl7fhir_Compositionu46EventFormat {}
  implicit lazy val Comionkinmrshl7fhir_Compositionu46SectionFormat: scalaxb.XMLFormat[Compositionu46Section] = new DefaultComionkinmrshl7fhir_Compositionu46SectionFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompositionStatusu45listFormat: scalaxb.XMLFormat[CompositionStatusu45list] = new DefaultComionkinmrshl7fhir_CompositionStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompositionStatusFormat: scalaxb.XMLFormat[CompositionStatus] = new DefaultComionkinmrshl7fhir_CompositionStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConfidentialityClassificationu45listFormat: scalaxb.XMLFormat[ConfidentialityClassificationu45list] = new DefaultComionkinmrshl7fhir_ConfidentialityClassificationu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConfidentialityClassificationFormat: scalaxb.XMLFormat[ConfidentialityClassification] = new DefaultComionkinmrshl7fhir_ConfidentialityClassificationFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentRelationshipTypeu45listFormat: scalaxb.XMLFormat[DocumentRelationshipTypeu45list] = new DefaultComionkinmrshl7fhir_DocumentRelationshipTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentRelationshipTypeFormat: scalaxb.XMLFormat[DocumentRelationshipType] = new DefaultComionkinmrshl7fhir_DocumentRelationshipTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompositionAttestationModeu45listFormat: scalaxb.XMLFormat[CompositionAttestationModeu45list] = new DefaultComionkinmrshl7fhir_CompositionAttestationModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_CompositionAttestationModeFormat: scalaxb.XMLFormat[CompositionAttestationMode] = new DefaultComionkinmrshl7fhir_CompositionAttestationModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ListModeu45listFormat: scalaxb.XMLFormat[ListModeu45list] = new DefaultComionkinmrshl7fhir_ListModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ListModeFormat: scalaxb.XMLFormat[ListMode] = new DefaultComionkinmrshl7fhir_ListModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapTypeFormat: scalaxb.XMLFormat[ConceptMapType] = new DefaultComionkinmrshl7fhir_ConceptMapTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapu46GroupFormat: scalaxb.XMLFormat[ConceptMapu46Group] = new DefaultComionkinmrshl7fhir_ConceptMapu46GroupFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapu46ElementFormat: scalaxb.XMLFormat[ConceptMapu46Element] = new DefaultComionkinmrshl7fhir_ConceptMapu46ElementFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapu46TargetFormat: scalaxb.XMLFormat[ConceptMapu46Target] = new DefaultComionkinmrshl7fhir_ConceptMapu46TargetFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapu46DependsOnFormat: scalaxb.XMLFormat[ConceptMapu46DependsOn] = new DefaultComionkinmrshl7fhir_ConceptMapu46DependsOnFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapu46UnmappedFormat: scalaxb.XMLFormat[ConceptMapu46Unmapped] = new DefaultComionkinmrshl7fhir_ConceptMapu46UnmappedFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapGroupUnmappedModeu45listFormat: scalaxb.XMLFormat[ConceptMapGroupUnmappedModeu45list] = new DefaultComionkinmrshl7fhir_ConceptMapGroupUnmappedModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConceptMapGroupUnmappedModeFormat: scalaxb.XMLFormat[ConceptMapGroupUnmappedMode] = new DefaultComionkinmrshl7fhir_ConceptMapGroupUnmappedModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionTypeFormat: scalaxb.XMLFormat[ConditionType] = new DefaultComionkinmrshl7fhir_ConditionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Conditionu46StageFormat: scalaxb.XMLFormat[Conditionu46Stage] = new DefaultComionkinmrshl7fhir_Conditionu46StageFormat {}
  implicit lazy val Comionkinmrshl7fhir_Conditionu46EvidenceFormat: scalaxb.XMLFormat[Conditionu46Evidence] = new DefaultComionkinmrshl7fhir_Conditionu46EvidenceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionVerificationStatusu45listFormat: scalaxb.XMLFormat[ConditionVerificationStatusu45list] = new DefaultComionkinmrshl7fhir_ConditionVerificationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionVerificationStatusFormat: scalaxb.XMLFormat[ConditionVerificationStatus] = new DefaultComionkinmrshl7fhir_ConditionVerificationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionClinicalStatusCodesu45listFormat: scalaxb.XMLFormat[ConditionClinicalStatusCodesu45list] = new DefaultComionkinmrshl7fhir_ConditionClinicalStatusCodesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConditionClinicalStatusCodesFormat: scalaxb.XMLFormat[ConditionClinicalStatusCodes] = new DefaultComionkinmrshl7fhir_ConditionClinicalStatusCodesFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentTypeFormat: scalaxb.XMLFormat[ConsentType] = new DefaultComionkinmrshl7fhir_ConsentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46ActorFormat: scalaxb.XMLFormat[Consentu46Actor] = new DefaultComionkinmrshl7fhir_Consentu46ActorFormat {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46PolicyFormat: scalaxb.XMLFormat[Consentu46Policy] = new DefaultComionkinmrshl7fhir_Consentu46PolicyFormat {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46DataFormat: scalaxb.XMLFormat[Consentu46Data] = new DefaultComionkinmrshl7fhir_Consentu46DataFormat {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46ExceptFormat: scalaxb.XMLFormat[Consentu46Except] = new DefaultComionkinmrshl7fhir_Consentu46ExceptFormat {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46Actor1Format: scalaxb.XMLFormat[Consentu46Actor1] = new DefaultComionkinmrshl7fhir_Consentu46Actor1Format {}
  implicit lazy val Comionkinmrshl7fhir_Consentu46Data1Format: scalaxb.XMLFormat[Consentu46Data1] = new DefaultComionkinmrshl7fhir_Consentu46Data1Format {}
  implicit lazy val Comionkinmrshl7fhir_ConsentDataMeaningu45listFormat: scalaxb.XMLFormat[ConsentDataMeaningu45list] = new DefaultComionkinmrshl7fhir_ConsentDataMeaningu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentDataMeaningFormat: scalaxb.XMLFormat[ConsentDataMeaning] = new DefaultComionkinmrshl7fhir_ConsentDataMeaningFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentStateu45listFormat: scalaxb.XMLFormat[ConsentStateu45list] = new DefaultComionkinmrshl7fhir_ConsentStateu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentStateFormat: scalaxb.XMLFormat[ConsentState] = new DefaultComionkinmrshl7fhir_ConsentStateFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentExceptTypeu45listFormat: scalaxb.XMLFormat[ConsentExceptTypeu45list] = new DefaultComionkinmrshl7fhir_ConsentExceptTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ConsentExceptTypeFormat: scalaxb.XMLFormat[ConsentExceptType] = new DefaultComionkinmrshl7fhir_ConsentExceptTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContractTypeFormat: scalaxb.XMLFormat[ContractType] = new DefaultComionkinmrshl7fhir_ContractTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46AgentFormat: scalaxb.XMLFormat[Contractu46Agent] = new DefaultComionkinmrshl7fhir_Contractu46AgentFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46SignerFormat: scalaxb.XMLFormat[Contractu46Signer] = new DefaultComionkinmrshl7fhir_Contractu46SignerFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46ValuedItemFormat: scalaxb.XMLFormat[Contractu46ValuedItem] = new DefaultComionkinmrshl7fhir_Contractu46ValuedItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46TermFormat: scalaxb.XMLFormat[Contractu46Term] = new DefaultComionkinmrshl7fhir_Contractu46TermFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46Agent1Format: scalaxb.XMLFormat[Contractu46Agent1] = new DefaultComionkinmrshl7fhir_Contractu46Agent1Format {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46ValuedItem1Format: scalaxb.XMLFormat[Contractu46ValuedItem1] = new DefaultComionkinmrshl7fhir_Contractu46ValuedItem1Format {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46FriendlyFormat: scalaxb.XMLFormat[Contractu46Friendly] = new DefaultComionkinmrshl7fhir_Contractu46FriendlyFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46LegalFormat: scalaxb.XMLFormat[Contractu46Legal] = new DefaultComionkinmrshl7fhir_Contractu46LegalFormat {}
  implicit lazy val Comionkinmrshl7fhir_Contractu46RuleFormat: scalaxb.XMLFormat[Contractu46Rule] = new DefaultComionkinmrshl7fhir_Contractu46RuleFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContractResourceStatusCodesu45listFormat: scalaxb.XMLFormat[ContractResourceStatusCodesu45list] = new DefaultComionkinmrshl7fhir_ContractResourceStatusCodesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContractResourceStatusCodesFormat: scalaxb.XMLFormat[ContractResourceStatusCodes] = new DefaultComionkinmrshl7fhir_ContractResourceStatusCodesFormat {}
  implicit lazy val Comionkinmrshl7fhir_CoverageTypeFormat: scalaxb.XMLFormat[CoverageType] = new DefaultComionkinmrshl7fhir_CoverageTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Coverageu46GroupingFormat: scalaxb.XMLFormat[Coverageu46Grouping] = new DefaultComionkinmrshl7fhir_Coverageu46GroupingFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataElementTypeFormat: scalaxb.XMLFormat[DataElementType] = new DefaultComionkinmrshl7fhir_DataElementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataElementu46MappingFormat: scalaxb.XMLFormat[DataElementu46Mapping] = new DefaultComionkinmrshl7fhir_DataElementu46MappingFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataElementStringencyu45listFormat: scalaxb.XMLFormat[DataElementStringencyu45list] = new DefaultComionkinmrshl7fhir_DataElementStringencyu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DataElementStringencyFormat: scalaxb.XMLFormat[DataElementStringency] = new DefaultComionkinmrshl7fhir_DataElementStringencyFormat {}
  implicit lazy val Comionkinmrshl7fhir_DetectedIssueTypeFormat: scalaxb.XMLFormat[DetectedIssueType] = new DefaultComionkinmrshl7fhir_DetectedIssueTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DetectedIssueu46MitigationFormat: scalaxb.XMLFormat[DetectedIssueu46Mitigation] = new DefaultComionkinmrshl7fhir_DetectedIssueu46MitigationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ObservationStatusu45listFormat: scalaxb.XMLFormat[ObservationStatusu45list] = new DefaultComionkinmrshl7fhir_ObservationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ObservationStatusFormat: scalaxb.XMLFormat[ObservationStatus] = new DefaultComionkinmrshl7fhir_ObservationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_DetectedIssueSeverityu45listFormat: scalaxb.XMLFormat[DetectedIssueSeverityu45list] = new DefaultComionkinmrshl7fhir_DetectedIssueSeverityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DetectedIssueSeverityFormat: scalaxb.XMLFormat[DetectedIssueSeverity] = new DefaultComionkinmrshl7fhir_DetectedIssueSeverityFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceTypeFormat: scalaxb.XMLFormat[DeviceType] = new DefaultComionkinmrshl7fhir_DeviceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Deviceu46UdiFormat: scalaxb.XMLFormat[Deviceu46Udi] = new DefaultComionkinmrshl7fhir_Deviceu46UdiFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRDeviceStatusu45listFormat: scalaxb.XMLFormat[FHIRDeviceStatusu45list] = new DefaultComionkinmrshl7fhir_FHIRDeviceStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRDeviceStatusFormat: scalaxb.XMLFormat[FHIRDeviceStatus] = new DefaultComionkinmrshl7fhir_FHIRDeviceStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_UDIEntryTypeu45listFormat: scalaxb.XMLFormat[UDIEntryTypeu45list] = new DefaultComionkinmrshl7fhir_UDIEntryTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_UDIEntryTypeFormat: scalaxb.XMLFormat[UDIEntryType] = new DefaultComionkinmrshl7fhir_UDIEntryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceComponentTypeFormat: scalaxb.XMLFormat[DeviceComponentType] = new DefaultComionkinmrshl7fhir_DeviceComponentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceComponentu46ProductionSpecificationFormat: scalaxb.XMLFormat[DeviceComponentu46ProductionSpecification] = new DefaultComionkinmrshl7fhir_DeviceComponentu46ProductionSpecificationFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasmntPrincipleu45listFormat: scalaxb.XMLFormat[MeasmntPrincipleu45list] = new DefaultComionkinmrshl7fhir_MeasmntPrincipleu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasmntPrincipleFormat: scalaxb.XMLFormat[MeasmntPrinciple] = new DefaultComionkinmrshl7fhir_MeasmntPrincipleFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricTypeFormat: scalaxb.XMLFormat[DeviceMetricType] = new DefaultComionkinmrshl7fhir_DeviceMetricTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricu46CalibrationFormat: scalaxb.XMLFormat[DeviceMetricu46Calibration] = new DefaultComionkinmrshl7fhir_DeviceMetricu46CalibrationFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCalibrationTypeu45listFormat: scalaxb.XMLFormat[DeviceMetricCalibrationTypeu45list] = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCalibrationTypeFormat: scalaxb.XMLFormat[DeviceMetricCalibrationType] = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricColoru45listFormat: scalaxb.XMLFormat[DeviceMetricColoru45list] = new DefaultComionkinmrshl7fhir_DeviceMetricColoru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricColorFormat: scalaxb.XMLFormat[DeviceMetricColor] = new DefaultComionkinmrshl7fhir_DeviceMetricColorFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCalibrationStateu45listFormat: scalaxb.XMLFormat[DeviceMetricCalibrationStateu45list] = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationStateu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCalibrationStateFormat: scalaxb.XMLFormat[DeviceMetricCalibrationState] = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationStateFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricOperationalStatusu45listFormat: scalaxb.XMLFormat[DeviceMetricOperationalStatusu45list] = new DefaultComionkinmrshl7fhir_DeviceMetricOperationalStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricOperationalStatusFormat: scalaxb.XMLFormat[DeviceMetricOperationalStatus] = new DefaultComionkinmrshl7fhir_DeviceMetricOperationalStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCategoryu45listFormat: scalaxb.XMLFormat[DeviceMetricCategoryu45list] = new DefaultComionkinmrshl7fhir_DeviceMetricCategoryu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceMetricCategoryFormat: scalaxb.XMLFormat[DeviceMetricCategory] = new DefaultComionkinmrshl7fhir_DeviceMetricCategoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceRequestTypeFormat: scalaxb.XMLFormat[DeviceRequestType] = new DefaultComionkinmrshl7fhir_DeviceRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceRequestu46RequesterFormat: scalaxb.XMLFormat[DeviceRequestu46Requester] = new DefaultComionkinmrshl7fhir_DeviceRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceUseStatementTypeFormat: scalaxb.XMLFormat[DeviceUseStatementType] = new DefaultComionkinmrshl7fhir_DeviceUseStatementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceUseStatementStatusu45listFormat: scalaxb.XMLFormat[DeviceUseStatementStatusu45list] = new DefaultComionkinmrshl7fhir_DeviceUseStatementStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DeviceUseStatementStatusFormat: scalaxb.XMLFormat[DeviceUseStatementStatus] = new DefaultComionkinmrshl7fhir_DeviceUseStatementStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiagnosticReportTypeFormat: scalaxb.XMLFormat[DiagnosticReportType] = new DefaultComionkinmrshl7fhir_DiagnosticReportTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiagnosticReportu46PerformerFormat: scalaxb.XMLFormat[DiagnosticReportu46Performer] = new DefaultComionkinmrshl7fhir_DiagnosticReportu46PerformerFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiagnosticReportu46ImageFormat: scalaxb.XMLFormat[DiagnosticReportu46Image] = new DefaultComionkinmrshl7fhir_DiagnosticReportu46ImageFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiagnosticReportStatusu45listFormat: scalaxb.XMLFormat[DiagnosticReportStatusu45list] = new DefaultComionkinmrshl7fhir_DiagnosticReportStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DiagnosticReportStatusFormat: scalaxb.XMLFormat[DiagnosticReportStatus] = new DefaultComionkinmrshl7fhir_DiagnosticReportStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentManifestTypeFormat: scalaxb.XMLFormat[DocumentManifestType] = new DefaultComionkinmrshl7fhir_DocumentManifestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentManifestu46ContentFormat: scalaxb.XMLFormat[DocumentManifestu46Content] = new DefaultComionkinmrshl7fhir_DocumentManifestu46ContentFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentManifestu46RelatedFormat: scalaxb.XMLFormat[DocumentManifestu46Related] = new DefaultComionkinmrshl7fhir_DocumentManifestu46RelatedFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceTypeFormat: scalaxb.XMLFormat[DocumentReferenceType] = new DefaultComionkinmrshl7fhir_DocumentReferenceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceu46RelatesToFormat: scalaxb.XMLFormat[DocumentReferenceu46RelatesTo] = new DefaultComionkinmrshl7fhir_DocumentReferenceu46RelatesToFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceu46ContentFormat: scalaxb.XMLFormat[DocumentReferenceu46Content] = new DefaultComionkinmrshl7fhir_DocumentReferenceu46ContentFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceu46ContextFormat: scalaxb.XMLFormat[DocumentReferenceu46Context] = new DefaultComionkinmrshl7fhir_DocumentReferenceu46ContextFormat {}
  implicit lazy val Comionkinmrshl7fhir_DocumentReferenceu46RelatedFormat: scalaxb.XMLFormat[DocumentReferenceu46Related] = new DefaultComionkinmrshl7fhir_DocumentReferenceu46RelatedFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityRequestTypeFormat: scalaxb.XMLFormat[EligibilityRequestType] = new DefaultComionkinmrshl7fhir_EligibilityRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityResponseTypeFormat: scalaxb.XMLFormat[EligibilityResponseType] = new DefaultComionkinmrshl7fhir_EligibilityResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityResponseu46InsuranceFormat: scalaxb.XMLFormat[EligibilityResponseu46Insurance] = new DefaultComionkinmrshl7fhir_EligibilityResponseu46InsuranceFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityResponseu46BenefitBalanceFormat: scalaxb.XMLFormat[EligibilityResponseu46BenefitBalance] = new DefaultComionkinmrshl7fhir_EligibilityResponseu46BenefitBalanceFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityResponseu46FinancialFormat: scalaxb.XMLFormat[EligibilityResponseu46Financial] = new DefaultComionkinmrshl7fhir_EligibilityResponseu46FinancialFormat {}
  implicit lazy val Comionkinmrshl7fhir_EligibilityResponseu46ErrorFormat: scalaxb.XMLFormat[EligibilityResponseu46Error] = new DefaultComionkinmrshl7fhir_EligibilityResponseu46ErrorFormat {}
  implicit lazy val Comionkinmrshl7fhir_EncounterTypeFormat: scalaxb.XMLFormat[EncounterType] = new DefaultComionkinmrshl7fhir_EncounterTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46StatusHistoryFormat: scalaxb.XMLFormat[Encounteru46StatusHistory] = new DefaultComionkinmrshl7fhir_Encounteru46StatusHistoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46ClassHistoryFormat: scalaxb.XMLFormat[Encounteru46ClassHistory] = new DefaultComionkinmrshl7fhir_Encounteru46ClassHistoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46ParticipantFormat: scalaxb.XMLFormat[Encounteru46Participant] = new DefaultComionkinmrshl7fhir_Encounteru46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46DiagnosisFormat: scalaxb.XMLFormat[Encounteru46Diagnosis] = new DefaultComionkinmrshl7fhir_Encounteru46DiagnosisFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46HospitalizationFormat: scalaxb.XMLFormat[Encounteru46Hospitalization] = new DefaultComionkinmrshl7fhir_Encounteru46HospitalizationFormat {}
  implicit lazy val Comionkinmrshl7fhir_Encounteru46LocationFormat: scalaxb.XMLFormat[Encounteru46Location] = new DefaultComionkinmrshl7fhir_Encounteru46LocationFormat {}
  implicit lazy val Comionkinmrshl7fhir_EncounterLocationStatusu45listFormat: scalaxb.XMLFormat[EncounterLocationStatusu45list] = new DefaultComionkinmrshl7fhir_EncounterLocationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EncounterLocationStatusFormat: scalaxb.XMLFormat[EncounterLocationStatus] = new DefaultComionkinmrshl7fhir_EncounterLocationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_EncounterStatusu45listFormat: scalaxb.XMLFormat[EncounterStatusu45list] = new DefaultComionkinmrshl7fhir_EncounterStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EncounterStatusFormat: scalaxb.XMLFormat[EncounterStatus] = new DefaultComionkinmrshl7fhir_EncounterStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_EndpointTypeFormat: scalaxb.XMLFormat[EndpointType] = new DefaultComionkinmrshl7fhir_EndpointTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EndpointStatusu45listFormat: scalaxb.XMLFormat[EndpointStatusu45list] = new DefaultComionkinmrshl7fhir_EndpointStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EndpointStatusFormat: scalaxb.XMLFormat[EndpointStatus] = new DefaultComionkinmrshl7fhir_EndpointStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_EnrollmentRequestTypeFormat: scalaxb.XMLFormat[EnrollmentRequestType] = new DefaultComionkinmrshl7fhir_EnrollmentRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EnrollmentResponseTypeFormat: scalaxb.XMLFormat[EnrollmentResponseType] = new DefaultComionkinmrshl7fhir_EnrollmentResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EpisodeOfCareTypeFormat: scalaxb.XMLFormat[EpisodeOfCareType] = new DefaultComionkinmrshl7fhir_EpisodeOfCareTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_EpisodeOfCareu46StatusHistoryFormat: scalaxb.XMLFormat[EpisodeOfCareu46StatusHistory] = new DefaultComionkinmrshl7fhir_EpisodeOfCareu46StatusHistoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_EpisodeOfCareu46DiagnosisFormat: scalaxb.XMLFormat[EpisodeOfCareu46Diagnosis] = new DefaultComionkinmrshl7fhir_EpisodeOfCareu46DiagnosisFormat {}
  implicit lazy val Comionkinmrshl7fhir_EpisodeOfCareStatusu45listFormat: scalaxb.XMLFormat[EpisodeOfCareStatusu45list] = new DefaultComionkinmrshl7fhir_EpisodeOfCareStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_EpisodeOfCareStatusFormat: scalaxb.XMLFormat[EpisodeOfCareStatus] = new DefaultComionkinmrshl7fhir_EpisodeOfCareStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileTypeFormat: scalaxb.XMLFormat[ExpansionProfileType] = new DefaultComionkinmrshl7fhir_ExpansionProfileTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46FixedVersionFormat: scalaxb.XMLFormat[ExpansionProfileu46FixedVersion] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46FixedVersionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46ExcludedSystemFormat: scalaxb.XMLFormat[ExpansionProfileu46ExcludedSystem] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46ExcludedSystemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46DesignationFormat: scalaxb.XMLFormat[ExpansionProfileu46Designation] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46DesignationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46IncludeFormat: scalaxb.XMLFormat[ExpansionProfileu46Include] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46IncludeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46Designation1Format: scalaxb.XMLFormat[ExpansionProfileu46Designation1] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46Designation1Format {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46ExcludeFormat: scalaxb.XMLFormat[ExpansionProfileu46Exclude] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46ExcludeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExpansionProfileu46Designation2Format: scalaxb.XMLFormat[ExpansionProfileu46Designation2] = new DefaultComionkinmrshl7fhir_ExpansionProfileu46Designation2Format {}
  implicit lazy val Comionkinmrshl7fhir_SystemVersionProcessingModeu45listFormat: scalaxb.XMLFormat[SystemVersionProcessingModeu45list] = new DefaultComionkinmrshl7fhir_SystemVersionProcessingModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SystemVersionProcessingModeFormat: scalaxb.XMLFormat[SystemVersionProcessingMode] = new DefaultComionkinmrshl7fhir_SystemVersionProcessingModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitTypeFormat: scalaxb.XMLFormat[ExplanationOfBenefitType] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46RelatedFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Related] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46RelatedFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46PayeeFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Payee] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46PayeeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46InformationFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Information] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46InformationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46CareTeamFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46CareTeam] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46CareTeamFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46DiagnosisFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Diagnosis] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46DiagnosisFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46ProcedureFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Procedure] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ProcedureFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46InsuranceFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Insurance] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46InsuranceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46AccidentFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Accident] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AccidentFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46ItemFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Item] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46AdjudicationFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Adjudication] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AdjudicationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46DetailFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Detail] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46SubDetailFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46SubDetail] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46SubDetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46AddItemFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46AddItem] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AddItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46Detail1Format: scalaxb.XMLFormat[ExplanationOfBenefitu46Detail1] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46Detail1Format {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46PaymentFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Payment] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46PaymentFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46ProcessNoteFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46ProcessNote] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ProcessNoteFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46BenefitBalanceFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46BenefitBalance] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46BenefitBalanceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitu46FinancialFormat: scalaxb.XMLFormat[ExplanationOfBenefitu46Financial] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46FinancialFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitStatusu45listFormat: scalaxb.XMLFormat[ExplanationOfBenefitStatusu45list] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExplanationOfBenefitStatusFormat: scalaxb.XMLFormat[ExplanationOfBenefitStatus] = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_FamilyMemberHistoryTypeFormat: scalaxb.XMLFormat[FamilyMemberHistoryType] = new DefaultComionkinmrshl7fhir_FamilyMemberHistoryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_FamilyMemberHistoryu46ConditionFormat: scalaxb.XMLFormat[FamilyMemberHistoryu46Condition] = new DefaultComionkinmrshl7fhir_FamilyMemberHistoryu46ConditionFormat {}
  implicit lazy val Comionkinmrshl7fhir_FamilyHistoryStatusu45listFormat: scalaxb.XMLFormat[FamilyHistoryStatusu45list] = new DefaultComionkinmrshl7fhir_FamilyHistoryStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FamilyHistoryStatusFormat: scalaxb.XMLFormat[FamilyHistoryStatus] = new DefaultComionkinmrshl7fhir_FamilyHistoryStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_FlagTypeFormat: scalaxb.XMLFormat[FlagType] = new DefaultComionkinmrshl7fhir_FlagTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_FlagStatusu45listFormat: scalaxb.XMLFormat[FlagStatusu45list] = new DefaultComionkinmrshl7fhir_FlagStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FlagStatusFormat: scalaxb.XMLFormat[FlagStatus] = new DefaultComionkinmrshl7fhir_FlagStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_GoalTypeFormat: scalaxb.XMLFormat[GoalType] = new DefaultComionkinmrshl7fhir_GoalTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Goalu46TargetFormat: scalaxb.XMLFormat[Goalu46Target] = new DefaultComionkinmrshl7fhir_Goalu46TargetFormat {}
  implicit lazy val Comionkinmrshl7fhir_GoalStatusu45listFormat: scalaxb.XMLFormat[GoalStatusu45list] = new DefaultComionkinmrshl7fhir_GoalStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GoalStatusFormat: scalaxb.XMLFormat[GoalStatus] = new DefaultComionkinmrshl7fhir_GoalStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphDefinitionTypeFormat: scalaxb.XMLFormat[GraphDefinitionType] = new DefaultComionkinmrshl7fhir_GraphDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphDefinitionu46LinkFormat: scalaxb.XMLFormat[GraphDefinitionu46Link] = new DefaultComionkinmrshl7fhir_GraphDefinitionu46LinkFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphDefinitionu46TargetFormat: scalaxb.XMLFormat[GraphDefinitionu46Target] = new DefaultComionkinmrshl7fhir_GraphDefinitionu46TargetFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphDefinitionu46CompartmentFormat: scalaxb.XMLFormat[GraphDefinitionu46Compartment] = new DefaultComionkinmrshl7fhir_GraphDefinitionu46CompartmentFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphCompartmentRuleu45listFormat: scalaxb.XMLFormat[GraphCompartmentRuleu45list] = new DefaultComionkinmrshl7fhir_GraphCompartmentRuleu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GraphCompartmentRuleFormat: scalaxb.XMLFormat[GraphCompartmentRule] = new DefaultComionkinmrshl7fhir_GraphCompartmentRuleFormat {}
  implicit lazy val Comionkinmrshl7fhir_GroupType2Format: scalaxb.XMLFormat[GroupType2] = new DefaultComionkinmrshl7fhir_GroupType2Format {}
  implicit lazy val Comionkinmrshl7fhir_Groupu46CharacteristicFormat: scalaxb.XMLFormat[Groupu46Characteristic] = new DefaultComionkinmrshl7fhir_Groupu46CharacteristicFormat {}
  implicit lazy val Comionkinmrshl7fhir_Groupu46MemberFormat: scalaxb.XMLFormat[Groupu46Member] = new DefaultComionkinmrshl7fhir_Groupu46MemberFormat {}
  implicit lazy val Comionkinmrshl7fhir_GroupTypeu45listFormat: scalaxb.XMLFormat[GroupTypeu45list] = new DefaultComionkinmrshl7fhir_GroupTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GroupTypeFormat: scalaxb.XMLFormat[GroupType] = new DefaultComionkinmrshl7fhir_GroupTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuidanceResponseTypeFormat: scalaxb.XMLFormat[GuidanceResponseType] = new DefaultComionkinmrshl7fhir_GuidanceResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuidanceResponseStatusu45listFormat: scalaxb.XMLFormat[GuidanceResponseStatusu45list] = new DefaultComionkinmrshl7fhir_GuidanceResponseStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuidanceResponseStatusFormat: scalaxb.XMLFormat[GuidanceResponseStatus] = new DefaultComionkinmrshl7fhir_GuidanceResponseStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_HealthcareServiceTypeFormat: scalaxb.XMLFormat[HealthcareServiceType] = new DefaultComionkinmrshl7fhir_HealthcareServiceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_HealthcareServiceu46AvailableTimeFormat: scalaxb.XMLFormat[HealthcareServiceu46AvailableTime] = new DefaultComionkinmrshl7fhir_HealthcareServiceu46AvailableTimeFormat {}
  implicit lazy val Comionkinmrshl7fhir_HealthcareServiceu46NotAvailableFormat: scalaxb.XMLFormat[HealthcareServiceu46NotAvailable] = new DefaultComionkinmrshl7fhir_HealthcareServiceu46NotAvailableFormat {}
  implicit lazy val Comionkinmrshl7fhir_DaysOfWeeku45listFormat: scalaxb.XMLFormat[DaysOfWeeku45list] = new DefaultComionkinmrshl7fhir_DaysOfWeeku45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DaysOfWeekFormat: scalaxb.XMLFormat[DaysOfWeek] = new DefaultComionkinmrshl7fhir_DaysOfWeekFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingManifestTypeFormat: scalaxb.XMLFormat[ImagingManifestType] = new DefaultComionkinmrshl7fhir_ImagingManifestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingManifestu46StudyFormat: scalaxb.XMLFormat[ImagingManifestu46Study] = new DefaultComionkinmrshl7fhir_ImagingManifestu46StudyFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingManifestu46SeriesFormat: scalaxb.XMLFormat[ImagingManifestu46Series] = new DefaultComionkinmrshl7fhir_ImagingManifestu46SeriesFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingManifestu46InstanceFormat: scalaxb.XMLFormat[ImagingManifestu46Instance] = new DefaultComionkinmrshl7fhir_ImagingManifestu46InstanceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingStudyTypeFormat: scalaxb.XMLFormat[ImagingStudyType] = new DefaultComionkinmrshl7fhir_ImagingStudyTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingStudyu46SeriesFormat: scalaxb.XMLFormat[ImagingStudyu46Series] = new DefaultComionkinmrshl7fhir_ImagingStudyu46SeriesFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImagingStudyu46InstanceFormat: scalaxb.XMLFormat[ImagingStudyu46Instance] = new DefaultComionkinmrshl7fhir_ImagingStudyu46InstanceFormat {}
  implicit lazy val Comionkinmrshl7fhir_InstanceAvailabilityu45listFormat: scalaxb.XMLFormat[InstanceAvailabilityu45list] = new DefaultComionkinmrshl7fhir_InstanceAvailabilityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_InstanceAvailabilityFormat: scalaxb.XMLFormat[InstanceAvailability] = new DefaultComionkinmrshl7fhir_InstanceAvailabilityFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationTypeFormat: scalaxb.XMLFormat[ImmunizationType] = new DefaultComionkinmrshl7fhir_ImmunizationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Immunizationu46PractitionerFormat: scalaxb.XMLFormat[Immunizationu46Practitioner] = new DefaultComionkinmrshl7fhir_Immunizationu46PractitionerFormat {}
  implicit lazy val Comionkinmrshl7fhir_Immunizationu46ExplanationFormat: scalaxb.XMLFormat[Immunizationu46Explanation] = new DefaultComionkinmrshl7fhir_Immunizationu46ExplanationFormat {}
  implicit lazy val Comionkinmrshl7fhir_Immunizationu46ReactionFormat: scalaxb.XMLFormat[Immunizationu46Reaction] = new DefaultComionkinmrshl7fhir_Immunizationu46ReactionFormat {}
  implicit lazy val Comionkinmrshl7fhir_Immunizationu46VaccinationProtocolFormat: scalaxb.XMLFormat[Immunizationu46VaccinationProtocol] = new DefaultComionkinmrshl7fhir_Immunizationu46VaccinationProtocolFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationStatusCodesu45listFormat: scalaxb.XMLFormat[ImmunizationStatusCodesu45list] = new DefaultComionkinmrshl7fhir_ImmunizationStatusCodesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationStatusCodesFormat: scalaxb.XMLFormat[ImmunizationStatusCodes] = new DefaultComionkinmrshl7fhir_ImmunizationStatusCodesFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationRecommendationTypeFormat: scalaxb.XMLFormat[ImmunizationRecommendationType] = new DefaultComionkinmrshl7fhir_ImmunizationRecommendationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationRecommendationu46RecommendationFormat: scalaxb.XMLFormat[ImmunizationRecommendationu46Recommendation] = new DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46RecommendationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationRecommendationu46DateCriterionFormat: scalaxb.XMLFormat[ImmunizationRecommendationu46DateCriterion] = new DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46DateCriterionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImmunizationRecommendationu46ProtocolFormat: scalaxb.XMLFormat[ImmunizationRecommendationu46Protocol] = new DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46ProtocolFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideTypeFormat: scalaxb.XMLFormat[ImplementationGuideType] = new DefaultComionkinmrshl7fhir_ImplementationGuideTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideu46DependencyFormat: scalaxb.XMLFormat[ImplementationGuideu46Dependency] = new DefaultComionkinmrshl7fhir_ImplementationGuideu46DependencyFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideu46PackageFormat: scalaxb.XMLFormat[ImplementationGuideu46Package] = new DefaultComionkinmrshl7fhir_ImplementationGuideu46PackageFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideu46ResourceFormat: scalaxb.XMLFormat[ImplementationGuideu46Resource] = new DefaultComionkinmrshl7fhir_ImplementationGuideu46ResourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideu46GlobalFormat: scalaxb.XMLFormat[ImplementationGuideu46Global] = new DefaultComionkinmrshl7fhir_ImplementationGuideu46GlobalFormat {}
  implicit lazy val Comionkinmrshl7fhir_ImplementationGuideu46PageFormat: scalaxb.XMLFormat[ImplementationGuideu46Page] = new DefaultComionkinmrshl7fhir_ImplementationGuideu46PageFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuideDependencyTypeu45listFormat: scalaxb.XMLFormat[GuideDependencyTypeu45list] = new DefaultComionkinmrshl7fhir_GuideDependencyTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuideDependencyTypeFormat: scalaxb.XMLFormat[GuideDependencyType] = new DefaultComionkinmrshl7fhir_GuideDependencyTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuidePageKindu45listFormat: scalaxb.XMLFormat[GuidePageKindu45list] = new DefaultComionkinmrshl7fhir_GuidePageKindu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_GuidePageKindFormat: scalaxb.XMLFormat[GuidePageKind] = new DefaultComionkinmrshl7fhir_GuidePageKindFormat {}
  implicit lazy val Comionkinmrshl7fhir_LibraryTypeFormat: scalaxb.XMLFormat[LibraryType] = new DefaultComionkinmrshl7fhir_LibraryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_LinkageTypeFormat: scalaxb.XMLFormat[LinkageType] = new DefaultComionkinmrshl7fhir_LinkageTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Linkageu46ItemFormat: scalaxb.XMLFormat[Linkageu46Item] = new DefaultComionkinmrshl7fhir_Linkageu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_LinkageTypeu45listFormat: scalaxb.XMLFormat[LinkageTypeu45list] = new DefaultComionkinmrshl7fhir_LinkageTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_LinkageTypeTypeFormat: scalaxb.XMLFormat[LinkageTypeType] = new DefaultComionkinmrshl7fhir_LinkageTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ListTypeTypeFormat: scalaxb.XMLFormat[ListTypeType] = new DefaultComionkinmrshl7fhir_ListTypeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Listu46EntryFormat: scalaxb.XMLFormat[Listu46Entry] = new DefaultComionkinmrshl7fhir_Listu46EntryFormat {}
  implicit lazy val Comionkinmrshl7fhir_ListStatusu45listFormat: scalaxb.XMLFormat[ListStatusu45list] = new DefaultComionkinmrshl7fhir_ListStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ListStatusFormat: scalaxb.XMLFormat[ListStatus] = new DefaultComionkinmrshl7fhir_ListStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_LocationTypeFormat: scalaxb.XMLFormat[LocationType] = new DefaultComionkinmrshl7fhir_LocationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Locationu46PositionFormat: scalaxb.XMLFormat[Locationu46Position] = new DefaultComionkinmrshl7fhir_Locationu46PositionFormat {}
  implicit lazy val Comionkinmrshl7fhir_LocationModeu45listFormat: scalaxb.XMLFormat[LocationModeu45list] = new DefaultComionkinmrshl7fhir_LocationModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_LocationModeFormat: scalaxb.XMLFormat[LocationMode] = new DefaultComionkinmrshl7fhir_LocationModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_LocationStatusu45listFormat: scalaxb.XMLFormat[LocationStatusu45list] = new DefaultComionkinmrshl7fhir_LocationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_LocationStatusFormat: scalaxb.XMLFormat[LocationStatus] = new DefaultComionkinmrshl7fhir_LocationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureTypeFormat: scalaxb.XMLFormat[MeasureType] = new DefaultComionkinmrshl7fhir_MeasureTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Measureu46GroupFormat: scalaxb.XMLFormat[Measureu46Group] = new DefaultComionkinmrshl7fhir_Measureu46GroupFormat {}
  implicit lazy val Comionkinmrshl7fhir_Measureu46PopulationFormat: scalaxb.XMLFormat[Measureu46Population] = new DefaultComionkinmrshl7fhir_Measureu46PopulationFormat {}
  implicit lazy val Comionkinmrshl7fhir_Measureu46StratifierFormat: scalaxb.XMLFormat[Measureu46Stratifier] = new DefaultComionkinmrshl7fhir_Measureu46StratifierFormat {}
  implicit lazy val Comionkinmrshl7fhir_Measureu46SupplementalDataFormat: scalaxb.XMLFormat[Measureu46SupplementalData] = new DefaultComionkinmrshl7fhir_Measureu46SupplementalDataFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportType2Format: scalaxb.XMLFormat[MeasureReportType2] = new DefaultComionkinmrshl7fhir_MeasureReportType2Format {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportu46GroupFormat: scalaxb.XMLFormat[MeasureReportu46Group] = new DefaultComionkinmrshl7fhir_MeasureReportu46GroupFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportu46PopulationFormat: scalaxb.XMLFormat[MeasureReportu46Population] = new DefaultComionkinmrshl7fhir_MeasureReportu46PopulationFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportu46StratifierFormat: scalaxb.XMLFormat[MeasureReportu46Stratifier] = new DefaultComionkinmrshl7fhir_MeasureReportu46StratifierFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportu46StratumFormat: scalaxb.XMLFormat[MeasureReportu46Stratum] = new DefaultComionkinmrshl7fhir_MeasureReportu46StratumFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportu46Population1Format: scalaxb.XMLFormat[MeasureReportu46Population1] = new DefaultComionkinmrshl7fhir_MeasureReportu46Population1Format {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportStatusu45listFormat: scalaxb.XMLFormat[MeasureReportStatusu45list] = new DefaultComionkinmrshl7fhir_MeasureReportStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportStatusFormat: scalaxb.XMLFormat[MeasureReportStatus] = new DefaultComionkinmrshl7fhir_MeasureReportStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportTypeu45listFormat: scalaxb.XMLFormat[MeasureReportTypeu45list] = new DefaultComionkinmrshl7fhir_MeasureReportTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MeasureReportTypeFormat: scalaxb.XMLFormat[MeasureReportType] = new DefaultComionkinmrshl7fhir_MeasureReportTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MediaTypeFormat: scalaxb.XMLFormat[MediaType] = new DefaultComionkinmrshl7fhir_MediaTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_DigitalMediaTypeu45listFormat: scalaxb.XMLFormat[DigitalMediaTypeu45list] = new DefaultComionkinmrshl7fhir_DigitalMediaTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_DigitalMediaTypeFormat: scalaxb.XMLFormat[DigitalMediaType] = new DefaultComionkinmrshl7fhir_DigitalMediaTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationTypeFormat: scalaxb.XMLFormat[MedicationType] = new DefaultComionkinmrshl7fhir_MedicationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Medicationu46IngredientFormat: scalaxb.XMLFormat[Medicationu46Ingredient] = new DefaultComionkinmrshl7fhir_Medicationu46IngredientFormat {}
  implicit lazy val Comionkinmrshl7fhir_Medicationu46PackageFormat: scalaxb.XMLFormat[Medicationu46Package] = new DefaultComionkinmrshl7fhir_Medicationu46PackageFormat {}
  implicit lazy val Comionkinmrshl7fhir_Medicationu46ContentFormat: scalaxb.XMLFormat[Medicationu46Content] = new DefaultComionkinmrshl7fhir_Medicationu46ContentFormat {}
  implicit lazy val Comionkinmrshl7fhir_Medicationu46BatchFormat: scalaxb.XMLFormat[Medicationu46Batch] = new DefaultComionkinmrshl7fhir_Medicationu46BatchFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatusu45listFormat: scalaxb.XMLFormat[MedicationStatusu45list] = new DefaultComionkinmrshl7fhir_MedicationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatusFormat: scalaxb.XMLFormat[MedicationStatus] = new DefaultComionkinmrshl7fhir_MedicationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationAdministrationTypeFormat: scalaxb.XMLFormat[MedicationAdministrationType] = new DefaultComionkinmrshl7fhir_MedicationAdministrationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationAdministrationu46PerformerFormat: scalaxb.XMLFormat[MedicationAdministrationu46Performer] = new DefaultComionkinmrshl7fhir_MedicationAdministrationu46PerformerFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationAdministrationu46DosageFormat: scalaxb.XMLFormat[MedicationAdministrationu46Dosage] = new DefaultComionkinmrshl7fhir_MedicationAdministrationu46DosageFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationAdministrationStatusu45listFormat: scalaxb.XMLFormat[MedicationAdministrationStatusu45list] = new DefaultComionkinmrshl7fhir_MedicationAdministrationStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationAdministrationStatusFormat: scalaxb.XMLFormat[MedicationAdministrationStatus] = new DefaultComionkinmrshl7fhir_MedicationAdministrationStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationDispenseTypeFormat: scalaxb.XMLFormat[MedicationDispenseType] = new DefaultComionkinmrshl7fhir_MedicationDispenseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationDispenseu46PerformerFormat: scalaxb.XMLFormat[MedicationDispenseu46Performer] = new DefaultComionkinmrshl7fhir_MedicationDispenseu46PerformerFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationDispenseu46SubstitutionFormat: scalaxb.XMLFormat[MedicationDispenseu46Substitution] = new DefaultComionkinmrshl7fhir_MedicationDispenseu46SubstitutionFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationDispenseStatusu45listFormat: scalaxb.XMLFormat[MedicationDispenseStatusu45list] = new DefaultComionkinmrshl7fhir_MedicationDispenseStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationDispenseStatusFormat: scalaxb.XMLFormat[MedicationDispenseStatus] = new DefaultComionkinmrshl7fhir_MedicationDispenseStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestTypeFormat: scalaxb.XMLFormat[MedicationRequestType] = new DefaultComionkinmrshl7fhir_MedicationRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestu46RequesterFormat: scalaxb.XMLFormat[MedicationRequestu46Requester] = new DefaultComionkinmrshl7fhir_MedicationRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestu46DispenseRequestFormat: scalaxb.XMLFormat[MedicationRequestu46DispenseRequest] = new DefaultComionkinmrshl7fhir_MedicationRequestu46DispenseRequestFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestu46SubstitutionFormat: scalaxb.XMLFormat[MedicationRequestu46Substitution] = new DefaultComionkinmrshl7fhir_MedicationRequestu46SubstitutionFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestStatusu45listFormat: scalaxb.XMLFormat[MedicationRequestStatusu45list] = new DefaultComionkinmrshl7fhir_MedicationRequestStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestStatusFormat: scalaxb.XMLFormat[MedicationRequestStatus] = new DefaultComionkinmrshl7fhir_MedicationRequestStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestPriorityu45listFormat: scalaxb.XMLFormat[MedicationRequestPriorityu45list] = new DefaultComionkinmrshl7fhir_MedicationRequestPriorityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestPriorityFormat: scalaxb.XMLFormat[MedicationRequestPriority] = new DefaultComionkinmrshl7fhir_MedicationRequestPriorityFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestIntentu45listFormat: scalaxb.XMLFormat[MedicationRequestIntentu45list] = new DefaultComionkinmrshl7fhir_MedicationRequestIntentu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationRequestIntentFormat: scalaxb.XMLFormat[MedicationRequestIntent] = new DefaultComionkinmrshl7fhir_MedicationRequestIntentFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatementTypeFormat: scalaxb.XMLFormat[MedicationStatementType] = new DefaultComionkinmrshl7fhir_MedicationStatementTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatementStatusu45listFormat: scalaxb.XMLFormat[MedicationStatementStatusu45list] = new DefaultComionkinmrshl7fhir_MedicationStatementStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatementStatusFormat: scalaxb.XMLFormat[MedicationStatementStatus] = new DefaultComionkinmrshl7fhir_MedicationStatementStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatementTakenu45listFormat: scalaxb.XMLFormat[MedicationStatementTakenu45list] = new DefaultComionkinmrshl7fhir_MedicationStatementTakenu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_MedicationStatementTakenFormat: scalaxb.XMLFormat[MedicationStatementTaken] = new DefaultComionkinmrshl7fhir_MedicationStatementTakenFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageDefinitionTypeFormat: scalaxb.XMLFormat[MessageDefinitionType] = new DefaultComionkinmrshl7fhir_MessageDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageDefinitionu46FocusFormat: scalaxb.XMLFormat[MessageDefinitionu46Focus] = new DefaultComionkinmrshl7fhir_MessageDefinitionu46FocusFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageDefinitionu46AllowedResponseFormat: scalaxb.XMLFormat[MessageDefinitionu46AllowedResponse] = new DefaultComionkinmrshl7fhir_MessageDefinitionu46AllowedResponseFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageHeaderTypeFormat: scalaxb.XMLFormat[MessageHeaderType] = new DefaultComionkinmrshl7fhir_MessageHeaderTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageHeaderu46DestinationFormat: scalaxb.XMLFormat[MessageHeaderu46Destination] = new DefaultComionkinmrshl7fhir_MessageHeaderu46DestinationFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageHeaderu46SourceFormat: scalaxb.XMLFormat[MessageHeaderu46Source] = new DefaultComionkinmrshl7fhir_MessageHeaderu46SourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_MessageHeaderu46ResponseFormat: scalaxb.XMLFormat[MessageHeaderu46Response] = new DefaultComionkinmrshl7fhir_MessageHeaderu46ResponseFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResponseTypeu45listFormat: scalaxb.XMLFormat[ResponseTypeu45list] = new DefaultComionkinmrshl7fhir_ResponseTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResponseTypeFormat: scalaxb.XMLFormat[ResponseType] = new DefaultComionkinmrshl7fhir_ResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemType2Format: scalaxb.XMLFormat[NamingSystemType2] = new DefaultComionkinmrshl7fhir_NamingSystemType2Format {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemu46UniqueIdFormat: scalaxb.XMLFormat[NamingSystemu46UniqueId] = new DefaultComionkinmrshl7fhir_NamingSystemu46UniqueIdFormat {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemIdentifierTypeu45listFormat: scalaxb.XMLFormat[NamingSystemIdentifierTypeu45list] = new DefaultComionkinmrshl7fhir_NamingSystemIdentifierTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemIdentifierTypeFormat: scalaxb.XMLFormat[NamingSystemIdentifierType] = new DefaultComionkinmrshl7fhir_NamingSystemIdentifierTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemTypeu45listFormat: scalaxb.XMLFormat[NamingSystemTypeu45list] = new DefaultComionkinmrshl7fhir_NamingSystemTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NamingSystemTypeFormat: scalaxb.XMLFormat[NamingSystemType] = new DefaultComionkinmrshl7fhir_NamingSystemTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderTypeFormat: scalaxb.XMLFormat[NutritionOrderType] = new DefaultComionkinmrshl7fhir_NutritionOrderTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46OralDietFormat: scalaxb.XMLFormat[NutritionOrderu46OralDiet] = new DefaultComionkinmrshl7fhir_NutritionOrderu46OralDietFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46NutrientFormat: scalaxb.XMLFormat[NutritionOrderu46Nutrient] = new DefaultComionkinmrshl7fhir_NutritionOrderu46NutrientFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46TextureFormat: scalaxb.XMLFormat[NutritionOrderu46Texture] = new DefaultComionkinmrshl7fhir_NutritionOrderu46TextureFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46SupplementFormat: scalaxb.XMLFormat[NutritionOrderu46Supplement] = new DefaultComionkinmrshl7fhir_NutritionOrderu46SupplementFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46EnteralFormulaFormat: scalaxb.XMLFormat[NutritionOrderu46EnteralFormula] = new DefaultComionkinmrshl7fhir_NutritionOrderu46EnteralFormulaFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderu46AdministrationFormat: scalaxb.XMLFormat[NutritionOrderu46Administration] = new DefaultComionkinmrshl7fhir_NutritionOrderu46AdministrationFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderStatusu45listFormat: scalaxb.XMLFormat[NutritionOrderStatusu45list] = new DefaultComionkinmrshl7fhir_NutritionOrderStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_NutritionOrderStatusFormat: scalaxb.XMLFormat[NutritionOrderStatus] = new DefaultComionkinmrshl7fhir_NutritionOrderStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ObservationTypeFormat: scalaxb.XMLFormat[ObservationType] = new DefaultComionkinmrshl7fhir_ObservationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Observationu46ReferenceRangeFormat: scalaxb.XMLFormat[Observationu46ReferenceRange] = new DefaultComionkinmrshl7fhir_Observationu46ReferenceRangeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Observationu46RelatedFormat: scalaxb.XMLFormat[Observationu46Related] = new DefaultComionkinmrshl7fhir_Observationu46RelatedFormat {}
  implicit lazy val Comionkinmrshl7fhir_Observationu46ComponentFormat: scalaxb.XMLFormat[Observationu46Component] = new DefaultComionkinmrshl7fhir_Observationu46ComponentFormat {}
  implicit lazy val Comionkinmrshl7fhir_ObservationRelationshipTypeu45listFormat: scalaxb.XMLFormat[ObservationRelationshipTypeu45list] = new DefaultComionkinmrshl7fhir_ObservationRelationshipTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ObservationRelationshipTypeFormat: scalaxb.XMLFormat[ObservationRelationshipType] = new DefaultComionkinmrshl7fhir_ObservationRelationshipTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationDefinitionTypeFormat: scalaxb.XMLFormat[OperationDefinitionType] = new DefaultComionkinmrshl7fhir_OperationDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationDefinitionu46ParameterFormat: scalaxb.XMLFormat[OperationDefinitionu46Parameter] = new DefaultComionkinmrshl7fhir_OperationDefinitionu46ParameterFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationDefinitionu46BindingFormat: scalaxb.XMLFormat[OperationDefinitionu46Binding] = new DefaultComionkinmrshl7fhir_OperationDefinitionu46BindingFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationDefinitionu46OverloadFormat: scalaxb.XMLFormat[OperationDefinitionu46Overload] = new DefaultComionkinmrshl7fhir_OperationDefinitionu46OverloadFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRAllTypesu45listFormat: scalaxb.XMLFormat[FHIRAllTypesu45list] = new DefaultComionkinmrshl7fhir_FHIRAllTypesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRAllTypesFormat: scalaxb.XMLFormat[FHIRAllTypes] = new DefaultComionkinmrshl7fhir_FHIRAllTypesFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationParameterUseu45listFormat: scalaxb.XMLFormat[OperationParameterUseu45list] = new DefaultComionkinmrshl7fhir_OperationParameterUseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationParameterUseFormat: scalaxb.XMLFormat[OperationParameterUse] = new DefaultComionkinmrshl7fhir_OperationParameterUseFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationKindu45listFormat: scalaxb.XMLFormat[OperationKindu45list] = new DefaultComionkinmrshl7fhir_OperationKindu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationKindFormat: scalaxb.XMLFormat[OperationKind] = new DefaultComionkinmrshl7fhir_OperationKindFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationOutcomeTypeFormat: scalaxb.XMLFormat[OperationOutcomeType] = new DefaultComionkinmrshl7fhir_OperationOutcomeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_OperationOutcomeu46IssueFormat: scalaxb.XMLFormat[OperationOutcomeu46Issue] = new DefaultComionkinmrshl7fhir_OperationOutcomeu46IssueFormat {}
  implicit lazy val Comionkinmrshl7fhir_IssueTypeu45listFormat: scalaxb.XMLFormat[IssueTypeu45list] = new DefaultComionkinmrshl7fhir_IssueTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_IssueTypeFormat: scalaxb.XMLFormat[IssueType] = new DefaultComionkinmrshl7fhir_IssueTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_IssueSeverityu45listFormat: scalaxb.XMLFormat[IssueSeverityu45list] = new DefaultComionkinmrshl7fhir_IssueSeverityu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_IssueSeverityFormat: scalaxb.XMLFormat[IssueSeverity] = new DefaultComionkinmrshl7fhir_IssueSeverityFormat {}
  implicit lazy val Comionkinmrshl7fhir_OrganizationTypeFormat: scalaxb.XMLFormat[OrganizationType] = new DefaultComionkinmrshl7fhir_OrganizationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Organizationu46ContactFormat: scalaxb.XMLFormat[Organizationu46Contact] = new DefaultComionkinmrshl7fhir_Organizationu46ContactFormat {}
  implicit lazy val Comionkinmrshl7fhir_ParametersTypeFormat: scalaxb.XMLFormat[ParametersType] = new DefaultComionkinmrshl7fhir_ParametersTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Parametersu46ParameterFormat: scalaxb.XMLFormat[Parametersu46Parameter] = new DefaultComionkinmrshl7fhir_Parametersu46ParameterFormat {}
  implicit lazy val Comionkinmrshl7fhir_PatientTypeFormat: scalaxb.XMLFormat[PatientType] = new DefaultComionkinmrshl7fhir_PatientTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Patientu46ContactFormat: scalaxb.XMLFormat[Patientu46Contact] = new DefaultComionkinmrshl7fhir_Patientu46ContactFormat {}
  implicit lazy val Comionkinmrshl7fhir_Patientu46AnimalFormat: scalaxb.XMLFormat[Patientu46Animal] = new DefaultComionkinmrshl7fhir_Patientu46AnimalFormat {}
  implicit lazy val Comionkinmrshl7fhir_Patientu46CommunicationFormat: scalaxb.XMLFormat[Patientu46Communication] = new DefaultComionkinmrshl7fhir_Patientu46CommunicationFormat {}
  implicit lazy val Comionkinmrshl7fhir_Patientu46LinkFormat: scalaxb.XMLFormat[Patientu46Link] = new DefaultComionkinmrshl7fhir_Patientu46LinkFormat {}
  implicit lazy val Comionkinmrshl7fhir_LinkTypeu45listFormat: scalaxb.XMLFormat[LinkTypeu45list] = new DefaultComionkinmrshl7fhir_LinkTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_LinkTypeFormat: scalaxb.XMLFormat[LinkType] = new DefaultComionkinmrshl7fhir_LinkTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PaymentNoticeTypeFormat: scalaxb.XMLFormat[PaymentNoticeType] = new DefaultComionkinmrshl7fhir_PaymentNoticeTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PaymentReconciliationTypeFormat: scalaxb.XMLFormat[PaymentReconciliationType] = new DefaultComionkinmrshl7fhir_PaymentReconciliationTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PaymentReconciliationu46DetailFormat: scalaxb.XMLFormat[PaymentReconciliationu46Detail] = new DefaultComionkinmrshl7fhir_PaymentReconciliationu46DetailFormat {}
  implicit lazy val Comionkinmrshl7fhir_PaymentReconciliationu46ProcessNoteFormat: scalaxb.XMLFormat[PaymentReconciliationu46ProcessNote] = new DefaultComionkinmrshl7fhir_PaymentReconciliationu46ProcessNoteFormat {}
  implicit lazy val Comionkinmrshl7fhir_PersonTypeFormat: scalaxb.XMLFormat[PersonType] = new DefaultComionkinmrshl7fhir_PersonTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Personu46LinkFormat: scalaxb.XMLFormat[Personu46Link] = new DefaultComionkinmrshl7fhir_Personu46LinkFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdentityAssuranceLevelu45listFormat: scalaxb.XMLFormat[IdentityAssuranceLevelu45list] = new DefaultComionkinmrshl7fhir_IdentityAssuranceLevelu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_IdentityAssuranceLevelFormat: scalaxb.XMLFormat[IdentityAssuranceLevel] = new DefaultComionkinmrshl7fhir_IdentityAssuranceLevelFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionTypeFormat: scalaxb.XMLFormat[PlanDefinitionType] = new DefaultComionkinmrshl7fhir_PlanDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46GoalFormat: scalaxb.XMLFormat[PlanDefinitionu46Goal] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46GoalFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46TargetFormat: scalaxb.XMLFormat[PlanDefinitionu46Target] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46TargetFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46ActionFormat: scalaxb.XMLFormat[PlanDefinitionu46Action] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46ActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46ConditionFormat: scalaxb.XMLFormat[PlanDefinitionu46Condition] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46ConditionFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46RelatedActionFormat: scalaxb.XMLFormat[PlanDefinitionu46RelatedAction] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46RelatedActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46ParticipantFormat: scalaxb.XMLFormat[PlanDefinitionu46Participant] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_PlanDefinitionu46DynamicValueFormat: scalaxb.XMLFormat[PlanDefinitionu46DynamicValue] = new DefaultComionkinmrshl7fhir_PlanDefinitionu46DynamicValueFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionRequiredBehavioru45listFormat: scalaxb.XMLFormat[ActionRequiredBehavioru45list] = new DefaultComionkinmrshl7fhir_ActionRequiredBehavioru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionRequiredBehaviorFormat: scalaxb.XMLFormat[ActionRequiredBehavior] = new DefaultComionkinmrshl7fhir_ActionRequiredBehaviorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionRelationshipTypeu45listFormat: scalaxb.XMLFormat[ActionRelationshipTypeu45list] = new DefaultComionkinmrshl7fhir_ActionRelationshipTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionRelationshipTypeFormat: scalaxb.XMLFormat[ActionRelationshipType] = new DefaultComionkinmrshl7fhir_ActionRelationshipTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionGroupingBehavioru45listFormat: scalaxb.XMLFormat[ActionGroupingBehavioru45list] = new DefaultComionkinmrshl7fhir_ActionGroupingBehavioru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionGroupingBehaviorFormat: scalaxb.XMLFormat[ActionGroupingBehavior] = new DefaultComionkinmrshl7fhir_ActionGroupingBehaviorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionSelectionBehavioru45listFormat: scalaxb.XMLFormat[ActionSelectionBehavioru45list] = new DefaultComionkinmrshl7fhir_ActionSelectionBehavioru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionSelectionBehaviorFormat: scalaxb.XMLFormat[ActionSelectionBehavior] = new DefaultComionkinmrshl7fhir_ActionSelectionBehaviorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionCardinalityBehavioru45listFormat: scalaxb.XMLFormat[ActionCardinalityBehavioru45list] = new DefaultComionkinmrshl7fhir_ActionCardinalityBehavioru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionCardinalityBehaviorFormat: scalaxb.XMLFormat[ActionCardinalityBehavior] = new DefaultComionkinmrshl7fhir_ActionCardinalityBehaviorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionPrecheckBehavioru45listFormat: scalaxb.XMLFormat[ActionPrecheckBehavioru45list] = new DefaultComionkinmrshl7fhir_ActionPrecheckBehavioru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionPrecheckBehaviorFormat: scalaxb.XMLFormat[ActionPrecheckBehavior] = new DefaultComionkinmrshl7fhir_ActionPrecheckBehaviorFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionConditionKindu45listFormat: scalaxb.XMLFormat[ActionConditionKindu45list] = new DefaultComionkinmrshl7fhir_ActionConditionKindu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionConditionKindFormat: scalaxb.XMLFormat[ActionConditionKind] = new DefaultComionkinmrshl7fhir_ActionConditionKindFormat {}
  implicit lazy val Comionkinmrshl7fhir_PractitionerTypeFormat: scalaxb.XMLFormat[PractitionerType] = new DefaultComionkinmrshl7fhir_PractitionerTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Practitioneru46QualificationFormat: scalaxb.XMLFormat[Practitioneru46Qualification] = new DefaultComionkinmrshl7fhir_Practitioneru46QualificationFormat {}
  implicit lazy val Comionkinmrshl7fhir_PractitionerRoleTypeFormat: scalaxb.XMLFormat[PractitionerRoleType] = new DefaultComionkinmrshl7fhir_PractitionerRoleTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PractitionerRoleu46AvailableTimeFormat: scalaxb.XMLFormat[PractitionerRoleu46AvailableTime] = new DefaultComionkinmrshl7fhir_PractitionerRoleu46AvailableTimeFormat {}
  implicit lazy val Comionkinmrshl7fhir_PractitionerRoleu46NotAvailableFormat: scalaxb.XMLFormat[PractitionerRoleu46NotAvailable] = new DefaultComionkinmrshl7fhir_PractitionerRoleu46NotAvailableFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcedureTypeFormat: scalaxb.XMLFormat[ProcedureType] = new DefaultComionkinmrshl7fhir_ProcedureTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Procedureu46PerformerFormat: scalaxb.XMLFormat[Procedureu46Performer] = new DefaultComionkinmrshl7fhir_Procedureu46PerformerFormat {}
  implicit lazy val Comionkinmrshl7fhir_Procedureu46FocalDeviceFormat: scalaxb.XMLFormat[Procedureu46FocalDevice] = new DefaultComionkinmrshl7fhir_Procedureu46FocalDeviceFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcedureRequestTypeFormat: scalaxb.XMLFormat[ProcedureRequestType] = new DefaultComionkinmrshl7fhir_ProcedureRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcedureRequestu46RequesterFormat: scalaxb.XMLFormat[ProcedureRequestu46Requester] = new DefaultComionkinmrshl7fhir_ProcedureRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestIntentu45listFormat: scalaxb.XMLFormat[RequestIntentu45list] = new DefaultComionkinmrshl7fhir_RequestIntentu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestIntentFormat: scalaxb.XMLFormat[RequestIntent] = new DefaultComionkinmrshl7fhir_RequestIntentFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcessRequestTypeFormat: scalaxb.XMLFormat[ProcessRequestType] = new DefaultComionkinmrshl7fhir_ProcessRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcessRequestu46ItemFormat: scalaxb.XMLFormat[ProcessRequestu46Item] = new DefaultComionkinmrshl7fhir_ProcessRequestu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionListu45listFormat: scalaxb.XMLFormat[ActionListu45list] = new DefaultComionkinmrshl7fhir_ActionListu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ActionListFormat: scalaxb.XMLFormat[ActionList] = new DefaultComionkinmrshl7fhir_ActionListFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcessResponseTypeFormat: scalaxb.XMLFormat[ProcessResponseType] = new DefaultComionkinmrshl7fhir_ProcessResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProcessResponseu46ProcessNoteFormat: scalaxb.XMLFormat[ProcessResponseu46ProcessNote] = new DefaultComionkinmrshl7fhir_ProcessResponseu46ProcessNoteFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProvenanceTypeFormat: scalaxb.XMLFormat[ProvenanceType] = new DefaultComionkinmrshl7fhir_ProvenanceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Provenanceu46AgentFormat: scalaxb.XMLFormat[Provenanceu46Agent] = new DefaultComionkinmrshl7fhir_Provenanceu46AgentFormat {}
  implicit lazy val Comionkinmrshl7fhir_Provenanceu46EntityFormat: scalaxb.XMLFormat[Provenanceu46Entity] = new DefaultComionkinmrshl7fhir_Provenanceu46EntityFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProvenanceEntityRoleu45listFormat: scalaxb.XMLFormat[ProvenanceEntityRoleu45list] = new DefaultComionkinmrshl7fhir_ProvenanceEntityRoleu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ProvenanceEntityRoleFormat: scalaxb.XMLFormat[ProvenanceEntityRole] = new DefaultComionkinmrshl7fhir_ProvenanceEntityRoleFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireTypeFormat: scalaxb.XMLFormat[QuestionnaireType] = new DefaultComionkinmrshl7fhir_QuestionnaireTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Questionnaireu46ItemFormat: scalaxb.XMLFormat[Questionnaireu46Item] = new DefaultComionkinmrshl7fhir_Questionnaireu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_Questionnaireu46EnableWhenFormat: scalaxb.XMLFormat[Questionnaireu46EnableWhen] = new DefaultComionkinmrshl7fhir_Questionnaireu46EnableWhenFormat {}
  implicit lazy val Comionkinmrshl7fhir_Questionnaireu46OptionFormat: scalaxb.XMLFormat[Questionnaireu46Option] = new DefaultComionkinmrshl7fhir_Questionnaireu46OptionFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireItemTypeu45listFormat: scalaxb.XMLFormat[QuestionnaireItemTypeu45list] = new DefaultComionkinmrshl7fhir_QuestionnaireItemTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireItemTypeFormat: scalaxb.XMLFormat[QuestionnaireItemType] = new DefaultComionkinmrshl7fhir_QuestionnaireItemTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireResponseTypeFormat: scalaxb.XMLFormat[QuestionnaireResponseType] = new DefaultComionkinmrshl7fhir_QuestionnaireResponseTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireResponseu46ItemFormat: scalaxb.XMLFormat[QuestionnaireResponseu46Item] = new DefaultComionkinmrshl7fhir_QuestionnaireResponseu46ItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireResponseu46AnswerFormat: scalaxb.XMLFormat[QuestionnaireResponseu46Answer] = new DefaultComionkinmrshl7fhir_QuestionnaireResponseu46AnswerFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireResponseStatusu45listFormat: scalaxb.XMLFormat[QuestionnaireResponseStatusu45list] = new DefaultComionkinmrshl7fhir_QuestionnaireResponseStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_QuestionnaireResponseStatusFormat: scalaxb.XMLFormat[QuestionnaireResponseStatus] = new DefaultComionkinmrshl7fhir_QuestionnaireResponseStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferralRequestTypeFormat: scalaxb.XMLFormat[ReferralRequestType] = new DefaultComionkinmrshl7fhir_ReferralRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ReferralRequestu46RequesterFormat: scalaxb.XMLFormat[ReferralRequestu46Requester] = new DefaultComionkinmrshl7fhir_ReferralRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_RelatedPersonTypeFormat: scalaxb.XMLFormat[RelatedPersonType] = new DefaultComionkinmrshl7fhir_RelatedPersonTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestGroupTypeFormat: scalaxb.XMLFormat[RequestGroupType] = new DefaultComionkinmrshl7fhir_RequestGroupTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestGroupu46ActionFormat: scalaxb.XMLFormat[RequestGroupu46Action] = new DefaultComionkinmrshl7fhir_RequestGroupu46ActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestGroupu46ConditionFormat: scalaxb.XMLFormat[RequestGroupu46Condition] = new DefaultComionkinmrshl7fhir_RequestGroupu46ConditionFormat {}
  implicit lazy val Comionkinmrshl7fhir_RequestGroupu46RelatedActionFormat: scalaxb.XMLFormat[RequestGroupu46RelatedAction] = new DefaultComionkinmrshl7fhir_RequestGroupu46RelatedActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchStudyTypeFormat: scalaxb.XMLFormat[ResearchStudyType] = new DefaultComionkinmrshl7fhir_ResearchStudyTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchStudyu46ArmFormat: scalaxb.XMLFormat[ResearchStudyu46Arm] = new DefaultComionkinmrshl7fhir_ResearchStudyu46ArmFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchStudyStatusu45listFormat: scalaxb.XMLFormat[ResearchStudyStatusu45list] = new DefaultComionkinmrshl7fhir_ResearchStudyStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchStudyStatusFormat: scalaxb.XMLFormat[ResearchStudyStatus] = new DefaultComionkinmrshl7fhir_ResearchStudyStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchSubjectTypeFormat: scalaxb.XMLFormat[ResearchSubjectType] = new DefaultComionkinmrshl7fhir_ResearchSubjectTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchSubjectStatusu45listFormat: scalaxb.XMLFormat[ResearchSubjectStatusu45list] = new DefaultComionkinmrshl7fhir_ResearchSubjectStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ResearchSubjectStatusFormat: scalaxb.XMLFormat[ResearchSubjectStatus] = new DefaultComionkinmrshl7fhir_ResearchSubjectStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_RiskAssessmentTypeFormat: scalaxb.XMLFormat[RiskAssessmentType] = new DefaultComionkinmrshl7fhir_RiskAssessmentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_RiskAssessmentu46PredictionFormat: scalaxb.XMLFormat[RiskAssessmentu46Prediction] = new DefaultComionkinmrshl7fhir_RiskAssessmentu46PredictionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ScheduleTypeFormat: scalaxb.XMLFormat[ScheduleType] = new DefaultComionkinmrshl7fhir_ScheduleTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchParameterTypeFormat: scalaxb.XMLFormat[SearchParameterType] = new DefaultComionkinmrshl7fhir_SearchParameterTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchParameteru46ComponentFormat: scalaxb.XMLFormat[SearchParameteru46Component] = new DefaultComionkinmrshl7fhir_SearchParameteru46ComponentFormat {}
  implicit lazy val Comionkinmrshl7fhir_XPathUsageTypeu45listFormat: scalaxb.XMLFormat[XPathUsageTypeu45list] = new DefaultComionkinmrshl7fhir_XPathUsageTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_XPathUsageTypeFormat: scalaxb.XMLFormat[XPathUsageType] = new DefaultComionkinmrshl7fhir_XPathUsageTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchModifierCodeu45listFormat: scalaxb.XMLFormat[SearchModifierCodeu45list] = new DefaultComionkinmrshl7fhir_SearchModifierCodeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchModifierCodeFormat: scalaxb.XMLFormat[SearchModifierCode] = new DefaultComionkinmrshl7fhir_SearchModifierCodeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchComparatoru45listFormat: scalaxb.XMLFormat[SearchComparatoru45list] = new DefaultComionkinmrshl7fhir_SearchComparatoru45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SearchComparatorFormat: scalaxb.XMLFormat[SearchComparator] = new DefaultComionkinmrshl7fhir_SearchComparatorFormat {}
  implicit lazy val Comionkinmrshl7fhir_SequenceTypeFormat: scalaxb.XMLFormat[SequenceType] = new DefaultComionkinmrshl7fhir_SequenceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Sequenceu46ReferenceSeqFormat: scalaxb.XMLFormat[Sequenceu46ReferenceSeq] = new DefaultComionkinmrshl7fhir_Sequenceu46ReferenceSeqFormat {}
  implicit lazy val Comionkinmrshl7fhir_Sequenceu46VariantFormat: scalaxb.XMLFormat[Sequenceu46Variant] = new DefaultComionkinmrshl7fhir_Sequenceu46VariantFormat {}
  implicit lazy val Comionkinmrshl7fhir_Sequenceu46QualityFormat: scalaxb.XMLFormat[Sequenceu46Quality] = new DefaultComionkinmrshl7fhir_Sequenceu46QualityFormat {}
  implicit lazy val Comionkinmrshl7fhir_Sequenceu46RepositoryFormat: scalaxb.XMLFormat[Sequenceu46Repository] = new DefaultComionkinmrshl7fhir_Sequenceu46RepositoryFormat {}
  implicit lazy val Comionkinmrshl7fhir_RepositoryTypeu45listFormat: scalaxb.XMLFormat[RepositoryTypeu45list] = new DefaultComionkinmrshl7fhir_RepositoryTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_RepositoryTypeFormat: scalaxb.XMLFormat[RepositoryType] = new DefaultComionkinmrshl7fhir_RepositoryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_QualityTypeu45listFormat: scalaxb.XMLFormat[QualityTypeu45list] = new DefaultComionkinmrshl7fhir_QualityTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_QualityTypeFormat: scalaxb.XMLFormat[QualityType] = new DefaultComionkinmrshl7fhir_QualityTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ServiceDefinitionTypeFormat: scalaxb.XMLFormat[ServiceDefinitionType] = new DefaultComionkinmrshl7fhir_ServiceDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SlotTypeFormat: scalaxb.XMLFormat[SlotType] = new DefaultComionkinmrshl7fhir_SlotTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SlotStatusu45listFormat: scalaxb.XMLFormat[SlotStatusu45list] = new DefaultComionkinmrshl7fhir_SlotStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SlotStatusFormat: scalaxb.XMLFormat[SlotStatus] = new DefaultComionkinmrshl7fhir_SlotStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_SpecimenTypeFormat: scalaxb.XMLFormat[SpecimenType] = new DefaultComionkinmrshl7fhir_SpecimenTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Specimenu46CollectionFormat: scalaxb.XMLFormat[Specimenu46Collection] = new DefaultComionkinmrshl7fhir_Specimenu46CollectionFormat {}
  implicit lazy val Comionkinmrshl7fhir_Specimenu46ProcessingFormat: scalaxb.XMLFormat[Specimenu46Processing] = new DefaultComionkinmrshl7fhir_Specimenu46ProcessingFormat {}
  implicit lazy val Comionkinmrshl7fhir_Specimenu46ContainerFormat: scalaxb.XMLFormat[Specimenu46Container] = new DefaultComionkinmrshl7fhir_Specimenu46ContainerFormat {}
  implicit lazy val Comionkinmrshl7fhir_SpecimenStatusu45listFormat: scalaxb.XMLFormat[SpecimenStatusu45list] = new DefaultComionkinmrshl7fhir_SpecimenStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SpecimenStatusFormat: scalaxb.XMLFormat[SpecimenStatus] = new DefaultComionkinmrshl7fhir_SpecimenStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionTypeFormat: scalaxb.XMLFormat[StructureDefinitionType] = new DefaultComionkinmrshl7fhir_StructureDefinitionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionu46MappingFormat: scalaxb.XMLFormat[StructureDefinitionu46Mapping] = new DefaultComionkinmrshl7fhir_StructureDefinitionu46MappingFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionu46SnapshotFormat: scalaxb.XMLFormat[StructureDefinitionu46Snapshot] = new DefaultComionkinmrshl7fhir_StructureDefinitionu46SnapshotFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionu46DifferentialFormat: scalaxb.XMLFormat[StructureDefinitionu46Differential] = new DefaultComionkinmrshl7fhir_StructureDefinitionu46DifferentialFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionKindu45listFormat: scalaxb.XMLFormat[StructureDefinitionKindu45list] = new DefaultComionkinmrshl7fhir_StructureDefinitionKindu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureDefinitionKindFormat: scalaxb.XMLFormat[StructureDefinitionKind] = new DefaultComionkinmrshl7fhir_StructureDefinitionKindFormat {}
  implicit lazy val Comionkinmrshl7fhir_TypeDerivationRuleu45listFormat: scalaxb.XMLFormat[TypeDerivationRuleu45list] = new DefaultComionkinmrshl7fhir_TypeDerivationRuleu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TypeDerivationRuleFormat: scalaxb.XMLFormat[TypeDerivationRule] = new DefaultComionkinmrshl7fhir_TypeDerivationRuleFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExtensionContextu45listFormat: scalaxb.XMLFormat[ExtensionContextu45list] = new DefaultComionkinmrshl7fhir_ExtensionContextu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ExtensionContextFormat: scalaxb.XMLFormat[ExtensionContext] = new DefaultComionkinmrshl7fhir_ExtensionContextFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapTypeFormat: scalaxb.XMLFormat[StructureMapType] = new DefaultComionkinmrshl7fhir_StructureMapTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46StructureFormat: scalaxb.XMLFormat[StructureMapu46Structure] = new DefaultComionkinmrshl7fhir_StructureMapu46StructureFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46GroupFormat: scalaxb.XMLFormat[StructureMapu46Group] = new DefaultComionkinmrshl7fhir_StructureMapu46GroupFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46InputFormat: scalaxb.XMLFormat[StructureMapu46Input] = new DefaultComionkinmrshl7fhir_StructureMapu46InputFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46RuleFormat: scalaxb.XMLFormat[StructureMapu46Rule] = new DefaultComionkinmrshl7fhir_StructureMapu46RuleFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46SourceFormat: scalaxb.XMLFormat[StructureMapu46Source] = new DefaultComionkinmrshl7fhir_StructureMapu46SourceFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46TargetFormat: scalaxb.XMLFormat[StructureMapu46Target] = new DefaultComionkinmrshl7fhir_StructureMapu46TargetFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46ParameterFormat: scalaxb.XMLFormat[StructureMapu46Parameter] = new DefaultComionkinmrshl7fhir_StructureMapu46ParameterFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapu46DependentFormat: scalaxb.XMLFormat[StructureMapu46Dependent] = new DefaultComionkinmrshl7fhir_StructureMapu46DependentFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapInputModeu45listFormat: scalaxb.XMLFormat[StructureMapInputModeu45list] = new DefaultComionkinmrshl7fhir_StructureMapInputModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapInputModeFormat: scalaxb.XMLFormat[StructureMapInputMode] = new DefaultComionkinmrshl7fhir_StructureMapInputModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapContextTypeu45listFormat: scalaxb.XMLFormat[StructureMapContextTypeu45list] = new DefaultComionkinmrshl7fhir_StructureMapContextTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapContextTypeFormat: scalaxb.XMLFormat[StructureMapContextType] = new DefaultComionkinmrshl7fhir_StructureMapContextTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapTargetListModeu45listFormat: scalaxb.XMLFormat[StructureMapTargetListModeu45list] = new DefaultComionkinmrshl7fhir_StructureMapTargetListModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapTargetListModeFormat: scalaxb.XMLFormat[StructureMapTargetListMode] = new DefaultComionkinmrshl7fhir_StructureMapTargetListModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapTransformu45listFormat: scalaxb.XMLFormat[StructureMapTransformu45list] = new DefaultComionkinmrshl7fhir_StructureMapTransformu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapTransformFormat: scalaxb.XMLFormat[StructureMapTransform] = new DefaultComionkinmrshl7fhir_StructureMapTransformFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapSourceListModeu45listFormat: scalaxb.XMLFormat[StructureMapSourceListModeu45list] = new DefaultComionkinmrshl7fhir_StructureMapSourceListModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapSourceListModeFormat: scalaxb.XMLFormat[StructureMapSourceListMode] = new DefaultComionkinmrshl7fhir_StructureMapSourceListModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapGroupTypeModeu45listFormat: scalaxb.XMLFormat[StructureMapGroupTypeModeu45list] = new DefaultComionkinmrshl7fhir_StructureMapGroupTypeModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapGroupTypeModeFormat: scalaxb.XMLFormat[StructureMapGroupTypeMode] = new DefaultComionkinmrshl7fhir_StructureMapGroupTypeModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapModelModeu45listFormat: scalaxb.XMLFormat[StructureMapModelModeu45list] = new DefaultComionkinmrshl7fhir_StructureMapModelModeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_StructureMapModelModeFormat: scalaxb.XMLFormat[StructureMapModelMode] = new DefaultComionkinmrshl7fhir_StructureMapModelModeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubscriptionTypeFormat: scalaxb.XMLFormat[SubscriptionType] = new DefaultComionkinmrshl7fhir_SubscriptionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Subscriptionu46ChannelFormat: scalaxb.XMLFormat[Subscriptionu46Channel] = new DefaultComionkinmrshl7fhir_Subscriptionu46ChannelFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubscriptionStatusu45listFormat: scalaxb.XMLFormat[SubscriptionStatusu45list] = new DefaultComionkinmrshl7fhir_SubscriptionStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubscriptionStatusFormat: scalaxb.XMLFormat[SubscriptionStatus] = new DefaultComionkinmrshl7fhir_SubscriptionStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubscriptionChannelTypeu45listFormat: scalaxb.XMLFormat[SubscriptionChannelTypeu45list] = new DefaultComionkinmrshl7fhir_SubscriptionChannelTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubscriptionChannelTypeFormat: scalaxb.XMLFormat[SubscriptionChannelType] = new DefaultComionkinmrshl7fhir_SubscriptionChannelTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SubstanceTypeFormat: scalaxb.XMLFormat[SubstanceType] = new DefaultComionkinmrshl7fhir_SubstanceTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Substanceu46InstanceFormat: scalaxb.XMLFormat[Substanceu46Instance] = new DefaultComionkinmrshl7fhir_Substanceu46InstanceFormat {}
  implicit lazy val Comionkinmrshl7fhir_Substanceu46IngredientFormat: scalaxb.XMLFormat[Substanceu46Ingredient] = new DefaultComionkinmrshl7fhir_Substanceu46IngredientFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRSubstanceStatusu45listFormat: scalaxb.XMLFormat[FHIRSubstanceStatusu45list] = new DefaultComionkinmrshl7fhir_FHIRSubstanceStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRSubstanceStatusFormat: scalaxb.XMLFormat[FHIRSubstanceStatus] = new DefaultComionkinmrshl7fhir_FHIRSubstanceStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyDeliveryTypeFormat: scalaxb.XMLFormat[SupplyDeliveryType] = new DefaultComionkinmrshl7fhir_SupplyDeliveryTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyDeliveryu46SuppliedItemFormat: scalaxb.XMLFormat[SupplyDeliveryu46SuppliedItem] = new DefaultComionkinmrshl7fhir_SupplyDeliveryu46SuppliedItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyDeliveryStatusu45listFormat: scalaxb.XMLFormat[SupplyDeliveryStatusu45list] = new DefaultComionkinmrshl7fhir_SupplyDeliveryStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyDeliveryStatusFormat: scalaxb.XMLFormat[SupplyDeliveryStatus] = new DefaultComionkinmrshl7fhir_SupplyDeliveryStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyRequestTypeFormat: scalaxb.XMLFormat[SupplyRequestType] = new DefaultComionkinmrshl7fhir_SupplyRequestTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyRequestu46OrderedItemFormat: scalaxb.XMLFormat[SupplyRequestu46OrderedItem] = new DefaultComionkinmrshl7fhir_SupplyRequestu46OrderedItemFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyRequestu46RequesterFormat: scalaxb.XMLFormat[SupplyRequestu46Requester] = new DefaultComionkinmrshl7fhir_SupplyRequestu46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyRequestStatusu45listFormat: scalaxb.XMLFormat[SupplyRequestStatusu45list] = new DefaultComionkinmrshl7fhir_SupplyRequestStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_SupplyRequestStatusFormat: scalaxb.XMLFormat[SupplyRequestStatus] = new DefaultComionkinmrshl7fhir_SupplyRequestStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_TaskTypeFormat: scalaxb.XMLFormat[TaskType] = new DefaultComionkinmrshl7fhir_TaskTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_Tasku46RequesterFormat: scalaxb.XMLFormat[Tasku46Requester] = new DefaultComionkinmrshl7fhir_Tasku46RequesterFormat {}
  implicit lazy val Comionkinmrshl7fhir_Tasku46RestrictionFormat: scalaxb.XMLFormat[Tasku46Restriction] = new DefaultComionkinmrshl7fhir_Tasku46RestrictionFormat {}
  implicit lazy val Comionkinmrshl7fhir_Tasku46InputFormat: scalaxb.XMLFormat[Tasku46Input] = new DefaultComionkinmrshl7fhir_Tasku46InputFormat {}
  implicit lazy val Comionkinmrshl7fhir_Tasku46OutputFormat: scalaxb.XMLFormat[Tasku46Output] = new DefaultComionkinmrshl7fhir_Tasku46OutputFormat {}
  implicit lazy val Comionkinmrshl7fhir_TaskStatusu45listFormat: scalaxb.XMLFormat[TaskStatusu45list] = new DefaultComionkinmrshl7fhir_TaskStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TaskStatusFormat: scalaxb.XMLFormat[TaskStatus] = new DefaultComionkinmrshl7fhir_TaskStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportTypeFormat: scalaxb.XMLFormat[TestReportType] = new DefaultComionkinmrshl7fhir_TestReportTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46ParticipantFormat: scalaxb.XMLFormat[TestReportu46Participant] = new DefaultComionkinmrshl7fhir_TestReportu46ParticipantFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46SetupFormat: scalaxb.XMLFormat[TestReportu46Setup] = new DefaultComionkinmrshl7fhir_TestReportu46SetupFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46ActionFormat: scalaxb.XMLFormat[TestReportu46Action] = new DefaultComionkinmrshl7fhir_TestReportu46ActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46OperationFormat: scalaxb.XMLFormat[TestReportu46Operation] = new DefaultComionkinmrshl7fhir_TestReportu46OperationFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46AssertFormat: scalaxb.XMLFormat[TestReportu46Assert] = new DefaultComionkinmrshl7fhir_TestReportu46AssertFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46TestFormat: scalaxb.XMLFormat[TestReportu46Test] = new DefaultComionkinmrshl7fhir_TestReportu46TestFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46Action1Format: scalaxb.XMLFormat[TestReportu46Action1] = new DefaultComionkinmrshl7fhir_TestReportu46Action1Format {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46TeardownFormat: scalaxb.XMLFormat[TestReportu46Teardown] = new DefaultComionkinmrshl7fhir_TestReportu46TeardownFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportu46Action2Format: scalaxb.XMLFormat[TestReportu46Action2] = new DefaultComionkinmrshl7fhir_TestReportu46Action2Format {}
  implicit lazy val Comionkinmrshl7fhir_TestReportStatusu45listFormat: scalaxb.XMLFormat[TestReportStatusu45list] = new DefaultComionkinmrshl7fhir_TestReportStatusu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportStatusFormat: scalaxb.XMLFormat[TestReportStatus] = new DefaultComionkinmrshl7fhir_TestReportStatusFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportActionResultu45listFormat: scalaxb.XMLFormat[TestReportActionResultu45list] = new DefaultComionkinmrshl7fhir_TestReportActionResultu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportActionResultFormat: scalaxb.XMLFormat[TestReportActionResult] = new DefaultComionkinmrshl7fhir_TestReportActionResultFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportParticipantTypeu45listFormat: scalaxb.XMLFormat[TestReportParticipantTypeu45list] = new DefaultComionkinmrshl7fhir_TestReportParticipantTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportParticipantTypeFormat: scalaxb.XMLFormat[TestReportParticipantType] = new DefaultComionkinmrshl7fhir_TestReportParticipantTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportResultu45listFormat: scalaxb.XMLFormat[TestReportResultu45list] = new DefaultComionkinmrshl7fhir_TestReportResultu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestReportResultFormat: scalaxb.XMLFormat[TestReportResult] = new DefaultComionkinmrshl7fhir_TestReportResultFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptTypeFormat: scalaxb.XMLFormat[TestScriptType] = new DefaultComionkinmrshl7fhir_TestScriptTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46OriginFormat: scalaxb.XMLFormat[TestScriptu46Origin] = new DefaultComionkinmrshl7fhir_TestScriptu46OriginFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46DestinationFormat: scalaxb.XMLFormat[TestScriptu46Destination] = new DefaultComionkinmrshl7fhir_TestScriptu46DestinationFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46MetadataFormat: scalaxb.XMLFormat[TestScriptu46Metadata] = new DefaultComionkinmrshl7fhir_TestScriptu46MetadataFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46LinkFormat: scalaxb.XMLFormat[TestScriptu46Link] = new DefaultComionkinmrshl7fhir_TestScriptu46LinkFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46CapabilityFormat: scalaxb.XMLFormat[TestScriptu46Capability] = new DefaultComionkinmrshl7fhir_TestScriptu46CapabilityFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46FixtureFormat: scalaxb.XMLFormat[TestScriptu46Fixture] = new DefaultComionkinmrshl7fhir_TestScriptu46FixtureFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46VariableFormat: scalaxb.XMLFormat[TestScriptu46Variable] = new DefaultComionkinmrshl7fhir_TestScriptu46VariableFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46RuleFormat: scalaxb.XMLFormat[TestScriptu46Rule] = new DefaultComionkinmrshl7fhir_TestScriptu46RuleFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46ParamFormat: scalaxb.XMLFormat[TestScriptu46Param] = new DefaultComionkinmrshl7fhir_TestScriptu46ParamFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46RulesetFormat: scalaxb.XMLFormat[TestScriptu46Ruleset] = new DefaultComionkinmrshl7fhir_TestScriptu46RulesetFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Rule1Format: scalaxb.XMLFormat[TestScriptu46Rule1] = new DefaultComionkinmrshl7fhir_TestScriptu46Rule1Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Param1Format: scalaxb.XMLFormat[TestScriptu46Param1] = new DefaultComionkinmrshl7fhir_TestScriptu46Param1Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46SetupFormat: scalaxb.XMLFormat[TestScriptu46Setup] = new DefaultComionkinmrshl7fhir_TestScriptu46SetupFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46ActionFormat: scalaxb.XMLFormat[TestScriptu46Action] = new DefaultComionkinmrshl7fhir_TestScriptu46ActionFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46OperationFormat: scalaxb.XMLFormat[TestScriptu46Operation] = new DefaultComionkinmrshl7fhir_TestScriptu46OperationFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46RequestHeaderFormat: scalaxb.XMLFormat[TestScriptu46RequestHeader] = new DefaultComionkinmrshl7fhir_TestScriptu46RequestHeaderFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46AssertFormat: scalaxb.XMLFormat[TestScriptu46Assert] = new DefaultComionkinmrshl7fhir_TestScriptu46AssertFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Rule2Format: scalaxb.XMLFormat[TestScriptu46Rule2] = new DefaultComionkinmrshl7fhir_TestScriptu46Rule2Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Param2Format: scalaxb.XMLFormat[TestScriptu46Param2] = new DefaultComionkinmrshl7fhir_TestScriptu46Param2Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Ruleset1Format: scalaxb.XMLFormat[TestScriptu46Ruleset1] = new DefaultComionkinmrshl7fhir_TestScriptu46Ruleset1Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Rule3Format: scalaxb.XMLFormat[TestScriptu46Rule3] = new DefaultComionkinmrshl7fhir_TestScriptu46Rule3Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Param3Format: scalaxb.XMLFormat[TestScriptu46Param3] = new DefaultComionkinmrshl7fhir_TestScriptu46Param3Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46TestFormat: scalaxb.XMLFormat[TestScriptu46Test] = new DefaultComionkinmrshl7fhir_TestScriptu46TestFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Action1Format: scalaxb.XMLFormat[TestScriptu46Action1] = new DefaultComionkinmrshl7fhir_TestScriptu46Action1Format {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46TeardownFormat: scalaxb.XMLFormat[TestScriptu46Teardown] = new DefaultComionkinmrshl7fhir_TestScriptu46TeardownFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptu46Action2Format: scalaxb.XMLFormat[TestScriptu46Action2] = new DefaultComionkinmrshl7fhir_TestScriptu46Action2Format {}
  implicit lazy val Comionkinmrshl7fhir_FHIRDefinedTypeu45listFormat: scalaxb.XMLFormat[FHIRDefinedTypeu45list] = new DefaultComionkinmrshl7fhir_FHIRDefinedTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_FHIRDefinedTypeFormat: scalaxb.XMLFormat[FHIRDefinedType] = new DefaultComionkinmrshl7fhir_FHIRDefinedTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContentTypeu45listFormat: scalaxb.XMLFormat[ContentTypeu45list] = new DefaultComionkinmrshl7fhir_ContentTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_ContentTypeFormat: scalaxb.XMLFormat[ContentType] = new DefaultComionkinmrshl7fhir_ContentTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionDirectionTypeu45listFormat: scalaxb.XMLFormat[AssertionDirectionTypeu45list] = new DefaultComionkinmrshl7fhir_AssertionDirectionTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionDirectionTypeFormat: scalaxb.XMLFormat[AssertionDirectionType] = new DefaultComionkinmrshl7fhir_AssertionDirectionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionOperatorTypeu45listFormat: scalaxb.XMLFormat[AssertionOperatorTypeu45list] = new DefaultComionkinmrshl7fhir_AssertionOperatorTypeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionOperatorTypeFormat: scalaxb.XMLFormat[AssertionOperatorType] = new DefaultComionkinmrshl7fhir_AssertionOperatorTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionResponseTypesu45listFormat: scalaxb.XMLFormat[AssertionResponseTypesu45list] = new DefaultComionkinmrshl7fhir_AssertionResponseTypesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_AssertionResponseTypesFormat: scalaxb.XMLFormat[AssertionResponseTypes] = new DefaultComionkinmrshl7fhir_AssertionResponseTypesFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptRequestMethodCodeu45listFormat: scalaxb.XMLFormat[TestScriptRequestMethodCodeu45list] = new DefaultComionkinmrshl7fhir_TestScriptRequestMethodCodeu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_TestScriptRequestMethodCodeFormat: scalaxb.XMLFormat[TestScriptRequestMethodCode] = new DefaultComionkinmrshl7fhir_TestScriptRequestMethodCodeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetFormat: scalaxb.XMLFormat[ValueSet] = new DefaultComionkinmrshl7fhir_ValueSetFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46ComposeFormat: scalaxb.XMLFormat[ValueSetu46Compose] = new DefaultComionkinmrshl7fhir_ValueSetu46ComposeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46IncludeFormat: scalaxb.XMLFormat[ValueSetu46Include] = new DefaultComionkinmrshl7fhir_ValueSetu46IncludeFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46ConceptFormat: scalaxb.XMLFormat[ValueSetu46Concept] = new DefaultComionkinmrshl7fhir_ValueSetu46ConceptFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46DesignationFormat: scalaxb.XMLFormat[ValueSetu46Designation] = new DefaultComionkinmrshl7fhir_ValueSetu46DesignationFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46FilterFormat: scalaxb.XMLFormat[ValueSetu46Filter] = new DefaultComionkinmrshl7fhir_ValueSetu46FilterFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46ExpansionFormat: scalaxb.XMLFormat[ValueSetu46Expansion] = new DefaultComionkinmrshl7fhir_ValueSetu46ExpansionFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46ParameterFormat: scalaxb.XMLFormat[ValueSetu46Parameter] = new DefaultComionkinmrshl7fhir_ValueSetu46ParameterFormat {}
  implicit lazy val Comionkinmrshl7fhir_ValueSetu46ContainsFormat: scalaxb.XMLFormat[ValueSetu46Contains] = new DefaultComionkinmrshl7fhir_ValueSetu46ContainsFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionPrescriptionTypeFormat: scalaxb.XMLFormat[VisionPrescriptionType] = new DefaultComionkinmrshl7fhir_VisionPrescriptionTypeFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionPrescriptionu46DispenseFormat: scalaxb.XMLFormat[VisionPrescriptionu46Dispense] = new DefaultComionkinmrshl7fhir_VisionPrescriptionu46DispenseFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionBaseu45listFormat: scalaxb.XMLFormat[VisionBaseu45list] = new DefaultComionkinmrshl7fhir_VisionBaseu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionBaseFormat: scalaxb.XMLFormat[VisionBase] = new DefaultComionkinmrshl7fhir_VisionBaseFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionEyesu45listFormat: scalaxb.XMLFormat[VisionEyesu45list] = new DefaultComionkinmrshl7fhir_VisionEyesu45listFormat {}
  implicit lazy val Comionkinmrshl7fhir_VisionEyesFormat: scalaxb.XMLFormat[VisionEyes] = new DefaultComionkinmrshl7fhir_VisionEyesFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("VisionPrescription"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[VisionPrescriptionType](elem)))
      case (Some("TestScript"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[TestScriptType](elem)))
      case (Some("Task"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[TaskType](elem)))
      case (Some("SupplyDelivery"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SupplyDeliveryType](elem)))
      case (Some("Subscription"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SubscriptionType](elem)))
      case (Some("StructureDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[StructureDefinitionType](elem)))
      case (Some("Slot"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SlotType](elem)))
      case (Some("Sequence"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SequenceType](elem)))
      case (Some("Schedule"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ScheduleType](elem)))
      case (Some("ResearchSubject"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ResearchSubjectType](elem)))
      case (Some("RequestGroup"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[RequestGroupType](elem)))
      case (Some("ReferralRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ReferralRequestType](elem)))
      case (Some("Questionnaire"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[QuestionnaireType](elem)))
      case (Some("ProcessResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ProcessResponseType](elem)))
      case (Some("ProcedureRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ProcedureRequestType](elem)))
      case (Some("PractitionerRole"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PractitionerRoleType](elem)))
      case (Some("PlanDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PlanDefinitionType](elem)))
      case (Some("PaymentReconciliation"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PaymentReconciliationType](elem)))
      case (Some("Patient"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PatientType](elem)))
      case (Some("Organization"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[OrganizationType](elem)))
      case (Some("OperationDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[OperationDefinitionType](elem)))
      case (Some("NutritionOrder"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[NutritionOrderType](elem)))
      case (Some("MessageHeader"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MessageHeaderType](elem)))
      case (Some("MedicationStatement"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MedicationStatementType](elem)))
      case (Some("MedicationDispense"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MedicationDispenseType](elem)))
      case (Some("Medication"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MedicationType](elem)))
      case (Some("MeasureReport"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MeasureReportType2](elem)))
      case (Some("Location"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[LocationType](elem)))
      case (Some("Linkage"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[LinkageType](elem)))
      case (Some("ImplementationGuide"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ImplementationGuideType](elem)))
      case (Some("Immunization"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ImmunizationType](elem)))
      case (Some("ImagingManifest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ImagingManifestType](elem)))
      case (Some("GuidanceResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[GuidanceResponseType](elem)))
      case (Some("GraphDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[GraphDefinitionType](elem)))
      case (Some("Flag"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[FlagType](elem)))
      case (Some("ExplanationOfBenefit"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ExplanationOfBenefitType](elem)))
      case (Some("EpisodeOfCare"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EpisodeOfCareType](elem)))
      case (Some("EnrollmentRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EnrollmentRequestType](elem)))
      case (Some("Encounter"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EncounterType](elem)))
      case (Some("EligibilityRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EligibilityRequestType](elem)))
      case (Some("DocumentManifest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DocumentManifestType](elem)))
      case (Some("DeviceUseStatement"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DeviceUseStatementType](elem)))
      case (Some("DeviceMetric"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DeviceMetricType](elem)))
      case (Some("Device"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DeviceType](elem)))
      case (Some("DataElement"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DataElementType](elem)))
      case (Some("Contract"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ContractType](elem)))
      case (Some("Condition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ConditionType](elem)))
      case (Some("Composition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CompositionType](elem)))
      case (Some("CommunicationRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CommunicationRequestType](elem)))
      case (Some("CodeSystem"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CodeSystemType](elem)))
      case (Some("ClaimResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ClaimResponseType](elem)))
      case (Some("ChargeItem"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ChargeItemType](elem)))
      case (Some("CarePlan"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CarePlanType](elem)))
      case (Some("Bundle"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[BundleType](elem)))
      case (Some("Binary"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[BinaryType](elem)))
      case (Some("AuditEvent"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AuditEventType](elem)))
      case (Some("Appointment"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AppointmentType](elem)))
      case (Some("AdverseEvent"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AdverseEventType](elem)))
      case (Some("Account"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AccountType](elem)))
      case (Some("ActivityDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ActivityDefinitionType](elem)))
      case (Some("AllergyIntolerance"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AllergyIntoleranceType](elem)))
      case (Some("AppointmentResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AppointmentResponseType](elem)))
      case (Some("Basic"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[BasicType](elem)))
      case (Some("BodySite"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[BodySiteType](elem)))
      case (Some("CapabilityStatement"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CapabilityStatementType](elem)))
      case (Some("CareTeam"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CareTeamType](elem)))
      case (Some("Claim"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ClaimType](elem)))
      case (Some("ClinicalImpression"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ClinicalImpressionType](elem)))
      case (Some("Communication"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CommunicationType](elem)))
      case (Some("CompartmentDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CompartmentDefinitionType](elem)))
      case (Some("ConceptMap"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ConceptMapType](elem)))
      case (Some("Consent"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ConsentType](elem)))
      case (Some("Coverage"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[CoverageType](elem)))
      case (Some("DetectedIssue"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DetectedIssueType](elem)))
      case (Some("DeviceComponent"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DeviceComponentType](elem)))
      case (Some("DeviceRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DeviceRequestType](elem)))
      case (Some("DiagnosticReport"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DiagnosticReportType](elem)))
      case (Some("DocumentReference"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[DocumentReferenceType](elem)))
      case (Some("EligibilityResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EligibilityResponseType](elem)))
      case (Some("Endpoint"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EndpointType](elem)))
      case (Some("EnrollmentResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[EnrollmentResponseType](elem)))
      case (Some("ExpansionProfile"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ExpansionProfileType](elem)))
      case (Some("FamilyMemberHistory"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[FamilyMemberHistoryType](elem)))
      case (Some("Goal"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[GoalType](elem)))
      case (Some("Group"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[GroupType2](elem)))
      case (Some("HealthcareService"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[HealthcareServiceType](elem)))
      case (Some("ImagingStudy"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ImagingStudyType](elem)))
      case (Some("ImmunizationRecommendation"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ImmunizationRecommendationType](elem)))
      case (Some("Library"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[LibraryType](elem)))
      case (Some("List"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ListTypeType](elem)))
      case (Some("Measure"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MeasureType](elem)))
      case (Some("Media"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MediaType](elem)))
      case (Some("MedicationAdministration"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MedicationAdministrationType](elem)))
      case (Some("MedicationRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MedicationRequestType](elem)))
      case (Some("MessageDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MessageDefinitionType](elem)))
      case (Some("NamingSystem"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[NamingSystemType2](elem)))
      case (Some("Observation"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ObservationType](elem)))
      case (Some("OperationOutcome"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[OperationOutcomeType](elem)))
      case (Some("Parameters"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ParametersType](elem)))
      case (Some("PaymentNotice"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PaymentNoticeType](elem)))
      case (Some("Person"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PersonType](elem)))
      case (Some("Practitioner"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[PractitionerType](elem)))
      case (Some("Procedure"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ProcedureType](elem)))
      case (Some("ProcessRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ProcessRequestType](elem)))
      case (Some("Provenance"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ProvenanceType](elem)))
      case (Some("QuestionnaireResponse"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[QuestionnaireResponseType](elem)))
      case (Some("RelatedPerson"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[RelatedPersonType](elem)))
      case (Some("ResearchStudy"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ResearchStudyType](elem)))
      case (Some("RiskAssessment"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[RiskAssessmentType](elem)))
      case (Some("SearchParameter"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SearchParameterType](elem)))
      case (Some("ServiceDefinition"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ServiceDefinitionType](elem)))
      case (Some("Specimen"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SpecimenType](elem)))
      case (Some("StructureMap"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[StructureMapType](elem)))
      case (Some("Substance"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SubstanceType](elem)))
      case (Some("SupplyRequest"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[SupplyRequestType](elem)))
      case (Some("TestReport"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[TestReportType](elem)))
      case (Some("ValueSet"), Some(fhirUrl) | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ValueSet](elem)))

      case _ => None
    }


  }

  trait DefaultComionkinmrshl7fhir_DateTypeFormat extends scalaxb.ElemNameParser[DateType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("date")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DateType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DateType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DateType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DateType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DateTimeTypeFormat extends scalaxb.ElemNameParser[DateTimeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("dateTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DateTimeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DateTimeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DateTimeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DateTimeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CodeTypeFormat extends scalaxb.ElemNameParser[CodeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("code")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CodeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StringTypeTypeFormat extends scalaxb.ElemNameParser[StringTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("string")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StringTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StringTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StringTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StringTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_IntegerTypeFormat extends scalaxb.ElemNameParser[IntegerType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("integer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IntegerType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IntegerType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IntegerType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IntegerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OidTypeFormat extends scalaxb.ElemNameParser[OidType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("oid")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OidType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      OidType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OidType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OidType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_UriTypeFormat extends scalaxb.ElemNameParser[UriType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("uri")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UriType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UriType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UriType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UriType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_UuidTypeFormat extends scalaxb.ElemNameParser[UuidType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("uuid")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UuidType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UuidType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UuidType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UuidType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_InstantTypeFormat extends scalaxb.ElemNameParser[InstantType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("instant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InstantType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      InstantType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: InstantType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: InstantType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_BooleanTypeTypeFormat extends scalaxb.ElemNameParser[BooleanTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("boolean")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BooleanTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      BooleanTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: BooleanTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: BooleanTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Base64BinaryTypeTypeFormat extends scalaxb.ElemNameParser[Base64BinaryTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("base64Binary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Base64BinaryTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      Base64BinaryTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Base64BinaryTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Base64BinaryTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_UnsignedIntTypeFormat extends scalaxb.ElemNameParser[UnsignedIntType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("unsignedInt")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UnsignedIntType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UnsignedIntType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UnsignedIntType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UnsignedIntType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MarkdownTypeFormat extends scalaxb.ElemNameParser[MarkdownType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("markdown")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MarkdownType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MarkdownType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MarkdownType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MarkdownType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TimeTypeFormat extends scalaxb.ElemNameParser[TimeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("time")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TimeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TimeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TimeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TimeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_IdTypeFormat extends scalaxb.ElemNameParser[IdType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("id")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IdType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IdType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PositiveIntTypeFormat extends scalaxb.ElemNameParser[PositiveIntType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("positiveInt")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PositiveIntType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      PositiveIntType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PositiveIntType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PositiveIntType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DecimalTypeFormat extends scalaxb.ElemNameParser[DecimalType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("decimal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DecimalType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DecimalType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DecimalType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DecimalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ResourceContainerFormat extends scalaxb.ElemNameParser[ResourceContainer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResourceContainer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResourceContainer] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "Account")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ActivityDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "AdverseEvent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "AllergyIntolerance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Appointment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "AppointmentResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "AuditEvent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Basic")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "BodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Bundle")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CapabilityStatement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CarePlan")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CareTeam")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ChargeItem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Claim")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ClaimResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ClinicalImpression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CodeSystem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Communication")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CommunicationRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "CompartmentDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Composition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ConceptMap")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Condition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Consent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Contract")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DataElement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DetectedIssue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Device")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DeviceComponent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DeviceMetric")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DeviceRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DeviceUseStatement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DiagnosticReport")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DocumentManifest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "DocumentReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "EligibilityRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "EligibilityResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Encounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Endpoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "EnrollmentRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "EnrollmentResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "EpisodeOfCare")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ExpansionProfile")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ExplanationOfBenefit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "FamilyMemberHistory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Flag")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Goal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "GraphDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Group")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "GuidanceResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "HealthcareService")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ImagingManifest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ImagingStudy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Immunization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ImmunizationRecommendation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ImplementationGuide")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Library")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Linkage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "List")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Measure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MeasureReport")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Media")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Medication")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MedicationAdministration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MedicationDispense")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MedicationRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MedicationStatement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MessageDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "MessageHeader")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "NamingSystem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "NutritionOrder")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Observation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "OperationDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "OperationOutcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "PaymentNotice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "PaymentReconciliation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Person")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "PlanDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Practitioner")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "PractitionerRole")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Procedure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ProcedureRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ProcessRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ProcessResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Provenance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Questionnaire")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "QuestionnaireResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ReferralRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "RelatedPerson")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "RequestGroup")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ResearchStudy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ResearchSubject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "RiskAssessment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Schedule")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "SearchParameter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ServiceDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Slot")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Specimen")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "StructureDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "StructureMap")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Subscription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Substance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "SupplyDelivery")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "SupplyRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Task")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "TestReport")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "TestScript")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ValueSet")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "VisionPrescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "Parameters")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 ~ p48 ~ p49 ~ p50 ~ p51 ~ p52 ~ p53 ~ p54 ~ p55 ~ p56 ~ p57 ~ p58 ~ p59 ~ p60 ~ p61 ~ p62 ~ p63 ~ p64 ~ p65 ~ p66 ~ p67 ~ p68 ~ p69 ~ p70 ~ p71 ~ p72 ~ p73 ~ p74 ~ p75 ~ p76 ~ p77 ~ p78 ~ p79 ~ p80 ~ p81 ~ p82 ~ p83 ~ p84 ~ p85 ~ p86 ~ p87 ~ p88 ~ p89 ~ p90 ~ p91 ~ p92 ~ p93 ~ p94 ~ p95 ~ p96 ~ p97 ~ p98 ~ p99 ~ p100 ~ p101 ~ p102 ~ p103 ~ p104 ~ p105 ~ p106 ~ p107 ~ p108 ~ p109 ~ p110 ~ p111 ~ p112 ~ p113 ~ p114 ~ p115 ~ p116 ~ p117 =>
      ResourceContainer(p1.headOption map { scalaxb.fromXML[AccountType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[ActivityDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AdverseEventType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[AllergyIntoleranceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[AppointmentType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[AppointmentResponseType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[AuditEventType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BasicType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BinaryType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BodySiteType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BundleType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CapabilityStatementType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CarePlanType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CareTeamType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ChargeItemType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ClaimType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ClaimResponseType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ClinicalImpressionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[CodeSystemType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CommunicationType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CommunicationRequestType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CompartmentDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CompositionType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ConceptMapType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ConditionType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ConsentType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ContractType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[CoverageType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DataElementType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[DetectedIssueType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[DeviceType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[DeviceComponentType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[DeviceMetricType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[DeviceRequestType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[DeviceUseStatementType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[DiagnosticReportType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[DocumentManifestType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[DocumentReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[EligibilityRequestType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[EligibilityResponseType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[EncounterType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[EndpointType](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[EnrollmentRequestType](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[EnrollmentResponseType](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[EpisodeOfCareType](_, scalaxb.ElemName(node) :: stack) },
        p46.headOption map { scalaxb.fromXML[ExpansionProfileType](_, scalaxb.ElemName(node) :: stack) },
        p47.headOption map { scalaxb.fromXML[ExplanationOfBenefitType](_, scalaxb.ElemName(node) :: stack) },
        p48.headOption map { scalaxb.fromXML[FamilyMemberHistoryType](_, scalaxb.ElemName(node) :: stack) },
        p49.headOption map { scalaxb.fromXML[FlagType](_, scalaxb.ElemName(node) :: stack) },
        p50.headOption map { scalaxb.fromXML[GoalType](_, scalaxb.ElemName(node) :: stack) },
        p51.headOption map { scalaxb.fromXML[GraphDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p52.headOption map { scalaxb.fromXML[GroupType2](_, scalaxb.ElemName(node) :: stack) },
        p53.headOption map { scalaxb.fromXML[GuidanceResponseType](_, scalaxb.ElemName(node) :: stack) },
        p54.headOption map { scalaxb.fromXML[HealthcareServiceType](_, scalaxb.ElemName(node) :: stack) },
        p55.headOption map { scalaxb.fromXML[ImagingManifestType](_, scalaxb.ElemName(node) :: stack) },
        p56.headOption map { scalaxb.fromXML[ImagingStudyType](_, scalaxb.ElemName(node) :: stack) },
        p57.headOption map { scalaxb.fromXML[ImmunizationType](_, scalaxb.ElemName(node) :: stack) },
        p58.headOption map { scalaxb.fromXML[ImmunizationRecommendationType](_, scalaxb.ElemName(node) :: stack) },
        p59.headOption map { scalaxb.fromXML[ImplementationGuideType](_, scalaxb.ElemName(node) :: stack) },
        p60.headOption map { scalaxb.fromXML[LibraryType](_, scalaxb.ElemName(node) :: stack) },
        p61.headOption map { scalaxb.fromXML[LinkageType](_, scalaxb.ElemName(node) :: stack) },
        p62.headOption map { scalaxb.fromXML[ListTypeType](_, scalaxb.ElemName(node) :: stack) },
        p63.headOption map { scalaxb.fromXML[LocationType](_, scalaxb.ElemName(node) :: stack) },
        p64.headOption map { scalaxb.fromXML[MeasureType](_, scalaxb.ElemName(node) :: stack) },
        p65.headOption map { scalaxb.fromXML[MeasureReportType2](_, scalaxb.ElemName(node) :: stack) },
        p66.headOption map { scalaxb.fromXML[MediaType](_, scalaxb.ElemName(node) :: stack) },
        p67.headOption map { scalaxb.fromXML[MedicationType](_, scalaxb.ElemName(node) :: stack) },
        p68.headOption map { scalaxb.fromXML[MedicationAdministrationType](_, scalaxb.ElemName(node) :: stack) },
        p69.headOption map { scalaxb.fromXML[MedicationDispenseType](_, scalaxb.ElemName(node) :: stack) },
        p70.headOption map { scalaxb.fromXML[MedicationRequestType](_, scalaxb.ElemName(node) :: stack) },
        p71.headOption map { scalaxb.fromXML[MedicationStatementType](_, scalaxb.ElemName(node) :: stack) },
        p72.headOption map { scalaxb.fromXML[MessageDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p73.headOption map { scalaxb.fromXML[MessageHeaderType](_, scalaxb.ElemName(node) :: stack) },
        p74.headOption map { scalaxb.fromXML[NamingSystemType2](_, scalaxb.ElemName(node) :: stack) },
        p75.headOption map { scalaxb.fromXML[NutritionOrderType](_, scalaxb.ElemName(node) :: stack) },
        p76.headOption map { scalaxb.fromXML[ObservationType](_, scalaxb.ElemName(node) :: stack) },
        p77.headOption map { scalaxb.fromXML[OperationDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p78.headOption map { scalaxb.fromXML[OperationOutcomeType](_, scalaxb.ElemName(node) :: stack) },
        p79.headOption map { scalaxb.fromXML[OrganizationType](_, scalaxb.ElemName(node) :: stack) },
        p80.headOption map { scalaxb.fromXML[PatientType](_, scalaxb.ElemName(node) :: stack) },
        p81.headOption map { scalaxb.fromXML[PaymentNoticeType](_, scalaxb.ElemName(node) :: stack) },
        p82.headOption map { scalaxb.fromXML[PaymentReconciliationType](_, scalaxb.ElemName(node) :: stack) },
        p83.headOption map { scalaxb.fromXML[PersonType](_, scalaxb.ElemName(node) :: stack) },
        p84.headOption map { scalaxb.fromXML[PlanDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p85.headOption map { scalaxb.fromXML[PractitionerType](_, scalaxb.ElemName(node) :: stack) },
        p86.headOption map { scalaxb.fromXML[PractitionerRoleType](_, scalaxb.ElemName(node) :: stack) },
        p87.headOption map { scalaxb.fromXML[ProcedureType](_, scalaxb.ElemName(node) :: stack) },
        p88.headOption map { scalaxb.fromXML[ProcedureRequestType](_, scalaxb.ElemName(node) :: stack) },
        p89.headOption map { scalaxb.fromXML[ProcessRequestType](_, scalaxb.ElemName(node) :: stack) },
        p90.headOption map { scalaxb.fromXML[ProcessResponseType](_, scalaxb.ElemName(node) :: stack) },
        p91.headOption map { scalaxb.fromXML[ProvenanceType](_, scalaxb.ElemName(node) :: stack) },
        p92.headOption map { scalaxb.fromXML[QuestionnaireType](_, scalaxb.ElemName(node) :: stack) },
        p93.headOption map { scalaxb.fromXML[QuestionnaireResponseType](_, scalaxb.ElemName(node) :: stack) },
        p94.headOption map { scalaxb.fromXML[ReferralRequestType](_, scalaxb.ElemName(node) :: stack) },
        p95.headOption map { scalaxb.fromXML[RelatedPersonType](_, scalaxb.ElemName(node) :: stack) },
        p96.headOption map { scalaxb.fromXML[RequestGroupType](_, scalaxb.ElemName(node) :: stack) },
        p97.headOption map { scalaxb.fromXML[ResearchStudyType](_, scalaxb.ElemName(node) :: stack) },
        p98.headOption map { scalaxb.fromXML[ResearchSubjectType](_, scalaxb.ElemName(node) :: stack) },
        p99.headOption map { scalaxb.fromXML[RiskAssessmentType](_, scalaxb.ElemName(node) :: stack) },
        p100.headOption map { scalaxb.fromXML[ScheduleType](_, scalaxb.ElemName(node) :: stack) },
        p101.headOption map { scalaxb.fromXML[SearchParameterType](_, scalaxb.ElemName(node) :: stack) },
        p102.headOption map { scalaxb.fromXML[SequenceType](_, scalaxb.ElemName(node) :: stack) },
        p103.headOption map { scalaxb.fromXML[ServiceDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p104.headOption map { scalaxb.fromXML[SlotType](_, scalaxb.ElemName(node) :: stack) },
        p105.headOption map { scalaxb.fromXML[SpecimenType](_, scalaxb.ElemName(node) :: stack) },
        p106.headOption map { scalaxb.fromXML[StructureDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p107.headOption map { scalaxb.fromXML[StructureMapType](_, scalaxb.ElemName(node) :: stack) },
        p108.headOption map { scalaxb.fromXML[SubscriptionType](_, scalaxb.ElemName(node) :: stack) },
        p109.headOption map { scalaxb.fromXML[SubstanceType](_, scalaxb.ElemName(node) :: stack) },
        p110.headOption map { scalaxb.fromXML[SupplyDeliveryType](_, scalaxb.ElemName(node) :: stack) },
        p111.headOption map { scalaxb.fromXML[SupplyRequestType](_, scalaxb.ElemName(node) :: stack) },
        p112.headOption map { scalaxb.fromXML[TaskType](_, scalaxb.ElemName(node) :: stack) },
        p113.headOption map { scalaxb.fromXML[TestReportType](_, scalaxb.ElemName(node) :: stack) },
        p114.headOption map { scalaxb.fromXML[TestScriptType](_, scalaxb.ElemName(node) :: stack) },
        p115.headOption map { scalaxb.fromXML[ValueSet](_, scalaxb.ElemName(node) :: stack) },
        p116.headOption map { scalaxb.fromXML[VisionPrescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p117.headOption map { scalaxb.fromXML[ParametersType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ResourceContainer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Account map { scalaxb.toXML[AccountType](_, Some(fhirUrl), Some("Account"), __scope, false) } getOrElse {Nil},
        __obj.ActivityDefinition map { scalaxb.toXML[ActivityDefinitionType](_, Some(fhirUrl), Some("ActivityDefinition"), __scope, false) } getOrElse {Nil},
        __obj.AdverseEvent map { scalaxb.toXML[AdverseEventType](_, Some(fhirUrl), Some("AdverseEvent"), __scope, false) } getOrElse {Nil},
        __obj.AllergyIntolerance map { scalaxb.toXML[AllergyIntoleranceType](_, Some(fhirUrl), Some("AllergyIntolerance"), __scope, false) } getOrElse {Nil},
        __obj.Appointment map { scalaxb.toXML[AppointmentType](_, Some(fhirUrl), Some("Appointment"), __scope, false) } getOrElse {Nil},
        __obj.AppointmentResponse map { scalaxb.toXML[AppointmentResponseType](_, Some(fhirUrl), Some("AppointmentResponse"), __scope, false) } getOrElse {Nil},
        __obj.AuditEvent map { scalaxb.toXML[AuditEventType](_, Some(fhirUrl), Some("AuditEvent"), __scope, false) } getOrElse {Nil},
        __obj.Basic map { scalaxb.toXML[BasicType](_, Some(fhirUrl), Some("Basic"), __scope, false) } getOrElse {Nil},
        __obj.Binary map { scalaxb.toXML[BinaryType](_, Some(fhirUrl), Some("Binary"), __scope, false) } getOrElse {Nil},
        __obj.BodySite map { scalaxb.toXML[BodySiteType](_, Some(fhirUrl), Some("BodySite"), __scope, false) } getOrElse {Nil},
        __obj.Bundle map { scalaxb.toXML[BundleType](_, Some(fhirUrl), Some("Bundle"), __scope, false) } getOrElse {Nil},
        __obj.CapabilityStatement map { scalaxb.toXML[CapabilityStatementType](_, Some(fhirUrl), Some("CapabilityStatement"), __scope, false) } getOrElse {Nil},
        __obj.CarePlan map { scalaxb.toXML[CarePlanType](_, Some(fhirUrl), Some("CarePlan"), __scope, false) } getOrElse {Nil},
        __obj.CareTeam map { scalaxb.toXML[CareTeamType](_, Some(fhirUrl), Some("CareTeam"), __scope, false) } getOrElse {Nil},
        __obj.ChargeItem map { scalaxb.toXML[ChargeItemType](_, Some(fhirUrl), Some("ChargeItem"), __scope, false) } getOrElse {Nil},
        __obj.Claim map { scalaxb.toXML[ClaimType](_, Some(fhirUrl), Some("Claim"), __scope, false) } getOrElse {Nil},
        __obj.ClaimResponse map { scalaxb.toXML[ClaimResponseType](_, Some(fhirUrl), Some("ClaimResponse"), __scope, false) } getOrElse {Nil},
        __obj.ClinicalImpression map { scalaxb.toXML[ClinicalImpressionType](_, Some(fhirUrl), Some("ClinicalImpression"), __scope, false) } getOrElse {Nil},
        __obj.CodeSystem map { scalaxb.toXML[CodeSystemType](_, Some(fhirUrl), Some("CodeSystem"), __scope, false) } getOrElse {Nil},
        __obj.Communication map { scalaxb.toXML[CommunicationType](_, Some(fhirUrl), Some("Communication"), __scope, false) } getOrElse {Nil},
        __obj.CommunicationRequest map { scalaxb.toXML[CommunicationRequestType](_, Some(fhirUrl), Some("CommunicationRequest"), __scope, false) } getOrElse {Nil},
        __obj.CompartmentDefinition map { scalaxb.toXML[CompartmentDefinitionType](_, Some(fhirUrl), Some("CompartmentDefinition"), __scope, false) } getOrElse {Nil},
        __obj.Composition map { scalaxb.toXML[CompositionType](_, Some(fhirUrl), Some("Composition"), __scope, false) } getOrElse {Nil},
        __obj.ConceptMap map { scalaxb.toXML[ConceptMapType](_, Some(fhirUrl), Some("ConceptMap"), __scope, false) } getOrElse {Nil},
        __obj.Condition map { scalaxb.toXML[ConditionType](_, Some(fhirUrl), Some("Condition"), __scope, false) } getOrElse {Nil},
        __obj.Consent map { scalaxb.toXML[ConsentType](_, Some(fhirUrl), Some("Consent"), __scope, false) } getOrElse {Nil},
        __obj.Contract map { scalaxb.toXML[ContractType](_, Some(fhirUrl), Some("Contract"), __scope, false) } getOrElse {Nil},
        __obj.Coverage map { scalaxb.toXML[CoverageType](_, Some(fhirUrl), Some("Coverage"), __scope, false) } getOrElse {Nil},
        __obj.DataElement map { scalaxb.toXML[DataElementType](_, Some(fhirUrl), Some("DataElement"), __scope, false) } getOrElse {Nil},
        __obj.DetectedIssue map { scalaxb.toXML[DetectedIssueType](_, Some(fhirUrl), Some("DetectedIssue"), __scope, false) } getOrElse {Nil},
        __obj.Device map { scalaxb.toXML[DeviceType](_, Some(fhirUrl), Some("Device"), __scope, false) } getOrElse {Nil},
        __obj.DeviceComponent map { scalaxb.toXML[DeviceComponentType](_, Some(fhirUrl), Some("DeviceComponent"), __scope, false) } getOrElse {Nil},
        __obj.DeviceMetric map { scalaxb.toXML[DeviceMetricType](_, Some(fhirUrl), Some("DeviceMetric"), __scope, false) } getOrElse {Nil},
        __obj.DeviceRequest map { scalaxb.toXML[DeviceRequestType](_, Some(fhirUrl), Some("DeviceRequest"), __scope, false) } getOrElse {Nil},
        __obj.DeviceUseStatement map { scalaxb.toXML[DeviceUseStatementType](_, Some(fhirUrl), Some("DeviceUseStatement"), __scope, false) } getOrElse {Nil},
        __obj.DiagnosticReport map { scalaxb.toXML[DiagnosticReportType](_, Some(fhirUrl), Some("DiagnosticReport"), __scope, false) } getOrElse {Nil},
        __obj.DocumentManifest map { scalaxb.toXML[DocumentManifestType](_, Some(fhirUrl), Some("DocumentManifest"), __scope, false) } getOrElse {Nil},
        __obj.DocumentReference map { scalaxb.toXML[DocumentReferenceType](_, Some(fhirUrl), Some("DocumentReference"), __scope, false) } getOrElse {Nil},
        __obj.EligibilityRequest map { scalaxb.toXML[EligibilityRequestType](_, Some(fhirUrl), Some("EligibilityRequest"), __scope, false) } getOrElse {Nil},
        __obj.EligibilityResponse map { scalaxb.toXML[EligibilityResponseType](_, Some(fhirUrl), Some("EligibilityResponse"), __scope, false) } getOrElse {Nil},
        __obj.Encounter map { scalaxb.toXML[EncounterType](_, Some(fhirUrl), Some("Encounter"), __scope, false) } getOrElse {Nil},
        __obj.Endpoint map { scalaxb.toXML[EndpointType](_, Some(fhirUrl), Some("Endpoint"), __scope, false) } getOrElse {Nil},
        __obj.EnrollmentRequest map { scalaxb.toXML[EnrollmentRequestType](_, Some(fhirUrl), Some("EnrollmentRequest"), __scope, false) } getOrElse {Nil},
        __obj.EnrollmentResponse map { scalaxb.toXML[EnrollmentResponseType](_, Some(fhirUrl), Some("EnrollmentResponse"), __scope, false) } getOrElse {Nil},
        __obj.EpisodeOfCare map { scalaxb.toXML[EpisodeOfCareType](_, Some(fhirUrl), Some("EpisodeOfCare"), __scope, false) } getOrElse {Nil},
        __obj.ExpansionProfile map { scalaxb.toXML[ExpansionProfileType](_, Some(fhirUrl), Some("ExpansionProfile"), __scope, false) } getOrElse {Nil},
        __obj.ExplanationOfBenefit map { scalaxb.toXML[ExplanationOfBenefitType](_, Some(fhirUrl), Some("ExplanationOfBenefit"), __scope, false) } getOrElse {Nil},
        __obj.FamilyMemberHistory map { scalaxb.toXML[FamilyMemberHistoryType](_, Some(fhirUrl), Some("FamilyMemberHistory"), __scope, false) } getOrElse {Nil},
        __obj.Flag map { scalaxb.toXML[FlagType](_, Some(fhirUrl), Some("Flag"), __scope, false) } getOrElse {Nil},
        __obj.Goal map { scalaxb.toXML[GoalType](_, Some(fhirUrl), Some("Goal"), __scope, false) } getOrElse {Nil},
        __obj.GraphDefinition map { scalaxb.toXML[GraphDefinitionType](_, Some(fhirUrl), Some("GraphDefinition"), __scope, false) } getOrElse {Nil},
        __obj.Group map { scalaxb.toXML[GroupType2](_, Some(fhirUrl), Some("Group"), __scope, false) } getOrElse {Nil},
        __obj.GuidanceResponse map { scalaxb.toXML[GuidanceResponseType](_, Some(fhirUrl), Some("GuidanceResponse"), __scope, false) } getOrElse {Nil},
        __obj.HealthcareService map { scalaxb.toXML[HealthcareServiceType](_, Some(fhirUrl), Some("HealthcareService"), __scope, false) } getOrElse {Nil},
        __obj.ImagingManifest map { scalaxb.toXML[ImagingManifestType](_, Some(fhirUrl), Some("ImagingManifest"), __scope, false) } getOrElse {Nil},
        __obj.ImagingStudy map { scalaxb.toXML[ImagingStudyType](_, Some(fhirUrl), Some("ImagingStudy"), __scope, false) } getOrElse {Nil},
        __obj.Immunization map { scalaxb.toXML[ImmunizationType](_, Some(fhirUrl), Some("Immunization"), __scope, false) } getOrElse {Nil},
        __obj.ImmunizationRecommendation map { scalaxb.toXML[ImmunizationRecommendationType](_, Some(fhirUrl), Some("ImmunizationRecommendation"), __scope, false) } getOrElse {Nil},
        __obj.ImplementationGuide map { scalaxb.toXML[ImplementationGuideType](_, Some(fhirUrl), Some("ImplementationGuide"), __scope, false) } getOrElse {Nil},
        __obj.Library map { scalaxb.toXML[LibraryType](_, Some(fhirUrl), Some("Library"), __scope, false) } getOrElse {Nil},
        __obj.Linkage map { scalaxb.toXML[LinkageType](_, Some(fhirUrl), Some("Linkage"), __scope, false) } getOrElse {Nil},
        __obj.ListValue map { scalaxb.toXML[ListTypeType](_, Some(fhirUrl), Some("List"), __scope, false) } getOrElse {Nil},
        __obj.Location map { scalaxb.toXML[LocationType](_, Some(fhirUrl), Some("Location"), __scope, false) } getOrElse {Nil},
        __obj.Measure map { scalaxb.toXML[MeasureType](_, Some(fhirUrl), Some("Measure"), __scope, false) } getOrElse {Nil},
        __obj.MeasureReport map { scalaxb.toXML[MeasureReportType2](_, Some(fhirUrl), Some("MeasureReport"), __scope, false) } getOrElse {Nil},
        __obj.Media map { scalaxb.toXML[MediaType](_, Some(fhirUrl), Some("Media"), __scope, false) } getOrElse {Nil},
        __obj.Medication map { scalaxb.toXML[MedicationType](_, Some(fhirUrl), Some("Medication"), __scope, false) } getOrElse {Nil},
        __obj.MedicationAdministration map { scalaxb.toXML[MedicationAdministrationType](_, Some(fhirUrl), Some("MedicationAdministration"), __scope, false) } getOrElse {Nil},
        __obj.MedicationDispense map { scalaxb.toXML[MedicationDispenseType](_, Some(fhirUrl), Some("MedicationDispense"), __scope, false) } getOrElse {Nil},
        __obj.MedicationRequest map { scalaxb.toXML[MedicationRequestType](_, Some(fhirUrl), Some("MedicationRequest"), __scope, false) } getOrElse {Nil},
        __obj.MedicationStatement map { scalaxb.toXML[MedicationStatementType](_, Some(fhirUrl), Some("MedicationStatement"), __scope, false) } getOrElse {Nil},
        __obj.MessageDefinition map { scalaxb.toXML[MessageDefinitionType](_, Some(fhirUrl), Some("MessageDefinition"), __scope, false) } getOrElse {Nil},
        __obj.MessageHeader map { scalaxb.toXML[MessageHeaderType](_, Some(fhirUrl), Some("MessageHeader"), __scope, false) } getOrElse {Nil},
        __obj.NamingSystem map { scalaxb.toXML[NamingSystemType2](_, Some(fhirUrl), Some("NamingSystem"), __scope, false) } getOrElse {Nil},
        __obj.NutritionOrder map { scalaxb.toXML[NutritionOrderType](_, Some(fhirUrl), Some("NutritionOrder"), __scope, false) } getOrElse {Nil},
        __obj.Observation map { scalaxb.toXML[ObservationType](_, Some(fhirUrl), Some("Observation"), __scope, false) } getOrElse {Nil},
        __obj.OperationDefinition map { scalaxb.toXML[OperationDefinitionType](_, Some(fhirUrl), Some("OperationDefinition"), __scope, false) } getOrElse {Nil},
        __obj.OperationOutcome map { scalaxb.toXML[OperationOutcomeType](_, Some(fhirUrl), Some("OperationOutcome"), __scope, false) } getOrElse {Nil},
        __obj.Organization map { scalaxb.toXML[OrganizationType](_, Some(fhirUrl), Some("Organization"), __scope, false) } getOrElse {Nil},
        __obj.Patient map { scalaxb.toXML[PatientType](_, Some(fhirUrl), Some("Patient"), __scope, false) } getOrElse {Nil},
        __obj.PaymentNotice map { scalaxb.toXML[PaymentNoticeType](_, Some(fhirUrl), Some("PaymentNotice"), __scope, false) } getOrElse {Nil},
        __obj.PaymentReconciliation map { scalaxb.toXML[PaymentReconciliationType](_, Some(fhirUrl), Some("PaymentReconciliation"), __scope, false) } getOrElse {Nil},
        __obj.Person map { scalaxb.toXML[PersonType](_, Some(fhirUrl), Some("Person"), __scope, false) } getOrElse {Nil},
        __obj.PlanDefinition map { scalaxb.toXML[PlanDefinitionType](_, Some(fhirUrl), Some("PlanDefinition"), __scope, false) } getOrElse {Nil},
        __obj.Practitioner map { scalaxb.toXML[PractitionerType](_, Some(fhirUrl), Some("Practitioner"), __scope, false) } getOrElse {Nil},
        __obj.PractitionerRole map { scalaxb.toXML[PractitionerRoleType](_, Some(fhirUrl), Some("PractitionerRole"), __scope, false) } getOrElse {Nil},
        __obj.Procedure map { scalaxb.toXML[ProcedureType](_, Some(fhirUrl), Some("Procedure"), __scope, false) } getOrElse {Nil},
        __obj.ProcedureRequest map { scalaxb.toXML[ProcedureRequestType](_, Some(fhirUrl), Some("ProcedureRequest"), __scope, false) } getOrElse {Nil},
        __obj.ProcessRequest map { scalaxb.toXML[ProcessRequestType](_, Some(fhirUrl), Some("ProcessRequest"), __scope, false) } getOrElse {Nil},
        __obj.ProcessResponse map { scalaxb.toXML[ProcessResponseType](_, Some(fhirUrl), Some("ProcessResponse"), __scope, false) } getOrElse {Nil},
        __obj.Provenance map { scalaxb.toXML[ProvenanceType](_, Some(fhirUrl), Some("Provenance"), __scope, false) } getOrElse {Nil},
        __obj.Questionnaire map { scalaxb.toXML[QuestionnaireType](_, Some(fhirUrl), Some("Questionnaire"), __scope, false) } getOrElse {Nil},
        __obj.QuestionnaireResponse map { scalaxb.toXML[QuestionnaireResponseType](_, Some(fhirUrl), Some("QuestionnaireResponse"), __scope, false) } getOrElse {Nil},
        __obj.ReferralRequest map { scalaxb.toXML[ReferralRequestType](_, Some(fhirUrl), Some("ReferralRequest"), __scope, false) } getOrElse {Nil},
        __obj.RelatedPerson map { scalaxb.toXML[RelatedPersonType](_, Some(fhirUrl), Some("RelatedPerson"), __scope, false) } getOrElse {Nil},
        __obj.RequestGroup map { scalaxb.toXML[RequestGroupType](_, Some(fhirUrl), Some("RequestGroup"), __scope, false) } getOrElse {Nil},
        __obj.ResearchStudy map { scalaxb.toXML[ResearchStudyType](_, Some(fhirUrl), Some("ResearchStudy"), __scope, false) } getOrElse {Nil},
        __obj.ResearchSubject map { scalaxb.toXML[ResearchSubjectType](_, Some(fhirUrl), Some("ResearchSubject"), __scope, false) } getOrElse {Nil},
        __obj.RiskAssessment map { scalaxb.toXML[RiskAssessmentType](_, Some(fhirUrl), Some("RiskAssessment"), __scope, false) } getOrElse {Nil},
        __obj.Schedule map { scalaxb.toXML[ScheduleType](_, Some(fhirUrl), Some("Schedule"), __scope, false) } getOrElse {Nil},
        __obj.SearchParameter map { scalaxb.toXML[SearchParameterType](_, Some(fhirUrl), Some("SearchParameter"), __scope, false) } getOrElse {Nil},
        __obj.Sequence map { scalaxb.toXML[SequenceType](_, Some(fhirUrl), Some("Sequence"), __scope, false) } getOrElse {Nil},
        __obj.ServiceDefinition map { scalaxb.toXML[ServiceDefinitionType](_, Some(fhirUrl), Some("ServiceDefinition"), __scope, false) } getOrElse {Nil},
        __obj.Slot map { scalaxb.toXML[SlotType](_, Some(fhirUrl), Some("Slot"), __scope, false) } getOrElse {Nil},
        __obj.Specimen map { scalaxb.toXML[SpecimenType](_, Some(fhirUrl), Some("Specimen"), __scope, false) } getOrElse {Nil},
        __obj.StructureDefinition map { scalaxb.toXML[StructureDefinitionType](_, Some(fhirUrl), Some("StructureDefinition"), __scope, false) } getOrElse {Nil},
        __obj.StructureMap map { scalaxb.toXML[StructureMapType](_, Some(fhirUrl), Some("StructureMap"), __scope, false) } getOrElse {Nil},
        __obj.Subscription map { scalaxb.toXML[SubscriptionType](_, Some(fhirUrl), Some("Subscription"), __scope, false) } getOrElse {Nil},
        __obj.Substance map { scalaxb.toXML[SubstanceType](_, Some(fhirUrl), Some("Substance"), __scope, false) } getOrElse {Nil},
        __obj.SupplyDelivery map { scalaxb.toXML[SupplyDeliveryType](_, Some(fhirUrl), Some("SupplyDelivery"), __scope, false) } getOrElse {Nil},
        __obj.SupplyRequest map { scalaxb.toXML[SupplyRequestType](_, Some(fhirUrl), Some("SupplyRequest"), __scope, false) } getOrElse {Nil},
        __obj.Task map { scalaxb.toXML[TaskType](_, Some(fhirUrl), Some("Task"), __scope, false) } getOrElse {Nil},
        __obj.TestReport map { scalaxb.toXML[TestReportType](_, Some(fhirUrl), Some("TestReport"), __scope, false) } getOrElse {Nil},
        __obj.TestScript map { scalaxb.toXML[TestScriptType](_, Some(fhirUrl), Some("TestScript"), __scope, false) } getOrElse {Nil},
        __obj.ValueSet map { scalaxb.toXML[ValueSet](_, Some(fhirUrl), Some("ValueSet"), __scope, false) } getOrElse {Nil},
        __obj.VisionPrescription map { scalaxb.toXML[VisionPrescriptionType](_, Some(fhirUrl), Some("VisionPrescription"), __scope, false) } getOrElse {Nil},
        __obj.Parameters map { scalaxb.toXML[ParametersType](_, Some(fhirUrl), Some("Parameters"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExtensionTypeFormat extends scalaxb.ElemNameParser[ExtensionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Extension")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExtensionType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMeta")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 =>
      ExtensionType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@url").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@url" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExtensionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@url", _) => attr = scala.xml.Attribute(null, "url", __obj.url.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.valueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("valueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("valueInstant"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("valueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.valueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("valueOid"), __scope, false) } getOrElse {Nil},
        __obj.valuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("valuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("valueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("valueAddress"), __scope, false) } getOrElse {Nil},
        __obj.valueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("valueAge"), __scope, false) } getOrElse {Nil},
        __obj.valueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("valueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("valueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.valueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("valueCount"), __scope, false) } getOrElse {Nil},
        __obj.valueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("valueDistance"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil},
        __obj.valueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("valueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.valueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("valueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.valueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("valueMoney"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("valueSignature"), __scope, false) } getOrElse {Nil},
        __obj.valueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("valueTiming"), __scope, false) } getOrElse {Nil},
        __obj.valueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("valueMeta"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_BackboneElementableFormat extends scalaxb.XMLFormat[BackboneElementable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, BackboneElementable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some(fhirUrl), Some("ValueSet.Parameter")) => Right(scalaxb.fromXML[ValueSetu46Parameter](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Filter")) => Right(scalaxb.fromXML[ValueSetu46Filter](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Concept")) => Right(scalaxb.fromXML[ValueSetu46Concept](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Compose")) => Right(scalaxb.fromXML[ValueSetu46Compose](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action2")) => Right(scalaxb.fromXML[TestScriptu46Action2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action1")) => Right(scalaxb.fromXML[TestScriptu46Action1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param3")) => Right(scalaxb.fromXML[TestScriptu46Param3](node, stack))
          case (Some(fhirUrl), Some("TestScript.Ruleset1")) => Right(scalaxb.fromXML[TestScriptu46Ruleset1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule2")) => Right(scalaxb.fromXML[TestScriptu46Rule2](node, stack))
          case (Some(fhirUrl), Some("TestScript.RequestHeader")) => Right(scalaxb.fromXML[TestScriptu46RequestHeader](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action")) => Right(scalaxb.fromXML[TestScriptu46Action](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param1")) => Right(scalaxb.fromXML[TestScriptu46Param1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Ruleset")) => Right(scalaxb.fromXML[TestScriptu46Ruleset](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule")) => Right(scalaxb.fromXML[TestScriptu46Rule](node, stack))
          case (Some(fhirUrl), Some("TestScript.Fixture")) => Right(scalaxb.fromXML[TestScriptu46Fixture](node, stack))
          case (Some(fhirUrl), Some("TestScript.Link")) => Right(scalaxb.fromXML[TestScriptu46Link](node, stack))
          case (Some(fhirUrl), Some("TestScript.Destination")) => Right(scalaxb.fromXML[TestScriptu46Destination](node, stack))
          case (Some(fhirUrl), Some("TestReport.Teardown")) => Right(scalaxb.fromXML[TestReportu46Teardown](node, stack))
          case (Some(fhirUrl), Some("TestReport.Test")) => Right(scalaxb.fromXML[TestReportu46Test](node, stack))
          case (Some(fhirUrl), Some("TestReport.Operation")) => Right(scalaxb.fromXML[TestReportu46Operation](node, stack))
          case (Some(fhirUrl), Some("TestReport.Setup")) => Right(scalaxb.fromXML[TestReportu46Setup](node, stack))
          case (Some(fhirUrl), Some("Task.Input")) => Right(scalaxb.fromXML[Tasku46Input](node, stack))
          case (Some(fhirUrl), Some("Task.Requester")) => Right(scalaxb.fromXML[Tasku46Requester](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest.Requester")) => Right(scalaxb.fromXML[SupplyRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("Substance.Instance")) => Right(scalaxb.fromXML[Substanceu46Instance](node, stack))
          case (Some(fhirUrl), Some("Subscription.Channel")) => Right(scalaxb.fromXML[Subscriptionu46Channel](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Dependent")) => Right(scalaxb.fromXML[StructureMapu46Dependent](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Target")) => Right(scalaxb.fromXML[StructureMapu46Target](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Rule")) => Right(scalaxb.fromXML[StructureMapu46Rule](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Group")) => Right(scalaxb.fromXML[StructureMapu46Group](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Snapshot")) => Right(scalaxb.fromXML[StructureDefinitionu46Snapshot](node, stack))
          case (Some(fhirUrl), Some("Specimen.Processing")) => Right(scalaxb.fromXML[Specimenu46Processing](node, stack))
          case (Some(fhirUrl), Some("Sequence.Quality")) => Right(scalaxb.fromXML[Sequenceu46Quality](node, stack))
          case (Some(fhirUrl), Some("Sequence.ReferenceSeq")) => Right(scalaxb.fromXML[Sequenceu46ReferenceSeq](node, stack))
          case (Some(fhirUrl), Some("SearchParameter.Component")) => Right(scalaxb.fromXML[SearchParameteru46Component](node, stack))
          case (Some(fhirUrl), Some("ResearchStudy.Arm")) => Right(scalaxb.fromXML[ResearchStudyu46Arm](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.RelatedAction")) => Right(scalaxb.fromXML[RequestGroupu46RelatedAction](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.Action")) => Right(scalaxb.fromXML[RequestGroupu46Action](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse.Item")) => Right(scalaxb.fromXML[QuestionnaireResponseu46Item](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.Option")) => Right(scalaxb.fromXML[Questionnaireu46Option](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.Item")) => Right(scalaxb.fromXML[Questionnaireu46Item](node, stack))
          case (Some(fhirUrl), Some("Provenance.Entity")) => Right(scalaxb.fromXML[Provenanceu46Entity](node, stack))
          case (Some(fhirUrl), Some("Procedure.Performer")) => Right(scalaxb.fromXML[Procedureu46Performer](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole.NotAvailable")) => Right(scalaxb.fromXML[PractitionerRoleu46NotAvailable](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Participant")) => Right(scalaxb.fromXML[PlanDefinitionu46Participant](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Condition")) => Right(scalaxb.fromXML[PlanDefinitionu46Condition](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Target")) => Right(scalaxb.fromXML[PlanDefinitionu46Target](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation.Detail")) => Right(scalaxb.fromXML[PaymentReconciliationu46Detail](node, stack))
          case (Some(fhirUrl), Some("Patient.Communication")) => Right(scalaxb.fromXML[Patientu46Communication](node, stack))
          case (Some(fhirUrl), Some("Patient.Contact")) => Right(scalaxb.fromXML[Patientu46Contact](node, stack))
          case (Some(fhirUrl), Some("Parameters.Parameter")) => Right(scalaxb.fromXML[Parametersu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Organization.Contact")) => Right(scalaxb.fromXML[Organizationu46Contact](node, stack))
          case (Some(fhirUrl), Some("OperationOutcome.Issue")) => Right(scalaxb.fromXML[OperationOutcomeu46Issue](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Overload")) => Right(scalaxb.fromXML[OperationDefinitionu46Overload](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Parameter")) => Right(scalaxb.fromXML[OperationDefinitionu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Observation.Component")) => Right(scalaxb.fromXML[Observationu46Component](node, stack))
          case (Some(fhirUrl), Some("Observation.ReferenceRange")) => Right(scalaxb.fromXML[Observationu46ReferenceRange](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Administration")) => Right(scalaxb.fromXML[NutritionOrderu46Administration](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Supplement")) => Right(scalaxb.fromXML[NutritionOrderu46Supplement](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Nutrient")) => Right(scalaxb.fromXML[NutritionOrderu46Nutrient](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Source")) => Right(scalaxb.fromXML[MessageHeaderu46Source](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition.Focus")) => Right(scalaxb.fromXML[MessageDefinitionu46Focus](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.DispenseRequest")) => Right(scalaxb.fromXML[MedicationRequestu46DispenseRequest](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense.Performer")) => Right(scalaxb.fromXML[MedicationDispenseu46Performer](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration.Dosage")) => Right(scalaxb.fromXML[MedicationAdministrationu46Dosage](node, stack))
          case (Some(fhirUrl), Some("Medication.Content")) => Right(scalaxb.fromXML[Medicationu46Content](node, stack))
          case (Some(fhirUrl), Some("Medication.Ingredient")) => Right(scalaxb.fromXML[Medicationu46Ingredient](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Stratum")) => Right(scalaxb.fromXML[MeasureReportu46Stratum](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Population")) => Right(scalaxb.fromXML[MeasureReportu46Population](node, stack))
          case (Some(fhirUrl), Some("Measure.Stratifier")) => Right(scalaxb.fromXML[Measureu46Stratifier](node, stack))
          case (Some(fhirUrl), Some("Measure.Group")) => Right(scalaxb.fromXML[Measureu46Group](node, stack))
          case (Some(fhirUrl), Some("Location.Position")) => Right(scalaxb.fromXML[Locationu46Position](node, stack))
          case (Some(fhirUrl), Some("List.Entry")) => Right(scalaxb.fromXML[Listu46Entry](node, stack))
          case (Some(fhirUrl), Some("Linkage.Item")) => Right(scalaxb.fromXML[Linkageu46Item](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Global")) => Right(scalaxb.fromXML[ImplementationGuideu46Global](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Package")) => Right(scalaxb.fromXML[ImplementationGuideu46Package](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.DateCriterion")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46DateCriterion](node, stack))
          case (Some(fhirUrl), Some("Immunization.Reaction")) => Right(scalaxb.fromXML[Immunizationu46Reaction](node, stack))
          case (Some(fhirUrl), Some("Immunization.Practitioner")) => Right(scalaxb.fromXML[Immunizationu46Practitioner](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy.Instance")) => Right(scalaxb.fromXML[ImagingStudyu46Instance](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Series")) => Right(scalaxb.fromXML[ImagingManifestu46Series](node, stack))
          case (Some(fhirUrl), Some("HealthcareService.AvailableTime")) => Right(scalaxb.fromXML[HealthcareServiceu46AvailableTime](node, stack))
          case (Some(fhirUrl), Some("Group.Characteristic")) => Right(scalaxb.fromXML[Groupu46Characteristic](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Compartment")) => Right(scalaxb.fromXML[GraphDefinitionu46Compartment](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Link")) => Right(scalaxb.fromXML[GraphDefinitionu46Link](node, stack))
          case (Some(fhirUrl), Some("Goal.Target")) => Right(scalaxb.fromXML[Goalu46Target](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.BenefitBalance")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46BenefitBalance](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Payment")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Payment](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.AddItem")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46AddItem](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Detail")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Detail](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Item")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Item](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Insurance")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Insurance](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Diagnosis")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Information")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Information](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Related")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Related](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation2")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation2](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation1")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation1](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.FixedVersion")) => Right(scalaxb.fromXML[ExpansionProfileu46FixedVersion](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare.Diagnosis")) => Right(scalaxb.fromXML[EpisodeOfCareu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Encounter.Location")) => Right(scalaxb.fromXML[Encounteru46Location](node, stack))
          case (Some(fhirUrl), Some("Encounter.Diagnosis")) => Right(scalaxb.fromXML[Encounteru46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Encounter.ClassHistory")) => Right(scalaxb.fromXML[Encounteru46ClassHistory](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Financial")) => Right(scalaxb.fromXML[EligibilityResponseu46Financial](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Insurance")) => Right(scalaxb.fromXML[EligibilityResponseu46Insurance](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Context")) => Right(scalaxb.fromXML[DocumentReferenceu46Context](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.RelatesTo")) => Right(scalaxb.fromXML[DocumentReferenceu46RelatesTo](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest.Related")) => Right(scalaxb.fromXML[DocumentManifestu46Related](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport.Performer")) => Right(scalaxb.fromXML[DiagnosticReportu46Performer](node, stack))
          case (Some(fhirUrl), Some("Contract.Legal")) => Right(scalaxb.fromXML[Contractu46Legal](node, stack))
          case (Some(fhirUrl), Some("Contract.ValuedItem1")) => Right(scalaxb.fromXML[Contractu46ValuedItem1](node, stack))
          case (Some(fhirUrl), Some("Contract.Term")) => Right(scalaxb.fromXML[Contractu46Term](node, stack))
          case (Some(fhirUrl), Some("Contract.Signer")) => Right(scalaxb.fromXML[Contractu46Signer](node, stack))
          case (Some(fhirUrl), Some("Consent.Actor1")) => Right(scalaxb.fromXML[Consentu46Actor1](node, stack))
          case (Some(fhirUrl), Some("Consent.Data")) => Right(scalaxb.fromXML[Consentu46Data](node, stack))
          case (Some(fhirUrl), Some("Consent.Actor")) => Right(scalaxb.fromXML[Consentu46Actor](node, stack))
          case (Some(fhirUrl), Some("Condition.Evidence")) => Right(scalaxb.fromXML[Conditionu46Evidence](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.DependsOn")) => Right(scalaxb.fromXML[ConceptMapu46DependsOn](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Element")) => Right(scalaxb.fromXML[ConceptMapu46Element](node, stack))
          case (Some(fhirUrl), Some("Composition.Event")) => Right(scalaxb.fromXML[Compositionu46Event](node, stack))
          case (Some(fhirUrl), Some("Composition.Attester")) => Right(scalaxb.fromXML[Compositionu46Attester](node, stack))
          case (Some(fhirUrl), Some("CompartmentDefinition.Resource")) => Right(scalaxb.fromXML[CompartmentDefinitionu46Resource](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest.Requester")) => Right(scalaxb.fromXML[CommunicationRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Designation")) => Right(scalaxb.fromXML[CodeSystemu46Designation](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Property")) => Right(scalaxb.fromXML[CodeSystemu46Property](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression.Investigation")) => Right(scalaxb.fromXML[ClinicalImpressionu46Investigation](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Insurance")) => Right(scalaxb.fromXML[ClaimResponseu46Insurance](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Payment")) => Right(scalaxb.fromXML[ClaimResponseu46Payment](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Detail1")) => Right(scalaxb.fromXML[ClaimResponseu46Detail1](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.SubDetail")) => Right(scalaxb.fromXML[ClaimResponseu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Adjudication")) => Right(scalaxb.fromXML[ClaimResponseu46Adjudication](node, stack))
          case (Some(fhirUrl), Some("Claim.Detail")) => Right(scalaxb.fromXML[Claimu46Detail](node, stack))
          case (Some(fhirUrl), Some("Claim.Accident")) => Right(scalaxb.fromXML[Claimu46Accident](node, stack))
          case (Some(fhirUrl), Some("Claim.Procedure")) => Right(scalaxb.fromXML[Claimu46Procedure](node, stack))
          case (Some(fhirUrl), Some("Claim.Information")) => Right(scalaxb.fromXML[Claimu46Information](node, stack))
          case (Some(fhirUrl), Some("Claim.Payee")) => Right(scalaxb.fromXML[Claimu46Payee](node, stack))
          case (Some(fhirUrl), Some("CarePlan.Activity")) => Right(scalaxb.fromXML[CarePlanu46Activity](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Document")) => Right(scalaxb.fromXML[CapabilityStatementu46Document](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.SupportedMessage")) => Right(scalaxb.fromXML[CapabilityStatementu46SupportedMessage](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Messaging")) => Right(scalaxb.fromXML[CapabilityStatementu46Messaging](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Interaction1")) => Right(scalaxb.fromXML[CapabilityStatementu46Interaction1](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Interaction")) => Right(scalaxb.fromXML[CapabilityStatementu46Interaction](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Certificate")) => Right(scalaxb.fromXML[CapabilityStatementu46Certificate](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Rest")) => Right(scalaxb.fromXML[CapabilityStatementu46Rest](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Software")) => Right(scalaxb.fromXML[CapabilityStatementu46Software](node, stack))
          case (Some(fhirUrl), Some("Bundle.Response")) => Right(scalaxb.fromXML[Bundleu46Response](node, stack))
          case (Some(fhirUrl), Some("Bundle.Search")) => Right(scalaxb.fromXML[Bundleu46Search](node, stack))
          case (Some(fhirUrl), Some("Bundle.Link")) => Right(scalaxb.fromXML[Bundleu46Link](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Entity")) => Right(scalaxb.fromXML[AuditEventu46Entity](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Network")) => Right(scalaxb.fromXML[AuditEventu46Network](node, stack))
          case (Some(fhirUrl), Some("Appointment.Participant")) => Right(scalaxb.fromXML[Appointmentu46Participant](node, stack))
          case (Some(fhirUrl), Some("AllergyIntolerance.Reaction")) => Right(scalaxb.fromXML[AllergyIntoleranceu46Reaction](node, stack))
          case (Some(fhirUrl), Some("AdverseEvent.SuspectEntity")) => Right(scalaxb.fromXML[AdverseEventu46SuspectEntity](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition.DynamicValue")) => Right(scalaxb.fromXML[ActivityDefinitionu46DynamicValue](node, stack))
          case (Some(fhirUrl), Some("Account.Coverage")) => Right(scalaxb.fromXML[Accountu46Coverage](node, stack))
          case (Some(fhirUrl), Some("Account.Guarantor")) => Right(scalaxb.fromXML[Accountu46Guarantor](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition.Participant")) => Right(scalaxb.fromXML[ActivityDefinitionu46Participant](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Agent")) => Right(scalaxb.fromXML[AuditEventu46Agent](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Source")) => Right(scalaxb.fromXML[AuditEventu46Source](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Detail")) => Right(scalaxb.fromXML[AuditEventu46Detail](node, stack))
          case (Some(fhirUrl), Some("Bundle.Entry")) => Right(scalaxb.fromXML[Bundleu46Entry](node, stack))
          case (Some(fhirUrl), Some("Bundle.Request")) => Right(scalaxb.fromXML[Bundleu46Request](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Implementation")) => Right(scalaxb.fromXML[CapabilityStatementu46Implementation](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Security")) => Right(scalaxb.fromXML[CapabilityStatementu46Security](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Resource")) => Right(scalaxb.fromXML[CapabilityStatementu46Resource](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.SearchParam")) => Right(scalaxb.fromXML[CapabilityStatementu46SearchParam](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Operation")) => Right(scalaxb.fromXML[CapabilityStatementu46Operation](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Endpoint")) => Right(scalaxb.fromXML[CapabilityStatementu46Endpoint](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Event")) => Right(scalaxb.fromXML[CapabilityStatementu46Event](node, stack))
          case (Some(fhirUrl), Some("CarePlan.Detail")) => Right(scalaxb.fromXML[CarePlanu46Detail](node, stack))
          case (Some(fhirUrl), Some("CareTeam.Participant")) => Right(scalaxb.fromXML[CareTeamu46Participant](node, stack))
          case (Some(fhirUrl), Some("ChargeItem.Participant")) => Right(scalaxb.fromXML[ChargeItemu46Participant](node, stack))
          case (Some(fhirUrl), Some("Claim.Related")) => Right(scalaxb.fromXML[Claimu46Related](node, stack))
          case (Some(fhirUrl), Some("Claim.CareTeam")) => Right(scalaxb.fromXML[Claimu46CareTeam](node, stack))
          case (Some(fhirUrl), Some("Claim.Diagnosis")) => Right(scalaxb.fromXML[Claimu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Claim.Insurance")) => Right(scalaxb.fromXML[Claimu46Insurance](node, stack))
          case (Some(fhirUrl), Some("Claim.Item")) => Right(scalaxb.fromXML[Claimu46Item](node, stack))
          case (Some(fhirUrl), Some("Claim.SubDetail")) => Right(scalaxb.fromXML[Claimu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Item")) => Right(scalaxb.fromXML[ClaimResponseu46Item](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Detail")) => Right(scalaxb.fromXML[ClaimResponseu46Detail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.AddItem")) => Right(scalaxb.fromXML[ClaimResponseu46AddItem](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Error")) => Right(scalaxb.fromXML[ClaimResponseu46Error](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.ProcessNote")) => Right(scalaxb.fromXML[ClaimResponseu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression.Finding")) => Right(scalaxb.fromXML[ClinicalImpressionu46Finding](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Filter")) => Right(scalaxb.fromXML[CodeSystemu46Filter](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Concept")) => Right(scalaxb.fromXML[CodeSystemu46Concept](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Property1")) => Right(scalaxb.fromXML[CodeSystemu46Property1](node, stack))
          case (Some(fhirUrl), Some("Communication.Payload")) => Right(scalaxb.fromXML[Communicationu46Payload](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest.Payload")) => Right(scalaxb.fromXML[CommunicationRequestu46Payload](node, stack))
          case (Some(fhirUrl), Some("Composition.RelatesTo")) => Right(scalaxb.fromXML[Compositionu46RelatesTo](node, stack))
          case (Some(fhirUrl), Some("Composition.Section")) => Right(scalaxb.fromXML[Compositionu46Section](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Group")) => Right(scalaxb.fromXML[ConceptMapu46Group](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Target")) => Right(scalaxb.fromXML[ConceptMapu46Target](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Unmapped")) => Right(scalaxb.fromXML[ConceptMapu46Unmapped](node, stack))
          case (Some(fhirUrl), Some("Condition.Stage")) => Right(scalaxb.fromXML[Conditionu46Stage](node, stack))
          case (Some(fhirUrl), Some("Consent.Policy")) => Right(scalaxb.fromXML[Consentu46Policy](node, stack))
          case (Some(fhirUrl), Some("Consent.Except")) => Right(scalaxb.fromXML[Consentu46Except](node, stack))
          case (Some(fhirUrl), Some("Consent.Data1")) => Right(scalaxb.fromXML[Consentu46Data1](node, stack))
          case (Some(fhirUrl), Some("Contract.Agent")) => Right(scalaxb.fromXML[Contractu46Agent](node, stack))
          case (Some(fhirUrl), Some("Contract.ValuedItem")) => Right(scalaxb.fromXML[Contractu46ValuedItem](node, stack))
          case (Some(fhirUrl), Some("Contract.Agent1")) => Right(scalaxb.fromXML[Contractu46Agent1](node, stack))
          case (Some(fhirUrl), Some("Contract.Friendly")) => Right(scalaxb.fromXML[Contractu46Friendly](node, stack))
          case (Some(fhirUrl), Some("Contract.Rule")) => Right(scalaxb.fromXML[Contractu46Rule](node, stack))
          case (Some(fhirUrl), Some("Coverage.Grouping")) => Right(scalaxb.fromXML[Coverageu46Grouping](node, stack))
          case (Some(fhirUrl), Some("DataElement.Mapping")) => Right(scalaxb.fromXML[DataElementu46Mapping](node, stack))
          case (Some(fhirUrl), Some("DetectedIssue.Mitigation")) => Right(scalaxb.fromXML[DetectedIssueu46Mitigation](node, stack))
          case (Some(fhirUrl), Some("Device.Udi")) => Right(scalaxb.fromXML[Deviceu46Udi](node, stack))
          case (Some(fhirUrl), Some("DeviceComponent.ProductionSpecification")) => Right(scalaxb.fromXML[DeviceComponentu46ProductionSpecification](node, stack))
          case (Some(fhirUrl), Some("DeviceMetric.Calibration")) => Right(scalaxb.fromXML[DeviceMetricu46Calibration](node, stack))
          case (Some(fhirUrl), Some("DeviceRequest.Requester")) => Right(scalaxb.fromXML[DeviceRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport.Image")) => Right(scalaxb.fromXML[DiagnosticReportu46Image](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest.Content")) => Right(scalaxb.fromXML[DocumentManifestu46Content](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Content")) => Right(scalaxb.fromXML[DocumentReferenceu46Content](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Related")) => Right(scalaxb.fromXML[DocumentReferenceu46Related](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.BenefitBalance")) => Right(scalaxb.fromXML[EligibilityResponseu46BenefitBalance](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Error")) => Right(scalaxb.fromXML[EligibilityResponseu46Error](node, stack))
          case (Some(fhirUrl), Some("Encounter.StatusHistory")) => Right(scalaxb.fromXML[Encounteru46StatusHistory](node, stack))
          case (Some(fhirUrl), Some("Encounter.Participant")) => Right(scalaxb.fromXML[Encounteru46Participant](node, stack))
          case (Some(fhirUrl), Some("Encounter.Hospitalization")) => Right(scalaxb.fromXML[Encounteru46Hospitalization](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare.StatusHistory")) => Right(scalaxb.fromXML[EpisodeOfCareu46StatusHistory](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.ExcludedSystem")) => Right(scalaxb.fromXML[ExpansionProfileu46ExcludedSystem](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Include")) => Right(scalaxb.fromXML[ExpansionProfileu46Include](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Exclude")) => Right(scalaxb.fromXML[ExpansionProfileu46Exclude](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Payee")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Payee](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.CareTeam")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46CareTeam](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Procedure")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Procedure](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Accident")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Accident](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Adjudication")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.SubDetail")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Detail1")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Detail1](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.ProcessNote")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Financial")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Financial](node, stack))
          case (Some(fhirUrl), Some("FamilyMemberHistory.Condition")) => Right(scalaxb.fromXML[FamilyMemberHistoryu46Condition](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Target")) => Right(scalaxb.fromXML[GraphDefinitionu46Target](node, stack))
          case (Some(fhirUrl), Some("Group.Member")) => Right(scalaxb.fromXML[Groupu46Member](node, stack))
          case (Some(fhirUrl), Some("HealthcareService.NotAvailable")) => Right(scalaxb.fromXML[HealthcareServiceu46NotAvailable](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Study")) => Right(scalaxb.fromXML[ImagingManifestu46Study](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Instance")) => Right(scalaxb.fromXML[ImagingManifestu46Instance](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy.Series")) => Right(scalaxb.fromXML[ImagingStudyu46Series](node, stack))
          case (Some(fhirUrl), Some("Immunization.Explanation")) => Right(scalaxb.fromXML[Immunizationu46Explanation](node, stack))
          case (Some(fhirUrl), Some("Immunization.VaccinationProtocol")) => Right(scalaxb.fromXML[Immunizationu46VaccinationProtocol](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.Recommendation")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46Recommendation](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.Protocol")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46Protocol](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Dependency")) => Right(scalaxb.fromXML[ImplementationGuideu46Dependency](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Resource")) => Right(scalaxb.fromXML[ImplementationGuideu46Resource](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Page")) => Right(scalaxb.fromXML[ImplementationGuideu46Page](node, stack))
          case (Some(fhirUrl), Some("Measure.Population")) => Right(scalaxb.fromXML[Measureu46Population](node, stack))
          case (Some(fhirUrl), Some("Measure.SupplementalData")) => Right(scalaxb.fromXML[Measureu46SupplementalData](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Group")) => Right(scalaxb.fromXML[MeasureReportu46Group](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Stratifier")) => Right(scalaxb.fromXML[MeasureReportu46Stratifier](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Population1")) => Right(scalaxb.fromXML[MeasureReportu46Population1](node, stack))
          case (Some(fhirUrl), Some("Medication.Package")) => Right(scalaxb.fromXML[Medicationu46Package](node, stack))
          case (Some(fhirUrl), Some("Medication.Batch")) => Right(scalaxb.fromXML[Medicationu46Batch](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration.Performer")) => Right(scalaxb.fromXML[MedicationAdministrationu46Performer](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense.Substitution")) => Right(scalaxb.fromXML[MedicationDispenseu46Substitution](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.Requester")) => Right(scalaxb.fromXML[MedicationRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.Substitution")) => Right(scalaxb.fromXML[MedicationRequestu46Substitution](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition.AllowedResponse")) => Right(scalaxb.fromXML[MessageDefinitionu46AllowedResponse](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Destination")) => Right(scalaxb.fromXML[MessageHeaderu46Destination](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Response")) => Right(scalaxb.fromXML[MessageHeaderu46Response](node, stack))
          case (Some(fhirUrl), Some("NamingSystem.UniqueId")) => Right(scalaxb.fromXML[NamingSystemu46UniqueId](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.OralDiet")) => Right(scalaxb.fromXML[NutritionOrderu46OralDiet](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Texture")) => Right(scalaxb.fromXML[NutritionOrderu46Texture](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.EnteralFormula")) => Right(scalaxb.fromXML[NutritionOrderu46EnteralFormula](node, stack))
          case (Some(fhirUrl), Some("Observation.Related")) => Right(scalaxb.fromXML[Observationu46Related](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Binding")) => Right(scalaxb.fromXML[OperationDefinitionu46Binding](node, stack))
          case (Some(fhirUrl), Some("Patient.Animal")) => Right(scalaxb.fromXML[Patientu46Animal](node, stack))
          case (Some(fhirUrl), Some("Patient.Link")) => Right(scalaxb.fromXML[Patientu46Link](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation.ProcessNote")) => Right(scalaxb.fromXML[PaymentReconciliationu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("Person.Link")) => Right(scalaxb.fromXML[Personu46Link](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Goal")) => Right(scalaxb.fromXML[PlanDefinitionu46Goal](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Action")) => Right(scalaxb.fromXML[PlanDefinitionu46Action](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.RelatedAction")) => Right(scalaxb.fromXML[PlanDefinitionu46RelatedAction](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.DynamicValue")) => Right(scalaxb.fromXML[PlanDefinitionu46DynamicValue](node, stack))
          case (Some(fhirUrl), Some("Practitioner.Qualification")) => Right(scalaxb.fromXML[Practitioneru46Qualification](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole.AvailableTime")) => Right(scalaxb.fromXML[PractitionerRoleu46AvailableTime](node, stack))
          case (Some(fhirUrl), Some("Procedure.FocalDevice")) => Right(scalaxb.fromXML[Procedureu46FocalDevice](node, stack))
          case (Some(fhirUrl), Some("ProcedureRequest.Requester")) => Right(scalaxb.fromXML[ProcedureRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("ProcessRequest.Item")) => Right(scalaxb.fromXML[ProcessRequestu46Item](node, stack))
          case (Some(fhirUrl), Some("ProcessResponse.ProcessNote")) => Right(scalaxb.fromXML[ProcessResponseu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("Provenance.Agent")) => Right(scalaxb.fromXML[Provenanceu46Agent](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.EnableWhen")) => Right(scalaxb.fromXML[Questionnaireu46EnableWhen](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse.Answer")) => Right(scalaxb.fromXML[QuestionnaireResponseu46Answer](node, stack))
          case (Some(fhirUrl), Some("ReferralRequest.Requester")) => Right(scalaxb.fromXML[ReferralRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.Condition")) => Right(scalaxb.fromXML[RequestGroupu46Condition](node, stack))
          case (Some(fhirUrl), Some("RiskAssessment.Prediction")) => Right(scalaxb.fromXML[RiskAssessmentu46Prediction](node, stack))
          case (Some(fhirUrl), Some("Sequence.Variant")) => Right(scalaxb.fromXML[Sequenceu46Variant](node, stack))
          case (Some(fhirUrl), Some("Sequence.Repository")) => Right(scalaxb.fromXML[Sequenceu46Repository](node, stack))
          case (Some(fhirUrl), Some("Specimen.Collection")) => Right(scalaxb.fromXML[Specimenu46Collection](node, stack))
          case (Some(fhirUrl), Some("Specimen.Container")) => Right(scalaxb.fromXML[Specimenu46Container](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Mapping")) => Right(scalaxb.fromXML[StructureDefinitionu46Mapping](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Differential")) => Right(scalaxb.fromXML[StructureDefinitionu46Differential](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Structure")) => Right(scalaxb.fromXML[StructureMapu46Structure](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Input")) => Right(scalaxb.fromXML[StructureMapu46Input](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Source")) => Right(scalaxb.fromXML[StructureMapu46Source](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Parameter")) => Right(scalaxb.fromXML[StructureMapu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Substance.Ingredient")) => Right(scalaxb.fromXML[Substanceu46Ingredient](node, stack))
          case (Some(fhirUrl), Some("SupplyDelivery.SuppliedItem")) => Right(scalaxb.fromXML[SupplyDeliveryu46SuppliedItem](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest.OrderedItem")) => Right(scalaxb.fromXML[SupplyRequestu46OrderedItem](node, stack))
          case (Some(fhirUrl), Some("Task.Restriction")) => Right(scalaxb.fromXML[Tasku46Restriction](node, stack))
          case (Some(fhirUrl), Some("Task.Output")) => Right(scalaxb.fromXML[Tasku46Output](node, stack))
          case (Some(fhirUrl), Some("TestReport.Participant")) => Right(scalaxb.fromXML[TestReportu46Participant](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action")) => Right(scalaxb.fromXML[TestReportu46Action](node, stack))
          case (Some(fhirUrl), Some("TestReport.Assert")) => Right(scalaxb.fromXML[TestReportu46Assert](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action1")) => Right(scalaxb.fromXML[TestReportu46Action1](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action2")) => Right(scalaxb.fromXML[TestReportu46Action2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Origin")) => Right(scalaxb.fromXML[TestScriptu46Origin](node, stack))
          case (Some(fhirUrl), Some("TestScript.Metadata")) => Right(scalaxb.fromXML[TestScriptu46Metadata](node, stack))
          case (Some(fhirUrl), Some("TestScript.Capability")) => Right(scalaxb.fromXML[TestScriptu46Capability](node, stack))
          case (Some(fhirUrl), Some("TestScript.Variable")) => Right(scalaxb.fromXML[TestScriptu46Variable](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param")) => Right(scalaxb.fromXML[TestScriptu46Param](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule1")) => Right(scalaxb.fromXML[TestScriptu46Rule1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Setup")) => Right(scalaxb.fromXML[TestScriptu46Setup](node, stack))
          case (Some(fhirUrl), Some("TestScript.Operation")) => Right(scalaxb.fromXML[TestScriptu46Operation](node, stack))
          case (Some(fhirUrl), Some("TestScript.Assert")) => Right(scalaxb.fromXML[TestScriptu46Assert](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param2")) => Right(scalaxb.fromXML[TestScriptu46Param2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule3")) => Right(scalaxb.fromXML[TestScriptu46Rule3](node, stack))
          case (Some(fhirUrl), Some("TestScript.Test")) => Right(scalaxb.fromXML[TestScriptu46Test](node, stack))
          case (Some(fhirUrl), Some("TestScript.Teardown")) => Right(scalaxb.fromXML[TestScriptu46Teardown](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Include")) => Right(scalaxb.fromXML[ValueSetu46Include](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Designation")) => Right(scalaxb.fromXML[ValueSetu46Designation](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Expansion")) => Right(scalaxb.fromXML[ValueSetu46Expansion](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Contains")) => Right(scalaxb.fromXML[ValueSetu46Contains](node, stack))
          case (Some(fhirUrl), Some("VisionPrescription.Dispense")) => Right(scalaxb.fromXML[VisionPrescriptionu46Dispense](node, stack))
          case _ => Right(scalaxb.fromXML[BackboneElementType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: BackboneElementable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ValueSetu46Parameter => scalaxb.toXML[ValueSetu46Parameter](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Filter => scalaxb.toXML[ValueSetu46Filter](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Concept => scalaxb.toXML[ValueSetu46Concept](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Compose => scalaxb.toXML[ValueSetu46Compose](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Action2 => scalaxb.toXML[TestScriptu46Action2](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Action1 => scalaxb.toXML[TestScriptu46Action1](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Param3 => scalaxb.toXML[TestScriptu46Param3](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Ruleset1 => scalaxb.toXML[TestScriptu46Ruleset1](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Rule2 => scalaxb.toXML[TestScriptu46Rule2](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46RequestHeader => scalaxb.toXML[TestScriptu46RequestHeader](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Action => scalaxb.toXML[TestScriptu46Action](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Param1 => scalaxb.toXML[TestScriptu46Param1](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Ruleset => scalaxb.toXML[TestScriptu46Ruleset](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Rule => scalaxb.toXML[TestScriptu46Rule](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Fixture => scalaxb.toXML[TestScriptu46Fixture](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Link => scalaxb.toXML[TestScriptu46Link](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Destination => scalaxb.toXML[TestScriptu46Destination](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Teardown => scalaxb.toXML[TestReportu46Teardown](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Test => scalaxb.toXML[TestReportu46Test](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Operation => scalaxb.toXML[TestReportu46Operation](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Setup => scalaxb.toXML[TestReportu46Setup](x, __namespace, __elementLabel, __scope, true)
      case x: Tasku46Input => scalaxb.toXML[Tasku46Input](x, __namespace, __elementLabel, __scope, true)
      case x: Tasku46Requester => scalaxb.toXML[Tasku46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyRequestu46Requester => scalaxb.toXML[SupplyRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: Substanceu46Instance => scalaxb.toXML[Substanceu46Instance](x, __namespace, __elementLabel, __scope, true)
      case x: Subscriptionu46Channel => scalaxb.toXML[Subscriptionu46Channel](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Dependent => scalaxb.toXML[StructureMapu46Dependent](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Target => scalaxb.toXML[StructureMapu46Target](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Rule => scalaxb.toXML[StructureMapu46Rule](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Group => scalaxb.toXML[StructureMapu46Group](x, __namespace, __elementLabel, __scope, true)
      case x: StructureDefinitionu46Snapshot => scalaxb.toXML[StructureDefinitionu46Snapshot](x, __namespace, __elementLabel, __scope, true)
      case x: Specimenu46Processing => scalaxb.toXML[Specimenu46Processing](x, __namespace, __elementLabel, __scope, true)
      case x: Sequenceu46Quality => scalaxb.toXML[Sequenceu46Quality](x, __namespace, __elementLabel, __scope, true)
      case x: Sequenceu46ReferenceSeq => scalaxb.toXML[Sequenceu46ReferenceSeq](x, __namespace, __elementLabel, __scope, true)
      case x: SearchParameteru46Component => scalaxb.toXML[SearchParameteru46Component](x, __namespace, __elementLabel, __scope, true)
      case x: ResearchStudyu46Arm => scalaxb.toXML[ResearchStudyu46Arm](x, __namespace, __elementLabel, __scope, true)
      case x: RequestGroupu46RelatedAction => scalaxb.toXML[RequestGroupu46RelatedAction](x, __namespace, __elementLabel, __scope, true)
      case x: RequestGroupu46Action => scalaxb.toXML[RequestGroupu46Action](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireResponseu46Item => scalaxb.toXML[QuestionnaireResponseu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: Questionnaireu46Option => scalaxb.toXML[Questionnaireu46Option](x, __namespace, __elementLabel, __scope, true)
      case x: Questionnaireu46Item => scalaxb.toXML[Questionnaireu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: Provenanceu46Entity => scalaxb.toXML[Provenanceu46Entity](x, __namespace, __elementLabel, __scope, true)
      case x: Procedureu46Performer => scalaxb.toXML[Procedureu46Performer](x, __namespace, __elementLabel, __scope, true)
      case x: PractitionerRoleu46NotAvailable => scalaxb.toXML[PractitionerRoleu46NotAvailable](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46Participant => scalaxb.toXML[PlanDefinitionu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46Condition => scalaxb.toXML[PlanDefinitionu46Condition](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46Target => scalaxb.toXML[PlanDefinitionu46Target](x, __namespace, __elementLabel, __scope, true)
      case x: PaymentReconciliationu46Detail => scalaxb.toXML[PaymentReconciliationu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: Patientu46Communication => scalaxb.toXML[Patientu46Communication](x, __namespace, __elementLabel, __scope, true)
      case x: Patientu46Contact => scalaxb.toXML[Patientu46Contact](x, __namespace, __elementLabel, __scope, true)
      case x: Parametersu46Parameter => scalaxb.toXML[Parametersu46Parameter](x, __namespace, __elementLabel, __scope, true)
      case x: Organizationu46Contact => scalaxb.toXML[Organizationu46Contact](x, __namespace, __elementLabel, __scope, true)
      case x: OperationOutcomeu46Issue => scalaxb.toXML[OperationOutcomeu46Issue](x, __namespace, __elementLabel, __scope, true)
      case x: OperationDefinitionu46Overload => scalaxb.toXML[OperationDefinitionu46Overload](x, __namespace, __elementLabel, __scope, true)
      case x: OperationDefinitionu46Parameter => scalaxb.toXML[OperationDefinitionu46Parameter](x, __namespace, __elementLabel, __scope, true)
      case x: Observationu46Component => scalaxb.toXML[Observationu46Component](x, __namespace, __elementLabel, __scope, true)
      case x: Observationu46ReferenceRange => scalaxb.toXML[Observationu46ReferenceRange](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46Administration => scalaxb.toXML[NutritionOrderu46Administration](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46Supplement => scalaxb.toXML[NutritionOrderu46Supplement](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46Nutrient => scalaxb.toXML[NutritionOrderu46Nutrient](x, __namespace, __elementLabel, __scope, true)
      case x: MessageHeaderu46Source => scalaxb.toXML[MessageHeaderu46Source](x, __namespace, __elementLabel, __scope, true)
      case x: MessageDefinitionu46Focus => scalaxb.toXML[MessageDefinitionu46Focus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestu46DispenseRequest => scalaxb.toXML[MedicationRequestu46DispenseRequest](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationDispenseu46Performer => scalaxb.toXML[MedicationDispenseu46Performer](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationAdministrationu46Dosage => scalaxb.toXML[MedicationAdministrationu46Dosage](x, __namespace, __elementLabel, __scope, true)
      case x: Medicationu46Content => scalaxb.toXML[Medicationu46Content](x, __namespace, __elementLabel, __scope, true)
      case x: Medicationu46Ingredient => scalaxb.toXML[Medicationu46Ingredient](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportu46Stratum => scalaxb.toXML[MeasureReportu46Stratum](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportu46Population => scalaxb.toXML[MeasureReportu46Population](x, __namespace, __elementLabel, __scope, true)
      case x: Measureu46Stratifier => scalaxb.toXML[Measureu46Stratifier](x, __namespace, __elementLabel, __scope, true)
      case x: Measureu46Group => scalaxb.toXML[Measureu46Group](x, __namespace, __elementLabel, __scope, true)
      case x: Locationu46Position => scalaxb.toXML[Locationu46Position](x, __namespace, __elementLabel, __scope, true)
      case x: Listu46Entry => scalaxb.toXML[Listu46Entry](x, __namespace, __elementLabel, __scope, true)
      case x: Linkageu46Item => scalaxb.toXML[Linkageu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideu46Global => scalaxb.toXML[ImplementationGuideu46Global](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideu46Package => scalaxb.toXML[ImplementationGuideu46Package](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationRecommendationu46DateCriterion => scalaxb.toXML[ImmunizationRecommendationu46DateCriterion](x, __namespace, __elementLabel, __scope, true)
      case x: Immunizationu46Reaction => scalaxb.toXML[Immunizationu46Reaction](x, __namespace, __elementLabel, __scope, true)
      case x: Immunizationu46Practitioner => scalaxb.toXML[Immunizationu46Practitioner](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingStudyu46Instance => scalaxb.toXML[ImagingStudyu46Instance](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingManifestu46Series => scalaxb.toXML[ImagingManifestu46Series](x, __namespace, __elementLabel, __scope, true)
      case x: HealthcareServiceu46AvailableTime => scalaxb.toXML[HealthcareServiceu46AvailableTime](x, __namespace, __elementLabel, __scope, true)
      case x: Groupu46Characteristic => scalaxb.toXML[Groupu46Characteristic](x, __namespace, __elementLabel, __scope, true)
      case x: GraphDefinitionu46Compartment => scalaxb.toXML[GraphDefinitionu46Compartment](x, __namespace, __elementLabel, __scope, true)
      case x: GraphDefinitionu46Link => scalaxb.toXML[GraphDefinitionu46Link](x, __namespace, __elementLabel, __scope, true)
      case x: Goalu46Target => scalaxb.toXML[Goalu46Target](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46BenefitBalance => scalaxb.toXML[ExplanationOfBenefitu46BenefitBalance](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Payment => scalaxb.toXML[ExplanationOfBenefitu46Payment](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46AddItem => scalaxb.toXML[ExplanationOfBenefitu46AddItem](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Detail => scalaxb.toXML[ExplanationOfBenefitu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Item => scalaxb.toXML[ExplanationOfBenefitu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Insurance => scalaxb.toXML[ExplanationOfBenefitu46Insurance](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Diagnosis => scalaxb.toXML[ExplanationOfBenefitu46Diagnosis](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Information => scalaxb.toXML[ExplanationOfBenefitu46Information](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Related => scalaxb.toXML[ExplanationOfBenefitu46Related](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46Designation2 => scalaxb.toXML[ExpansionProfileu46Designation2](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46Designation1 => scalaxb.toXML[ExpansionProfileu46Designation1](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46Designation => scalaxb.toXML[ExpansionProfileu46Designation](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46FixedVersion => scalaxb.toXML[ExpansionProfileu46FixedVersion](x, __namespace, __elementLabel, __scope, true)
      case x: EpisodeOfCareu46Diagnosis => scalaxb.toXML[EpisodeOfCareu46Diagnosis](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46Location => scalaxb.toXML[Encounteru46Location](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46Diagnosis => scalaxb.toXML[Encounteru46Diagnosis](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46ClassHistory => scalaxb.toXML[Encounteru46ClassHistory](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityResponseu46Financial => scalaxb.toXML[EligibilityResponseu46Financial](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityResponseu46Insurance => scalaxb.toXML[EligibilityResponseu46Insurance](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceu46Context => scalaxb.toXML[DocumentReferenceu46Context](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceu46RelatesTo => scalaxb.toXML[DocumentReferenceu46RelatesTo](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentManifestu46Related => scalaxb.toXML[DocumentManifestu46Related](x, __namespace, __elementLabel, __scope, true)
      case x: DiagnosticReportu46Performer => scalaxb.toXML[DiagnosticReportu46Performer](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Legal => scalaxb.toXML[Contractu46Legal](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46ValuedItem1 => scalaxb.toXML[Contractu46ValuedItem1](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Term => scalaxb.toXML[Contractu46Term](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Signer => scalaxb.toXML[Contractu46Signer](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Actor1 => scalaxb.toXML[Consentu46Actor1](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Data => scalaxb.toXML[Consentu46Data](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Actor => scalaxb.toXML[Consentu46Actor](x, __namespace, __elementLabel, __scope, true)
      case x: Conditionu46Evidence => scalaxb.toXML[Conditionu46Evidence](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapu46DependsOn => scalaxb.toXML[ConceptMapu46DependsOn](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapu46Element => scalaxb.toXML[ConceptMapu46Element](x, __namespace, __elementLabel, __scope, true)
      case x: Compositionu46Event => scalaxb.toXML[Compositionu46Event](x, __namespace, __elementLabel, __scope, true)
      case x: Compositionu46Attester => scalaxb.toXML[Compositionu46Attester](x, __namespace, __elementLabel, __scope, true)
      case x: CompartmentDefinitionu46Resource => scalaxb.toXML[CompartmentDefinitionu46Resource](x, __namespace, __elementLabel, __scope, true)
      case x: CommunicationRequestu46Requester => scalaxb.toXML[CommunicationRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemu46Designation => scalaxb.toXML[CodeSystemu46Designation](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemu46Property => scalaxb.toXML[CodeSystemu46Property](x, __namespace, __elementLabel, __scope, true)
      case x: ClinicalImpressionu46Investigation => scalaxb.toXML[ClinicalImpressionu46Investigation](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Insurance => scalaxb.toXML[ClaimResponseu46Insurance](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Payment => scalaxb.toXML[ClaimResponseu46Payment](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Detail1 => scalaxb.toXML[ClaimResponseu46Detail1](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46SubDetail => scalaxb.toXML[ClaimResponseu46SubDetail](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Adjudication => scalaxb.toXML[ClaimResponseu46Adjudication](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Detail => scalaxb.toXML[Claimu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Accident => scalaxb.toXML[Claimu46Accident](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Procedure => scalaxb.toXML[Claimu46Procedure](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Information => scalaxb.toXML[Claimu46Information](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Payee => scalaxb.toXML[Claimu46Payee](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanu46Activity => scalaxb.toXML[CarePlanu46Activity](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Document => scalaxb.toXML[CapabilityStatementu46Document](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46SupportedMessage => scalaxb.toXML[CapabilityStatementu46SupportedMessage](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Messaging => scalaxb.toXML[CapabilityStatementu46Messaging](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Interaction1 => scalaxb.toXML[CapabilityStatementu46Interaction1](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Interaction => scalaxb.toXML[CapabilityStatementu46Interaction](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Certificate => scalaxb.toXML[CapabilityStatementu46Certificate](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Rest => scalaxb.toXML[CapabilityStatementu46Rest](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Software => scalaxb.toXML[CapabilityStatementu46Software](x, __namespace, __elementLabel, __scope, true)
      case x: Bundleu46Response => scalaxb.toXML[Bundleu46Response](x, __namespace, __elementLabel, __scope, true)
      case x: Bundleu46Search => scalaxb.toXML[Bundleu46Search](x, __namespace, __elementLabel, __scope, true)
      case x: Bundleu46Link => scalaxb.toXML[Bundleu46Link](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventu46Entity => scalaxb.toXML[AuditEventu46Entity](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventu46Network => scalaxb.toXML[AuditEventu46Network](x, __namespace, __elementLabel, __scope, true)
      case x: Appointmentu46Participant => scalaxb.toXML[Appointmentu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceu46Reaction => scalaxb.toXML[AllergyIntoleranceu46Reaction](x, __namespace, __elementLabel, __scope, true)
      case x: AdverseEventu46SuspectEntity => scalaxb.toXML[AdverseEventu46SuspectEntity](x, __namespace, __elementLabel, __scope, true)
      case x: ActivityDefinitionu46DynamicValue => scalaxb.toXML[ActivityDefinitionu46DynamicValue](x, __namespace, __elementLabel, __scope, true)
      case x: Accountu46Coverage => scalaxb.toXML[Accountu46Coverage](x, __namespace, __elementLabel, __scope, true)
      case x: Accountu46Guarantor => scalaxb.toXML[Accountu46Guarantor](x, __namespace, __elementLabel, __scope, true)
      case x: ActivityDefinitionu46Participant => scalaxb.toXML[ActivityDefinitionu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventu46Agent => scalaxb.toXML[AuditEventu46Agent](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventu46Source => scalaxb.toXML[AuditEventu46Source](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventu46Detail => scalaxb.toXML[AuditEventu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: Bundleu46Entry => scalaxb.toXML[Bundleu46Entry](x, __namespace, __elementLabel, __scope, true)
      case x: Bundleu46Request => scalaxb.toXML[Bundleu46Request](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Implementation => scalaxb.toXML[CapabilityStatementu46Implementation](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Security => scalaxb.toXML[CapabilityStatementu46Security](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Resource => scalaxb.toXML[CapabilityStatementu46Resource](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46SearchParam => scalaxb.toXML[CapabilityStatementu46SearchParam](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Operation => scalaxb.toXML[CapabilityStatementu46Operation](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Endpoint => scalaxb.toXML[CapabilityStatementu46Endpoint](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementu46Event => scalaxb.toXML[CapabilityStatementu46Event](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanu46Detail => scalaxb.toXML[CarePlanu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: CareTeamu46Participant => scalaxb.toXML[CareTeamu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: ChargeItemu46Participant => scalaxb.toXML[ChargeItemu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Related => scalaxb.toXML[Claimu46Related](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46CareTeam => scalaxb.toXML[Claimu46CareTeam](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Diagnosis => scalaxb.toXML[Claimu46Diagnosis](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Insurance => scalaxb.toXML[Claimu46Insurance](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46Item => scalaxb.toXML[Claimu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: Claimu46SubDetail => scalaxb.toXML[Claimu46SubDetail](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Item => scalaxb.toXML[ClaimResponseu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Detail => scalaxb.toXML[ClaimResponseu46Detail](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46AddItem => scalaxb.toXML[ClaimResponseu46AddItem](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46Error => scalaxb.toXML[ClaimResponseu46Error](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseu46ProcessNote => scalaxb.toXML[ClaimResponseu46ProcessNote](x, __namespace, __elementLabel, __scope, true)
      case x: ClinicalImpressionu46Finding => scalaxb.toXML[ClinicalImpressionu46Finding](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemu46Filter => scalaxb.toXML[CodeSystemu46Filter](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemu46Concept => scalaxb.toXML[CodeSystemu46Concept](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemu46Property1 => scalaxb.toXML[CodeSystemu46Property1](x, __namespace, __elementLabel, __scope, true)
      case x: Communicationu46Payload => scalaxb.toXML[Communicationu46Payload](x, __namespace, __elementLabel, __scope, true)
      case x: CommunicationRequestu46Payload => scalaxb.toXML[CommunicationRequestu46Payload](x, __namespace, __elementLabel, __scope, true)
      case x: Compositionu46RelatesTo => scalaxb.toXML[Compositionu46RelatesTo](x, __namespace, __elementLabel, __scope, true)
      case x: Compositionu46Section => scalaxb.toXML[Compositionu46Section](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapu46Group => scalaxb.toXML[ConceptMapu46Group](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapu46Target => scalaxb.toXML[ConceptMapu46Target](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapu46Unmapped => scalaxb.toXML[ConceptMapu46Unmapped](x, __namespace, __elementLabel, __scope, true)
      case x: Conditionu46Stage => scalaxb.toXML[Conditionu46Stage](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Policy => scalaxb.toXML[Consentu46Policy](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Except => scalaxb.toXML[Consentu46Except](x, __namespace, __elementLabel, __scope, true)
      case x: Consentu46Data1 => scalaxb.toXML[Consentu46Data1](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Agent => scalaxb.toXML[Contractu46Agent](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46ValuedItem => scalaxb.toXML[Contractu46ValuedItem](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Agent1 => scalaxb.toXML[Contractu46Agent1](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Friendly => scalaxb.toXML[Contractu46Friendly](x, __namespace, __elementLabel, __scope, true)
      case x: Contractu46Rule => scalaxb.toXML[Contractu46Rule](x, __namespace, __elementLabel, __scope, true)
      case x: Coverageu46Grouping => scalaxb.toXML[Coverageu46Grouping](x, __namespace, __elementLabel, __scope, true)
      case x: DataElementu46Mapping => scalaxb.toXML[DataElementu46Mapping](x, __namespace, __elementLabel, __scope, true)
      case x: DetectedIssueu46Mitigation => scalaxb.toXML[DetectedIssueu46Mitigation](x, __namespace, __elementLabel, __scope, true)
      case x: Deviceu46Udi => scalaxb.toXML[Deviceu46Udi](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceComponentu46ProductionSpecification => scalaxb.toXML[DeviceComponentu46ProductionSpecification](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricu46Calibration => scalaxb.toXML[DeviceMetricu46Calibration](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceRequestu46Requester => scalaxb.toXML[DeviceRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: DiagnosticReportu46Image => scalaxb.toXML[DiagnosticReportu46Image](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentManifestu46Content => scalaxb.toXML[DocumentManifestu46Content](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceu46Content => scalaxb.toXML[DocumentReferenceu46Content](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceu46Related => scalaxb.toXML[DocumentReferenceu46Related](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityResponseu46BenefitBalance => scalaxb.toXML[EligibilityResponseu46BenefitBalance](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityResponseu46Error => scalaxb.toXML[EligibilityResponseu46Error](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46StatusHistory => scalaxb.toXML[Encounteru46StatusHistory](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46Participant => scalaxb.toXML[Encounteru46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: Encounteru46Hospitalization => scalaxb.toXML[Encounteru46Hospitalization](x, __namespace, __elementLabel, __scope, true)
      case x: EpisodeOfCareu46StatusHistory => scalaxb.toXML[EpisodeOfCareu46StatusHistory](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46ExcludedSystem => scalaxb.toXML[ExpansionProfileu46ExcludedSystem](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46Include => scalaxb.toXML[ExpansionProfileu46Include](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileu46Exclude => scalaxb.toXML[ExpansionProfileu46Exclude](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Payee => scalaxb.toXML[ExplanationOfBenefitu46Payee](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46CareTeam => scalaxb.toXML[ExplanationOfBenefitu46CareTeam](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Procedure => scalaxb.toXML[ExplanationOfBenefitu46Procedure](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Accident => scalaxb.toXML[ExplanationOfBenefitu46Accident](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Adjudication => scalaxb.toXML[ExplanationOfBenefitu46Adjudication](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46SubDetail => scalaxb.toXML[ExplanationOfBenefitu46SubDetail](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Detail1 => scalaxb.toXML[ExplanationOfBenefitu46Detail1](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46ProcessNote => scalaxb.toXML[ExplanationOfBenefitu46ProcessNote](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitu46Financial => scalaxb.toXML[ExplanationOfBenefitu46Financial](x, __namespace, __elementLabel, __scope, true)
      case x: FamilyMemberHistoryu46Condition => scalaxb.toXML[FamilyMemberHistoryu46Condition](x, __namespace, __elementLabel, __scope, true)
      case x: GraphDefinitionu46Target => scalaxb.toXML[GraphDefinitionu46Target](x, __namespace, __elementLabel, __scope, true)
      case x: Groupu46Member => scalaxb.toXML[Groupu46Member](x, __namespace, __elementLabel, __scope, true)
      case x: HealthcareServiceu46NotAvailable => scalaxb.toXML[HealthcareServiceu46NotAvailable](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingManifestu46Study => scalaxb.toXML[ImagingManifestu46Study](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingManifestu46Instance => scalaxb.toXML[ImagingManifestu46Instance](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingStudyu46Series => scalaxb.toXML[ImagingStudyu46Series](x, __namespace, __elementLabel, __scope, true)
      case x: Immunizationu46Explanation => scalaxb.toXML[Immunizationu46Explanation](x, __namespace, __elementLabel, __scope, true)
      case x: Immunizationu46VaccinationProtocol => scalaxb.toXML[Immunizationu46VaccinationProtocol](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationRecommendationu46Recommendation => scalaxb.toXML[ImmunizationRecommendationu46Recommendation](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationRecommendationu46Protocol => scalaxb.toXML[ImmunizationRecommendationu46Protocol](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideu46Dependency => scalaxb.toXML[ImplementationGuideu46Dependency](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideu46Resource => scalaxb.toXML[ImplementationGuideu46Resource](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideu46Page => scalaxb.toXML[ImplementationGuideu46Page](x, __namespace, __elementLabel, __scope, true)
      case x: Measureu46Population => scalaxb.toXML[Measureu46Population](x, __namespace, __elementLabel, __scope, true)
      case x: Measureu46SupplementalData => scalaxb.toXML[Measureu46SupplementalData](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportu46Group => scalaxb.toXML[MeasureReportu46Group](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportu46Stratifier => scalaxb.toXML[MeasureReportu46Stratifier](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportu46Population1 => scalaxb.toXML[MeasureReportu46Population1](x, __namespace, __elementLabel, __scope, true)
      case x: Medicationu46Package => scalaxb.toXML[Medicationu46Package](x, __namespace, __elementLabel, __scope, true)
      case x: Medicationu46Batch => scalaxb.toXML[Medicationu46Batch](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationAdministrationu46Performer => scalaxb.toXML[MedicationAdministrationu46Performer](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationDispenseu46Substitution => scalaxb.toXML[MedicationDispenseu46Substitution](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestu46Requester => scalaxb.toXML[MedicationRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestu46Substitution => scalaxb.toXML[MedicationRequestu46Substitution](x, __namespace, __elementLabel, __scope, true)
      case x: MessageDefinitionu46AllowedResponse => scalaxb.toXML[MessageDefinitionu46AllowedResponse](x, __namespace, __elementLabel, __scope, true)
      case x: MessageHeaderu46Destination => scalaxb.toXML[MessageHeaderu46Destination](x, __namespace, __elementLabel, __scope, true)
      case x: MessageHeaderu46Response => scalaxb.toXML[MessageHeaderu46Response](x, __namespace, __elementLabel, __scope, true)
      case x: NamingSystemu46UniqueId => scalaxb.toXML[NamingSystemu46UniqueId](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46OralDiet => scalaxb.toXML[NutritionOrderu46OralDiet](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46Texture => scalaxb.toXML[NutritionOrderu46Texture](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderu46EnteralFormula => scalaxb.toXML[NutritionOrderu46EnteralFormula](x, __namespace, __elementLabel, __scope, true)
      case x: Observationu46Related => scalaxb.toXML[Observationu46Related](x, __namespace, __elementLabel, __scope, true)
      case x: OperationDefinitionu46Binding => scalaxb.toXML[OperationDefinitionu46Binding](x, __namespace, __elementLabel, __scope, true)
      case x: Patientu46Animal => scalaxb.toXML[Patientu46Animal](x, __namespace, __elementLabel, __scope, true)
      case x: Patientu46Link => scalaxb.toXML[Patientu46Link](x, __namespace, __elementLabel, __scope, true)
      case x: PaymentReconciliationu46ProcessNote => scalaxb.toXML[PaymentReconciliationu46ProcessNote](x, __namespace, __elementLabel, __scope, true)
      case x: Personu46Link => scalaxb.toXML[Personu46Link](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46Goal => scalaxb.toXML[PlanDefinitionu46Goal](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46Action => scalaxb.toXML[PlanDefinitionu46Action](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46RelatedAction => scalaxb.toXML[PlanDefinitionu46RelatedAction](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionu46DynamicValue => scalaxb.toXML[PlanDefinitionu46DynamicValue](x, __namespace, __elementLabel, __scope, true)
      case x: Practitioneru46Qualification => scalaxb.toXML[Practitioneru46Qualification](x, __namespace, __elementLabel, __scope, true)
      case x: PractitionerRoleu46AvailableTime => scalaxb.toXML[PractitionerRoleu46AvailableTime](x, __namespace, __elementLabel, __scope, true)
      case x: Procedureu46FocalDevice => scalaxb.toXML[Procedureu46FocalDevice](x, __namespace, __elementLabel, __scope, true)
      case x: ProcedureRequestu46Requester => scalaxb.toXML[ProcedureRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: ProcessRequestu46Item => scalaxb.toXML[ProcessRequestu46Item](x, __namespace, __elementLabel, __scope, true)
      case x: ProcessResponseu46ProcessNote => scalaxb.toXML[ProcessResponseu46ProcessNote](x, __namespace, __elementLabel, __scope, true)
      case x: Provenanceu46Agent => scalaxb.toXML[Provenanceu46Agent](x, __namespace, __elementLabel, __scope, true)
      case x: Questionnaireu46EnableWhen => scalaxb.toXML[Questionnaireu46EnableWhen](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireResponseu46Answer => scalaxb.toXML[QuestionnaireResponseu46Answer](x, __namespace, __elementLabel, __scope, true)
      case x: ReferralRequestu46Requester => scalaxb.toXML[ReferralRequestu46Requester](x, __namespace, __elementLabel, __scope, true)
      case x: RequestGroupu46Condition => scalaxb.toXML[RequestGroupu46Condition](x, __namespace, __elementLabel, __scope, true)
      case x: RiskAssessmentu46Prediction => scalaxb.toXML[RiskAssessmentu46Prediction](x, __namespace, __elementLabel, __scope, true)
      case x: Sequenceu46Variant => scalaxb.toXML[Sequenceu46Variant](x, __namespace, __elementLabel, __scope, true)
      case x: Sequenceu46Repository => scalaxb.toXML[Sequenceu46Repository](x, __namespace, __elementLabel, __scope, true)
      case x: Specimenu46Collection => scalaxb.toXML[Specimenu46Collection](x, __namespace, __elementLabel, __scope, true)
      case x: Specimenu46Container => scalaxb.toXML[Specimenu46Container](x, __namespace, __elementLabel, __scope, true)
      case x: StructureDefinitionu46Mapping => scalaxb.toXML[StructureDefinitionu46Mapping](x, __namespace, __elementLabel, __scope, true)
      case x: StructureDefinitionu46Differential => scalaxb.toXML[StructureDefinitionu46Differential](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Structure => scalaxb.toXML[StructureMapu46Structure](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Input => scalaxb.toXML[StructureMapu46Input](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Source => scalaxb.toXML[StructureMapu46Source](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapu46Parameter => scalaxb.toXML[StructureMapu46Parameter](x, __namespace, __elementLabel, __scope, true)
      case x: Substanceu46Ingredient => scalaxb.toXML[Substanceu46Ingredient](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyDeliveryu46SuppliedItem => scalaxb.toXML[SupplyDeliveryu46SuppliedItem](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyRequestu46OrderedItem => scalaxb.toXML[SupplyRequestu46OrderedItem](x, __namespace, __elementLabel, __scope, true)
      case x: Tasku46Restriction => scalaxb.toXML[Tasku46Restriction](x, __namespace, __elementLabel, __scope, true)
      case x: Tasku46Output => scalaxb.toXML[Tasku46Output](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Participant => scalaxb.toXML[TestReportu46Participant](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Action => scalaxb.toXML[TestReportu46Action](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Assert => scalaxb.toXML[TestReportu46Assert](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Action1 => scalaxb.toXML[TestReportu46Action1](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportu46Action2 => scalaxb.toXML[TestReportu46Action2](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Origin => scalaxb.toXML[TestScriptu46Origin](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Metadata => scalaxb.toXML[TestScriptu46Metadata](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Capability => scalaxb.toXML[TestScriptu46Capability](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Variable => scalaxb.toXML[TestScriptu46Variable](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Param => scalaxb.toXML[TestScriptu46Param](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Rule1 => scalaxb.toXML[TestScriptu46Rule1](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Setup => scalaxb.toXML[TestScriptu46Setup](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Operation => scalaxb.toXML[TestScriptu46Operation](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Assert => scalaxb.toXML[TestScriptu46Assert](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Param2 => scalaxb.toXML[TestScriptu46Param2](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Rule3 => scalaxb.toXML[TestScriptu46Rule3](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Test => scalaxb.toXML[TestScriptu46Test](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptu46Teardown => scalaxb.toXML[TestScriptu46Teardown](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Include => scalaxb.toXML[ValueSetu46Include](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Designation => scalaxb.toXML[ValueSetu46Designation](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Expansion => scalaxb.toXML[ValueSetu46Expansion](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSetu46Contains => scalaxb.toXML[ValueSetu46Contains](x, __namespace, __elementLabel, __scope, true)
      case x: VisionPrescriptionu46Dispense => scalaxb.toXML[VisionPrescriptionu46Dispense](x, __namespace, __elementLabel, __scope, true)
      case x: BackboneElementType => scalaxb.toXML[BackboneElementType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComionkinmrshl7fhir_BackboneElementTypeFormat extends scalaxb.ElemNameParser[BackboneElementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("BackboneElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BackboneElementType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ^^
      { case p1 ~ p2 =>
      BackboneElementType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: BackboneElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: BackboneElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_NarrativeTypeFormat extends scalaxb.ElemNameParser[NarrativeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Narrative")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NarrativeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ^^
      { case p1 ~ p2 =>
      NarrativeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[NarrativeStatus](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NarrativeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NarrativeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[NarrativeStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false))

  }

  def buildComionkinmrshl7fhir_NarrativeStatusu45listFormat = new DefaultComionkinmrshl7fhir_NarrativeStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NarrativeStatusu45listFormat extends scalaxb.XMLFormat[NarrativeStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NarrativeStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("generated")) => Generated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extensions")) => ExtensionsValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("additional")) => Additional
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("empty")) => EmptyValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NarrativeStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NarrativeStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NarrativeStatusFormat extends scalaxb.ElemNameParser[NarrativeStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NarrativeStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NarrativeStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NarrativeStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NarrativeStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NarrativeStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NarrativeStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ElementableFormat extends scalaxb.XMLFormat[Elementable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Elementable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some(fhirUrl), Some("TestScriptRequestMethodCode")) => Right(scalaxb.fromXML[TestScriptRequestMethodCode](node, stack))
          case (Some(fhirUrl), Some("AssertionResponseTypes")) => Right(scalaxb.fromXML[AssertionResponseTypes](node, stack))
          case (Some(fhirUrl), Some("AssertionOperatorType")) => Right(scalaxb.fromXML[AssertionOperatorType](node, stack))
          case (Some(fhirUrl), Some("AssertionDirectionType")) => Right(scalaxb.fromXML[AssertionDirectionType](node, stack))
          case (Some(fhirUrl), Some("ContentType")) => Right(scalaxb.fromXML[ContentType](node, stack))
          case (Some(fhirUrl), Some("FHIRDefinedType")) => Right(scalaxb.fromXML[FHIRDefinedType](node, stack))
          case (Some(fhirUrl), Some("SupplyRequestStatus")) => Right(scalaxb.fromXML[SupplyRequestStatus](node, stack))
          case (Some(fhirUrl), Some("SubscriptionChannelType")) => Right(scalaxb.fromXML[SubscriptionChannelType](node, stack))
          case (Some(fhirUrl), Some("SubscriptionStatus")) => Right(scalaxb.fromXML[SubscriptionStatus](node, stack))
          case (Some(fhirUrl), Some("StructureMapModelMode")) => Right(scalaxb.fromXML[StructureMapModelMode](node, stack))
          case (Some(fhirUrl), Some("StructureMapGroupTypeMode")) => Right(scalaxb.fromXML[StructureMapGroupTypeMode](node, stack))
          case (Some(fhirUrl), Some("StructureMapSourceListMode")) => Right(scalaxb.fromXML[StructureMapSourceListMode](node, stack))
          case (Some(fhirUrl), Some("StructureMapTransform")) => Right(scalaxb.fromXML[StructureMapTransform](node, stack))
          case (Some(fhirUrl), Some("StructureMapTargetListMode")) => Right(scalaxb.fromXML[StructureMapTargetListMode](node, stack))
          case (Some(fhirUrl), Some("StructureMapContextType")) => Right(scalaxb.fromXML[StructureMapContextType](node, stack))
          case (Some(fhirUrl), Some("StructureMapInputMode")) => Right(scalaxb.fromXML[StructureMapInputMode](node, stack))
          case (Some(fhirUrl), Some("SearchComparator")) => Right(scalaxb.fromXML[SearchComparator](node, stack))
          case (Some(fhirUrl), Some("SearchModifierCode")) => Right(scalaxb.fromXML[SearchModifierCode](node, stack))
          case (Some(fhirUrl), Some("XPathUsageType")) => Right(scalaxb.fromXML[XPathUsageType](node, stack))
          case (Some(fhirUrl), Some("ResearchStudyStatus")) => Right(scalaxb.fromXML[ResearchStudyStatus](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireItemType")) => Right(scalaxb.fromXML[QuestionnaireItemType](node, stack))
          case (Some(fhirUrl), Some("ProvenanceEntityRole")) => Right(scalaxb.fromXML[ProvenanceEntityRole](node, stack))
          case (Some(fhirUrl), Some("IssueSeverity")) => Right(scalaxb.fromXML[IssueSeverity](node, stack))
          case (Some(fhirUrl), Some("IssueType")) => Right(scalaxb.fromXML[IssueType](node, stack))
          case (Some(fhirUrl), Some("OperationKind")) => Right(scalaxb.fromXML[OperationKind](node, stack))
          case (Some(fhirUrl), Some("OperationParameterUse")) => Right(scalaxb.fromXML[OperationParameterUse](node, stack))
          case (Some(fhirUrl), Some("FHIRAllTypes")) => Right(scalaxb.fromXML[FHIRAllTypes](node, stack))
          case (Some(fhirUrl), Some("ObservationRelationshipType")) => Right(scalaxb.fromXML[ObservationRelationshipType](node, stack))
          case (Some(fhirUrl), Some("NutritionOrderStatus")) => Right(scalaxb.fromXML[NutritionOrderStatus](node, stack))
          case (Some(fhirUrl), Some("MedicationStatementTaken")) => Right(scalaxb.fromXML[MedicationStatementTaken](node, stack))
          case (Some(fhirUrl), Some("MedicationStatementStatus")) => Right(scalaxb.fromXML[MedicationStatementStatus](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministrationStatus")) => Right(scalaxb.fromXML[MedicationAdministrationStatus](node, stack))
          case (Some(fhirUrl), Some("DigitalMediaType")) => Right(scalaxb.fromXML[DigitalMediaType](node, stack))
          case (Some(fhirUrl), Some("LocationStatus")) => Right(scalaxb.fromXML[LocationStatus](node, stack))
          case (Some(fhirUrl), Some("LocationMode")) => Right(scalaxb.fromXML[LocationMode](node, stack))
          case (Some(fhirUrl), Some("ListStatus")) => Right(scalaxb.fromXML[ListStatus](node, stack))
          case (Some(fhirUrl), Some("LinkageType")) => Right(scalaxb.fromXML[LinkageTypeType](node, stack))
          case (Some(fhirUrl), Some("InstanceAvailability")) => Right(scalaxb.fromXML[InstanceAvailability](node, stack))
          case (Some(fhirUrl), Some("GuidanceResponseStatus")) => Right(scalaxb.fromXML[GuidanceResponseStatus](node, stack))
          case (Some(fhirUrl), Some("GraphCompartmentRule")) => Right(scalaxb.fromXML[GraphCompartmentRule](node, stack))
          case (Some(fhirUrl), Some("GoalStatus")) => Right(scalaxb.fromXML[GoalStatus](node, stack))
          case (Some(fhirUrl), Some("FlagStatus")) => Right(scalaxb.fromXML[FlagStatus](node, stack))
          case (Some(fhirUrl), Some("SystemVersionProcessingMode")) => Right(scalaxb.fromXML[SystemVersionProcessingMode](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCareStatus")) => Right(scalaxb.fromXML[EpisodeOfCareStatus](node, stack))
          case (Some(fhirUrl), Some("EncounterStatus")) => Right(scalaxb.fromXML[EncounterStatus](node, stack))
          case (Some(fhirUrl), Some("EncounterLocationStatus")) => Right(scalaxb.fromXML[EncounterLocationStatus](node, stack))
          case (Some(fhirUrl), Some("DeviceUseStatementStatus")) => Right(scalaxb.fromXML[DeviceUseStatementStatus](node, stack))
          case (Some(fhirUrl), Some("ConditionClinicalStatusCodes")) => Right(scalaxb.fromXML[ConditionClinicalStatusCodes](node, stack))
          case (Some(fhirUrl), Some("ConditionVerificationStatus")) => Right(scalaxb.fromXML[ConditionVerificationStatus](node, stack))
          case (Some(fhirUrl), Some("CompartmentType")) => Right(scalaxb.fromXML[CompartmentType](node, stack))
          case (Some(fhirUrl), Some("RequestPriority")) => Right(scalaxb.fromXML[RequestPriority](node, stack))
          case (Some(fhirUrl), Some("RequestStatus")) => Right(scalaxb.fromXML[RequestStatus](node, stack))
          case (Some(fhirUrl), Some("ConditionalDeleteStatus")) => Right(scalaxb.fromXML[ConditionalDeleteStatus](node, stack))
          case (Some(fhirUrl), Some("ReferenceHandlingPolicy")) => Right(scalaxb.fromXML[ReferenceHandlingPolicy](node, stack))
          case (Some(fhirUrl), Some("ConditionalReadStatus")) => Right(scalaxb.fromXML[ConditionalReadStatus](node, stack))
          case (Some(fhirUrl), Some("SystemRestfulInteraction")) => Right(scalaxb.fromXML[SystemRestfulInteraction](node, stack))
          case (Some(fhirUrl), Some("TypeRestfulInteraction")) => Right(scalaxb.fromXML[TypeRestfulInteraction](node, stack))
          case (Some(fhirUrl), Some("UnknownContentCode")) => Right(scalaxb.fromXML[UnknownContentCode](node, stack))
          case (Some(fhirUrl), Some("RestfulCapabilityMode")) => Right(scalaxb.fromXML[RestfulCapabilityMode](node, stack))
          case (Some(fhirUrl), Some("DocumentMode")) => Right(scalaxb.fromXML[DocumentMode](node, stack))
          case (Some(fhirUrl), Some("MessageSignificanceCategory")) => Right(scalaxb.fromXML[MessageSignificanceCategory](node, stack))
          case (Some(fhirUrl), Some("ResourceVersionPolicy")) => Right(scalaxb.fromXML[ResourceVersionPolicy](node, stack))
          case (Some(fhirUrl), Some("EventCapabilityMode")) => Right(scalaxb.fromXML[EventCapabilityMode](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatementKind")) => Right(scalaxb.fromXML[CapabilityStatementKind](node, stack))
          case (Some(fhirUrl), Some("SearchEntryMode")) => Right(scalaxb.fromXML[SearchEntryMode](node, stack))
          case (Some(fhirUrl), Some("BundleType")) => Right(scalaxb.fromXML[BundleTypeType](node, stack))
          case (Some(fhirUrl), Some("HTTPVerb")) => Right(scalaxb.fromXML[HTTPVerb](node, stack))
          case (Some(fhirUrl), Some("ParticipationStatus")) => Right(scalaxb.fromXML[ParticipationStatus](node, stack))
          case (Some(fhirUrl), Some("AppointmentStatus")) => Right(scalaxb.fromXML[AppointmentStatus](node, stack))
          case (Some(fhirUrl), Some("ParticipantRequired")) => Right(scalaxb.fromXML[ParticipantRequired](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceClinicalStatus")) => Right(scalaxb.fromXML[AllergyIntoleranceClinicalStatus](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceSeverity")) => Right(scalaxb.fromXML[AllergyIntoleranceSeverity](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceVerificationStatus")) => Right(scalaxb.fromXML[AllergyIntoleranceVerificationStatus](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceCategory")) => Right(scalaxb.fromXML[AllergyIntoleranceCategory](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceType")) => Right(scalaxb.fromXML[AllergyIntoleranceTypeType](node, stack))
          case (Some(fhirUrl), Some("AllergyIntoleranceCriticality")) => Right(scalaxb.fromXML[AllergyIntoleranceCriticality](node, stack))
          case (Some(fhirUrl), Some("AdverseEventCategory")) => Right(scalaxb.fromXML[AdverseEventCategory](node, stack))
          case (Some(fhirUrl), Some("AdverseEventCausality")) => Right(scalaxb.fromXML[AdverseEventCausality](node, stack))
          case (Some(fhirUrl), Some("ResourceType")) => Right(scalaxb.fromXML[ResourceTypeType](node, stack))
          case (Some(fhirUrl), Some("ActionParticipantType")) => Right(scalaxb.fromXML[ActionParticipantType](node, stack))
          case (Some(fhirUrl), Some("DocumentReferenceStatus")) => Right(scalaxb.fromXML[DocumentReferenceStatus](node, stack))
          case (Some(fhirUrl), Some("ConceptMapEquivalence")) => Right(scalaxb.fromXML[ConceptMapEquivalence](node, stack))
          case (Some(fhirUrl), Some("NoteType")) => Right(scalaxb.fromXML[NoteType](node, stack))
          case (Some(fhirUrl), Some("RemittanceOutcome")) => Right(scalaxb.fromXML[RemittanceOutcome](node, stack))
          case (Some(fhirUrl), Some("AdministrativeGender")) => Right(scalaxb.fromXML[AdministrativeGender](node, stack))
          case (Some(fhirUrl), Some("SearchParamType")) => Right(scalaxb.fromXML[SearchParamType](node, stack))
          case (Some(fhirUrl), Some("PublicationStatus")) => Right(scalaxb.fromXML[PublicationStatus](node, stack))
          case (Some(fhirUrl), Some("ParameterDefinition")) => Right(scalaxb.fromXML[ParameterDefinitionType](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Binding")) => Right(scalaxb.fromXML[ElementDefinitionu46Binding](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Example")) => Right(scalaxb.fromXML[ElementDefinitionu46Example](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Base")) => Right(scalaxb.fromXML[ElementDefinitionu46Base](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Constraint")) => Right(scalaxb.fromXML[ElementDefinitionu46Constraint](node, stack))
          case (Some(fhirUrl), Some("EventTiming")) => Right(scalaxb.fromXML[EventTiming](node, stack))
          case (Some(fhirUrl), Some("UnitsOfTime")) => Right(scalaxb.fromXML[UnitsOfTime](node, stack))
          case (Some(fhirUrl), Some("Timing.Repeat")) => Right(scalaxb.fromXML[Timingu46Repeat](node, stack))
          case (Some(fhirUrl), Some("UsageContext")) => Right(scalaxb.fromXML[UsageContextType](node, stack))
          case (Some(fhirUrl), Some("NameUse")) => Right(scalaxb.fromXML[NameUse](node, stack))
          case (Some(fhirUrl), Some("HumanName")) => Right(scalaxb.fromXML[HumanNameType](node, stack))
          case (Some(fhirUrl), Some("RelatedArtifactType")) => Right(scalaxb.fromXML[RelatedArtifactTypeType](node, stack))
          case (Some(fhirUrl), Some("RelatedArtifact")) => Right(scalaxb.fromXML[RelatedArtifactType](node, stack))
          case (Some(fhirUrl), Some("DataRequirement.DateFilter")) => Right(scalaxb.fromXML[DataRequirementu46DateFilter](node, stack))
          case (Some(fhirUrl), Some("DataRequirement")) => Right(scalaxb.fromXML[DataRequirementType](node, stack))
          case (Some(fhirUrl), Some("TriggerType")) => Right(scalaxb.fromXML[TriggerType](node, stack))
          case (Some(fhirUrl), Some("TriggerDefinition")) => Right(scalaxb.fromXML[TriggerDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Meta")) => Right(scalaxb.fromXML[MetaType](node, stack))
          case (Some(fhirUrl), Some("Ratio")) => Right(scalaxb.fromXML[RatioType](node, stack))
          case (Some(fhirUrl), Some("Signature")) => Right(scalaxb.fromXML[SignatureType](node, stack))
          case (Some(fhirUrl), Some("IdentifierUse")) => Right(scalaxb.fromXML[IdentifierUse](node, stack))
          case (Some(fhirUrl), Some("Identifier")) => Right(scalaxb.fromXML[IdentifierType](node, stack))
          case (Some(fhirUrl), Some("Annotation")) => Right(scalaxb.fromXML[AnnotationType](node, stack))
          case (Some(fhirUrl), Some("Attachment")) => Right(scalaxb.fromXML[AttachmentType](node, stack))
          case (Some(fhirUrl), Some("QuantityComparator")) => Right(scalaxb.fromXML[QuantityComparator](node, stack))
          case (Some(fhirUrl), Some("Quantity")) => Right(scalaxb.fromXML[Quantityable](node, stack))
          case (Some(fhirUrl), Some("Age")) => Right(scalaxb.fromXML[AgeType](node, stack))
          case (Some(fhirUrl), Some("Count")) => Right(scalaxb.fromXML[CountType](node, stack))
          case (Some(fhirUrl), Some("Duration")) => Right(scalaxb.fromXML[DurationType](node, stack))
          case (Some(fhirUrl), Some("Money")) => Right(scalaxb.fromXML[MoneyType](node, stack))
          case (Some(fhirUrl), Some("Distance")) => Right(scalaxb.fromXML[DistanceType](node, stack))
          case (Some(fhirUrl), Some("BackboneElement")) => Right(scalaxb.fromXML[BackboneElementable](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Parameter")) => Right(scalaxb.fromXML[ValueSetu46Parameter](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Filter")) => Right(scalaxb.fromXML[ValueSetu46Filter](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Concept")) => Right(scalaxb.fromXML[ValueSetu46Concept](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Compose")) => Right(scalaxb.fromXML[ValueSetu46Compose](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action2")) => Right(scalaxb.fromXML[TestScriptu46Action2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action1")) => Right(scalaxb.fromXML[TestScriptu46Action1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param3")) => Right(scalaxb.fromXML[TestScriptu46Param3](node, stack))
          case (Some(fhirUrl), Some("TestScript.Ruleset1")) => Right(scalaxb.fromXML[TestScriptu46Ruleset1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule2")) => Right(scalaxb.fromXML[TestScriptu46Rule2](node, stack))
          case (Some(fhirUrl), Some("TestScript.RequestHeader")) => Right(scalaxb.fromXML[TestScriptu46RequestHeader](node, stack))
          case (Some(fhirUrl), Some("TestScript.Action")) => Right(scalaxb.fromXML[TestScriptu46Action](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param1")) => Right(scalaxb.fromXML[TestScriptu46Param1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Ruleset")) => Right(scalaxb.fromXML[TestScriptu46Ruleset](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule")) => Right(scalaxb.fromXML[TestScriptu46Rule](node, stack))
          case (Some(fhirUrl), Some("TestScript.Fixture")) => Right(scalaxb.fromXML[TestScriptu46Fixture](node, stack))
          case (Some(fhirUrl), Some("TestScript.Link")) => Right(scalaxb.fromXML[TestScriptu46Link](node, stack))
          case (Some(fhirUrl), Some("TestScript.Destination")) => Right(scalaxb.fromXML[TestScriptu46Destination](node, stack))
          case (Some(fhirUrl), Some("TestReport.Teardown")) => Right(scalaxb.fromXML[TestReportu46Teardown](node, stack))
          case (Some(fhirUrl), Some("TestReport.Test")) => Right(scalaxb.fromXML[TestReportu46Test](node, stack))
          case (Some(fhirUrl), Some("TestReport.Operation")) => Right(scalaxb.fromXML[TestReportu46Operation](node, stack))
          case (Some(fhirUrl), Some("TestReport.Setup")) => Right(scalaxb.fromXML[TestReportu46Setup](node, stack))
          case (Some(fhirUrl), Some("Task.Input")) => Right(scalaxb.fromXML[Tasku46Input](node, stack))
          case (Some(fhirUrl), Some("Task.Requester")) => Right(scalaxb.fromXML[Tasku46Requester](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest.Requester")) => Right(scalaxb.fromXML[SupplyRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("Substance.Instance")) => Right(scalaxb.fromXML[Substanceu46Instance](node, stack))
          case (Some(fhirUrl), Some("Subscription.Channel")) => Right(scalaxb.fromXML[Subscriptionu46Channel](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Dependent")) => Right(scalaxb.fromXML[StructureMapu46Dependent](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Target")) => Right(scalaxb.fromXML[StructureMapu46Target](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Rule")) => Right(scalaxb.fromXML[StructureMapu46Rule](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Group")) => Right(scalaxb.fromXML[StructureMapu46Group](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Snapshot")) => Right(scalaxb.fromXML[StructureDefinitionu46Snapshot](node, stack))
          case (Some(fhirUrl), Some("Specimen.Processing")) => Right(scalaxb.fromXML[Specimenu46Processing](node, stack))
          case (Some(fhirUrl), Some("Sequence.Quality")) => Right(scalaxb.fromXML[Sequenceu46Quality](node, stack))
          case (Some(fhirUrl), Some("Sequence.ReferenceSeq")) => Right(scalaxb.fromXML[Sequenceu46ReferenceSeq](node, stack))
          case (Some(fhirUrl), Some("SearchParameter.Component")) => Right(scalaxb.fromXML[SearchParameteru46Component](node, stack))
          case (Some(fhirUrl), Some("ResearchStudy.Arm")) => Right(scalaxb.fromXML[ResearchStudyu46Arm](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.RelatedAction")) => Right(scalaxb.fromXML[RequestGroupu46RelatedAction](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.Action")) => Right(scalaxb.fromXML[RequestGroupu46Action](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse.Item")) => Right(scalaxb.fromXML[QuestionnaireResponseu46Item](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.Option")) => Right(scalaxb.fromXML[Questionnaireu46Option](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.Item")) => Right(scalaxb.fromXML[Questionnaireu46Item](node, stack))
          case (Some(fhirUrl), Some("Provenance.Entity")) => Right(scalaxb.fromXML[Provenanceu46Entity](node, stack))
          case (Some(fhirUrl), Some("Procedure.Performer")) => Right(scalaxb.fromXML[Procedureu46Performer](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole.NotAvailable")) => Right(scalaxb.fromXML[PractitionerRoleu46NotAvailable](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Participant")) => Right(scalaxb.fromXML[PlanDefinitionu46Participant](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Condition")) => Right(scalaxb.fromXML[PlanDefinitionu46Condition](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Target")) => Right(scalaxb.fromXML[PlanDefinitionu46Target](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation.Detail")) => Right(scalaxb.fromXML[PaymentReconciliationu46Detail](node, stack))
          case (Some(fhirUrl), Some("Patient.Communication")) => Right(scalaxb.fromXML[Patientu46Communication](node, stack))
          case (Some(fhirUrl), Some("Patient.Contact")) => Right(scalaxb.fromXML[Patientu46Contact](node, stack))
          case (Some(fhirUrl), Some("Parameters.Parameter")) => Right(scalaxb.fromXML[Parametersu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Organization.Contact")) => Right(scalaxb.fromXML[Organizationu46Contact](node, stack))
          case (Some(fhirUrl), Some("OperationOutcome.Issue")) => Right(scalaxb.fromXML[OperationOutcomeu46Issue](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Overload")) => Right(scalaxb.fromXML[OperationDefinitionu46Overload](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Parameter")) => Right(scalaxb.fromXML[OperationDefinitionu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Observation.Component")) => Right(scalaxb.fromXML[Observationu46Component](node, stack))
          case (Some(fhirUrl), Some("Observation.ReferenceRange")) => Right(scalaxb.fromXML[Observationu46ReferenceRange](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Administration")) => Right(scalaxb.fromXML[NutritionOrderu46Administration](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Supplement")) => Right(scalaxb.fromXML[NutritionOrderu46Supplement](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Nutrient")) => Right(scalaxb.fromXML[NutritionOrderu46Nutrient](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Source")) => Right(scalaxb.fromXML[MessageHeaderu46Source](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition.Focus")) => Right(scalaxb.fromXML[MessageDefinitionu46Focus](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.DispenseRequest")) => Right(scalaxb.fromXML[MedicationRequestu46DispenseRequest](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense.Performer")) => Right(scalaxb.fromXML[MedicationDispenseu46Performer](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration.Dosage")) => Right(scalaxb.fromXML[MedicationAdministrationu46Dosage](node, stack))
          case (Some(fhirUrl), Some("Medication.Content")) => Right(scalaxb.fromXML[Medicationu46Content](node, stack))
          case (Some(fhirUrl), Some("Medication.Ingredient")) => Right(scalaxb.fromXML[Medicationu46Ingredient](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Stratum")) => Right(scalaxb.fromXML[MeasureReportu46Stratum](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Population")) => Right(scalaxb.fromXML[MeasureReportu46Population](node, stack))
          case (Some(fhirUrl), Some("Measure.Stratifier")) => Right(scalaxb.fromXML[Measureu46Stratifier](node, stack))
          case (Some(fhirUrl), Some("Measure.Group")) => Right(scalaxb.fromXML[Measureu46Group](node, stack))
          case (Some(fhirUrl), Some("Location.Position")) => Right(scalaxb.fromXML[Locationu46Position](node, stack))
          case (Some(fhirUrl), Some("List.Entry")) => Right(scalaxb.fromXML[Listu46Entry](node, stack))
          case (Some(fhirUrl), Some("Linkage.Item")) => Right(scalaxb.fromXML[Linkageu46Item](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Global")) => Right(scalaxb.fromXML[ImplementationGuideu46Global](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Package")) => Right(scalaxb.fromXML[ImplementationGuideu46Package](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.DateCriterion")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46DateCriterion](node, stack))
          case (Some(fhirUrl), Some("Immunization.Reaction")) => Right(scalaxb.fromXML[Immunizationu46Reaction](node, stack))
          case (Some(fhirUrl), Some("Immunization.Practitioner")) => Right(scalaxb.fromXML[Immunizationu46Practitioner](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy.Instance")) => Right(scalaxb.fromXML[ImagingStudyu46Instance](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Series")) => Right(scalaxb.fromXML[ImagingManifestu46Series](node, stack))
          case (Some(fhirUrl), Some("HealthcareService.AvailableTime")) => Right(scalaxb.fromXML[HealthcareServiceu46AvailableTime](node, stack))
          case (Some(fhirUrl), Some("Group.Characteristic")) => Right(scalaxb.fromXML[Groupu46Characteristic](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Compartment")) => Right(scalaxb.fromXML[GraphDefinitionu46Compartment](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Link")) => Right(scalaxb.fromXML[GraphDefinitionu46Link](node, stack))
          case (Some(fhirUrl), Some("Goal.Target")) => Right(scalaxb.fromXML[Goalu46Target](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.BenefitBalance")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46BenefitBalance](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Payment")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Payment](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.AddItem")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46AddItem](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Detail")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Detail](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Item")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Item](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Insurance")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Insurance](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Diagnosis")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Information")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Information](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Related")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Related](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation2")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation2](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation1")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation1](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Designation")) => Right(scalaxb.fromXML[ExpansionProfileu46Designation](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.FixedVersion")) => Right(scalaxb.fromXML[ExpansionProfileu46FixedVersion](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare.Diagnosis")) => Right(scalaxb.fromXML[EpisodeOfCareu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Encounter.Location")) => Right(scalaxb.fromXML[Encounteru46Location](node, stack))
          case (Some(fhirUrl), Some("Encounter.Diagnosis")) => Right(scalaxb.fromXML[Encounteru46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Encounter.ClassHistory")) => Right(scalaxb.fromXML[Encounteru46ClassHistory](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Financial")) => Right(scalaxb.fromXML[EligibilityResponseu46Financial](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Insurance")) => Right(scalaxb.fromXML[EligibilityResponseu46Insurance](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Context")) => Right(scalaxb.fromXML[DocumentReferenceu46Context](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.RelatesTo")) => Right(scalaxb.fromXML[DocumentReferenceu46RelatesTo](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest.Related")) => Right(scalaxb.fromXML[DocumentManifestu46Related](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport.Performer")) => Right(scalaxb.fromXML[DiagnosticReportu46Performer](node, stack))
          case (Some(fhirUrl), Some("Contract.Legal")) => Right(scalaxb.fromXML[Contractu46Legal](node, stack))
          case (Some(fhirUrl), Some("Contract.ValuedItem1")) => Right(scalaxb.fromXML[Contractu46ValuedItem1](node, stack))
          case (Some(fhirUrl), Some("Contract.Term")) => Right(scalaxb.fromXML[Contractu46Term](node, stack))
          case (Some(fhirUrl), Some("Contract.Signer")) => Right(scalaxb.fromXML[Contractu46Signer](node, stack))
          case (Some(fhirUrl), Some("Consent.Actor1")) => Right(scalaxb.fromXML[Consentu46Actor1](node, stack))
          case (Some(fhirUrl), Some("Consent.Data")) => Right(scalaxb.fromXML[Consentu46Data](node, stack))
          case (Some(fhirUrl), Some("Consent.Actor")) => Right(scalaxb.fromXML[Consentu46Actor](node, stack))
          case (Some(fhirUrl), Some("Condition.Evidence")) => Right(scalaxb.fromXML[Conditionu46Evidence](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.DependsOn")) => Right(scalaxb.fromXML[ConceptMapu46DependsOn](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Element")) => Right(scalaxb.fromXML[ConceptMapu46Element](node, stack))
          case (Some(fhirUrl), Some("Composition.Event")) => Right(scalaxb.fromXML[Compositionu46Event](node, stack))
          case (Some(fhirUrl), Some("Composition.Attester")) => Right(scalaxb.fromXML[Compositionu46Attester](node, stack))
          case (Some(fhirUrl), Some("CompartmentDefinition.Resource")) => Right(scalaxb.fromXML[CompartmentDefinitionu46Resource](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest.Requester")) => Right(scalaxb.fromXML[CommunicationRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Designation")) => Right(scalaxb.fromXML[CodeSystemu46Designation](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Property")) => Right(scalaxb.fromXML[CodeSystemu46Property](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression.Investigation")) => Right(scalaxb.fromXML[ClinicalImpressionu46Investigation](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Insurance")) => Right(scalaxb.fromXML[ClaimResponseu46Insurance](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Payment")) => Right(scalaxb.fromXML[ClaimResponseu46Payment](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Detail1")) => Right(scalaxb.fromXML[ClaimResponseu46Detail1](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.SubDetail")) => Right(scalaxb.fromXML[ClaimResponseu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Adjudication")) => Right(scalaxb.fromXML[ClaimResponseu46Adjudication](node, stack))
          case (Some(fhirUrl), Some("Claim.Detail")) => Right(scalaxb.fromXML[Claimu46Detail](node, stack))
          case (Some(fhirUrl), Some("Claim.Accident")) => Right(scalaxb.fromXML[Claimu46Accident](node, stack))
          case (Some(fhirUrl), Some("Claim.Procedure")) => Right(scalaxb.fromXML[Claimu46Procedure](node, stack))
          case (Some(fhirUrl), Some("Claim.Information")) => Right(scalaxb.fromXML[Claimu46Information](node, stack))
          case (Some(fhirUrl), Some("Claim.Payee")) => Right(scalaxb.fromXML[Claimu46Payee](node, stack))
          case (Some(fhirUrl), Some("CarePlan.Activity")) => Right(scalaxb.fromXML[CarePlanu46Activity](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Document")) => Right(scalaxb.fromXML[CapabilityStatementu46Document](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.SupportedMessage")) => Right(scalaxb.fromXML[CapabilityStatementu46SupportedMessage](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Messaging")) => Right(scalaxb.fromXML[CapabilityStatementu46Messaging](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Interaction1")) => Right(scalaxb.fromXML[CapabilityStatementu46Interaction1](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Interaction")) => Right(scalaxb.fromXML[CapabilityStatementu46Interaction](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Certificate")) => Right(scalaxb.fromXML[CapabilityStatementu46Certificate](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Rest")) => Right(scalaxb.fromXML[CapabilityStatementu46Rest](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Software")) => Right(scalaxb.fromXML[CapabilityStatementu46Software](node, stack))
          case (Some(fhirUrl), Some("Bundle.Response")) => Right(scalaxb.fromXML[Bundleu46Response](node, stack))
          case (Some(fhirUrl), Some("Bundle.Search")) => Right(scalaxb.fromXML[Bundleu46Search](node, stack))
          case (Some(fhirUrl), Some("Bundle.Link")) => Right(scalaxb.fromXML[Bundleu46Link](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Entity")) => Right(scalaxb.fromXML[AuditEventu46Entity](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Network")) => Right(scalaxb.fromXML[AuditEventu46Network](node, stack))
          case (Some(fhirUrl), Some("Appointment.Participant")) => Right(scalaxb.fromXML[Appointmentu46Participant](node, stack))
          case (Some(fhirUrl), Some("AllergyIntolerance.Reaction")) => Right(scalaxb.fromXML[AllergyIntoleranceu46Reaction](node, stack))
          case (Some(fhirUrl), Some("AdverseEvent.SuspectEntity")) => Right(scalaxb.fromXML[AdverseEventu46SuspectEntity](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition.DynamicValue")) => Right(scalaxb.fromXML[ActivityDefinitionu46DynamicValue](node, stack))
          case (Some(fhirUrl), Some("Account.Coverage")) => Right(scalaxb.fromXML[Accountu46Coverage](node, stack))
          case (Some(fhirUrl), Some("Account.Guarantor")) => Right(scalaxb.fromXML[Accountu46Guarantor](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition.Participant")) => Right(scalaxb.fromXML[ActivityDefinitionu46Participant](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Agent")) => Right(scalaxb.fromXML[AuditEventu46Agent](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Source")) => Right(scalaxb.fromXML[AuditEventu46Source](node, stack))
          case (Some(fhirUrl), Some("AuditEvent.Detail")) => Right(scalaxb.fromXML[AuditEventu46Detail](node, stack))
          case (Some(fhirUrl), Some("Bundle.Entry")) => Right(scalaxb.fromXML[Bundleu46Entry](node, stack))
          case (Some(fhirUrl), Some("Bundle.Request")) => Right(scalaxb.fromXML[Bundleu46Request](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Implementation")) => Right(scalaxb.fromXML[CapabilityStatementu46Implementation](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Security")) => Right(scalaxb.fromXML[CapabilityStatementu46Security](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Resource")) => Right(scalaxb.fromXML[CapabilityStatementu46Resource](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.SearchParam")) => Right(scalaxb.fromXML[CapabilityStatementu46SearchParam](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Operation")) => Right(scalaxb.fromXML[CapabilityStatementu46Operation](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Endpoint")) => Right(scalaxb.fromXML[CapabilityStatementu46Endpoint](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement.Event")) => Right(scalaxb.fromXML[CapabilityStatementu46Event](node, stack))
          case (Some(fhirUrl), Some("CarePlan.Detail")) => Right(scalaxb.fromXML[CarePlanu46Detail](node, stack))
          case (Some(fhirUrl), Some("CareTeam.Participant")) => Right(scalaxb.fromXML[CareTeamu46Participant](node, stack))
          case (Some(fhirUrl), Some("ChargeItem.Participant")) => Right(scalaxb.fromXML[ChargeItemu46Participant](node, stack))
          case (Some(fhirUrl), Some("Claim.Related")) => Right(scalaxb.fromXML[Claimu46Related](node, stack))
          case (Some(fhirUrl), Some("Claim.CareTeam")) => Right(scalaxb.fromXML[Claimu46CareTeam](node, stack))
          case (Some(fhirUrl), Some("Claim.Diagnosis")) => Right(scalaxb.fromXML[Claimu46Diagnosis](node, stack))
          case (Some(fhirUrl), Some("Claim.Insurance")) => Right(scalaxb.fromXML[Claimu46Insurance](node, stack))
          case (Some(fhirUrl), Some("Claim.Item")) => Right(scalaxb.fromXML[Claimu46Item](node, stack))
          case (Some(fhirUrl), Some("Claim.SubDetail")) => Right(scalaxb.fromXML[Claimu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Item")) => Right(scalaxb.fromXML[ClaimResponseu46Item](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Detail")) => Right(scalaxb.fromXML[ClaimResponseu46Detail](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.AddItem")) => Right(scalaxb.fromXML[ClaimResponseu46AddItem](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.Error")) => Right(scalaxb.fromXML[ClaimResponseu46Error](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse.ProcessNote")) => Right(scalaxb.fromXML[ClaimResponseu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression.Finding")) => Right(scalaxb.fromXML[ClinicalImpressionu46Finding](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Filter")) => Right(scalaxb.fromXML[CodeSystemu46Filter](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Concept")) => Right(scalaxb.fromXML[CodeSystemu46Concept](node, stack))
          case (Some(fhirUrl), Some("CodeSystem.Property1")) => Right(scalaxb.fromXML[CodeSystemu46Property1](node, stack))
          case (Some(fhirUrl), Some("Communication.Payload")) => Right(scalaxb.fromXML[Communicationu46Payload](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest.Payload")) => Right(scalaxb.fromXML[CommunicationRequestu46Payload](node, stack))
          case (Some(fhirUrl), Some("Composition.RelatesTo")) => Right(scalaxb.fromXML[Compositionu46RelatesTo](node, stack))
          case (Some(fhirUrl), Some("Composition.Section")) => Right(scalaxb.fromXML[Compositionu46Section](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Group")) => Right(scalaxb.fromXML[ConceptMapu46Group](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Target")) => Right(scalaxb.fromXML[ConceptMapu46Target](node, stack))
          case (Some(fhirUrl), Some("ConceptMap.Unmapped")) => Right(scalaxb.fromXML[ConceptMapu46Unmapped](node, stack))
          case (Some(fhirUrl), Some("Condition.Stage")) => Right(scalaxb.fromXML[Conditionu46Stage](node, stack))
          case (Some(fhirUrl), Some("Consent.Policy")) => Right(scalaxb.fromXML[Consentu46Policy](node, stack))
          case (Some(fhirUrl), Some("Consent.Except")) => Right(scalaxb.fromXML[Consentu46Except](node, stack))
          case (Some(fhirUrl), Some("Consent.Data1")) => Right(scalaxb.fromXML[Consentu46Data1](node, stack))
          case (Some(fhirUrl), Some("Contract.Agent")) => Right(scalaxb.fromXML[Contractu46Agent](node, stack))
          case (Some(fhirUrl), Some("Contract.ValuedItem")) => Right(scalaxb.fromXML[Contractu46ValuedItem](node, stack))
          case (Some(fhirUrl), Some("Contract.Agent1")) => Right(scalaxb.fromXML[Contractu46Agent1](node, stack))
          case (Some(fhirUrl), Some("Contract.Friendly")) => Right(scalaxb.fromXML[Contractu46Friendly](node, stack))
          case (Some(fhirUrl), Some("Contract.Rule")) => Right(scalaxb.fromXML[Contractu46Rule](node, stack))
          case (Some(fhirUrl), Some("Coverage.Grouping")) => Right(scalaxb.fromXML[Coverageu46Grouping](node, stack))
          case (Some(fhirUrl), Some("DataElement.Mapping")) => Right(scalaxb.fromXML[DataElementu46Mapping](node, stack))
          case (Some(fhirUrl), Some("DetectedIssue.Mitigation")) => Right(scalaxb.fromXML[DetectedIssueu46Mitigation](node, stack))
          case (Some(fhirUrl), Some("Device.Udi")) => Right(scalaxb.fromXML[Deviceu46Udi](node, stack))
          case (Some(fhirUrl), Some("DeviceComponent.ProductionSpecification")) => Right(scalaxb.fromXML[DeviceComponentu46ProductionSpecification](node, stack))
          case (Some(fhirUrl), Some("DeviceMetric.Calibration")) => Right(scalaxb.fromXML[DeviceMetricu46Calibration](node, stack))
          case (Some(fhirUrl), Some("DeviceRequest.Requester")) => Right(scalaxb.fromXML[DeviceRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport.Image")) => Right(scalaxb.fromXML[DiagnosticReportu46Image](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest.Content")) => Right(scalaxb.fromXML[DocumentManifestu46Content](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Content")) => Right(scalaxb.fromXML[DocumentReferenceu46Content](node, stack))
          case (Some(fhirUrl), Some("DocumentReference.Related")) => Right(scalaxb.fromXML[DocumentReferenceu46Related](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.BenefitBalance")) => Right(scalaxb.fromXML[EligibilityResponseu46BenefitBalance](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse.Error")) => Right(scalaxb.fromXML[EligibilityResponseu46Error](node, stack))
          case (Some(fhirUrl), Some("Encounter.StatusHistory")) => Right(scalaxb.fromXML[Encounteru46StatusHistory](node, stack))
          case (Some(fhirUrl), Some("Encounter.Participant")) => Right(scalaxb.fromXML[Encounteru46Participant](node, stack))
          case (Some(fhirUrl), Some("Encounter.Hospitalization")) => Right(scalaxb.fromXML[Encounteru46Hospitalization](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare.StatusHistory")) => Right(scalaxb.fromXML[EpisodeOfCareu46StatusHistory](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.ExcludedSystem")) => Right(scalaxb.fromXML[ExpansionProfileu46ExcludedSystem](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Include")) => Right(scalaxb.fromXML[ExpansionProfileu46Include](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile.Exclude")) => Right(scalaxb.fromXML[ExpansionProfileu46Exclude](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Payee")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Payee](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.CareTeam")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46CareTeam](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Procedure")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Procedure](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Accident")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Accident](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Adjudication")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.SubDetail")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46SubDetail](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Detail1")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Detail1](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.ProcessNote")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit.Financial")) => Right(scalaxb.fromXML[ExplanationOfBenefitu46Financial](node, stack))
          case (Some(fhirUrl), Some("FamilyMemberHistory.Condition")) => Right(scalaxb.fromXML[FamilyMemberHistoryu46Condition](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition.Target")) => Right(scalaxb.fromXML[GraphDefinitionu46Target](node, stack))
          case (Some(fhirUrl), Some("Group.Member")) => Right(scalaxb.fromXML[Groupu46Member](node, stack))
          case (Some(fhirUrl), Some("HealthcareService.NotAvailable")) => Right(scalaxb.fromXML[HealthcareServiceu46NotAvailable](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Study")) => Right(scalaxb.fromXML[ImagingManifestu46Study](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest.Instance")) => Right(scalaxb.fromXML[ImagingManifestu46Instance](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy.Series")) => Right(scalaxb.fromXML[ImagingStudyu46Series](node, stack))
          case (Some(fhirUrl), Some("Immunization.Explanation")) => Right(scalaxb.fromXML[Immunizationu46Explanation](node, stack))
          case (Some(fhirUrl), Some("Immunization.VaccinationProtocol")) => Right(scalaxb.fromXML[Immunizationu46VaccinationProtocol](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.Recommendation")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46Recommendation](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation.Protocol")) => Right(scalaxb.fromXML[ImmunizationRecommendationu46Protocol](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Dependency")) => Right(scalaxb.fromXML[ImplementationGuideu46Dependency](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Resource")) => Right(scalaxb.fromXML[ImplementationGuideu46Resource](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide.Page")) => Right(scalaxb.fromXML[ImplementationGuideu46Page](node, stack))
          case (Some(fhirUrl), Some("Measure.Population")) => Right(scalaxb.fromXML[Measureu46Population](node, stack))
          case (Some(fhirUrl), Some("Measure.SupplementalData")) => Right(scalaxb.fromXML[Measureu46SupplementalData](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Group")) => Right(scalaxb.fromXML[MeasureReportu46Group](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Stratifier")) => Right(scalaxb.fromXML[MeasureReportu46Stratifier](node, stack))
          case (Some(fhirUrl), Some("MeasureReport.Population1")) => Right(scalaxb.fromXML[MeasureReportu46Population1](node, stack))
          case (Some(fhirUrl), Some("Medication.Package")) => Right(scalaxb.fromXML[Medicationu46Package](node, stack))
          case (Some(fhirUrl), Some("Medication.Batch")) => Right(scalaxb.fromXML[Medicationu46Batch](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration.Performer")) => Right(scalaxb.fromXML[MedicationAdministrationu46Performer](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense.Substitution")) => Right(scalaxb.fromXML[MedicationDispenseu46Substitution](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.Requester")) => Right(scalaxb.fromXML[MedicationRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest.Substitution")) => Right(scalaxb.fromXML[MedicationRequestu46Substitution](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition.AllowedResponse")) => Right(scalaxb.fromXML[MessageDefinitionu46AllowedResponse](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Destination")) => Right(scalaxb.fromXML[MessageHeaderu46Destination](node, stack))
          case (Some(fhirUrl), Some("MessageHeader.Response")) => Right(scalaxb.fromXML[MessageHeaderu46Response](node, stack))
          case (Some(fhirUrl), Some("NamingSystem.UniqueId")) => Right(scalaxb.fromXML[NamingSystemu46UniqueId](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.OralDiet")) => Right(scalaxb.fromXML[NutritionOrderu46OralDiet](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.Texture")) => Right(scalaxb.fromXML[NutritionOrderu46Texture](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder.EnteralFormula")) => Right(scalaxb.fromXML[NutritionOrderu46EnteralFormula](node, stack))
          case (Some(fhirUrl), Some("Observation.Related")) => Right(scalaxb.fromXML[Observationu46Related](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition.Binding")) => Right(scalaxb.fromXML[OperationDefinitionu46Binding](node, stack))
          case (Some(fhirUrl), Some("Patient.Animal")) => Right(scalaxb.fromXML[Patientu46Animal](node, stack))
          case (Some(fhirUrl), Some("Patient.Link")) => Right(scalaxb.fromXML[Patientu46Link](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation.ProcessNote")) => Right(scalaxb.fromXML[PaymentReconciliationu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("Person.Link")) => Right(scalaxb.fromXML[Personu46Link](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Goal")) => Right(scalaxb.fromXML[PlanDefinitionu46Goal](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.Action")) => Right(scalaxb.fromXML[PlanDefinitionu46Action](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.RelatedAction")) => Right(scalaxb.fromXML[PlanDefinitionu46RelatedAction](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition.DynamicValue")) => Right(scalaxb.fromXML[PlanDefinitionu46DynamicValue](node, stack))
          case (Some(fhirUrl), Some("Practitioner.Qualification")) => Right(scalaxb.fromXML[Practitioneru46Qualification](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole.AvailableTime")) => Right(scalaxb.fromXML[PractitionerRoleu46AvailableTime](node, stack))
          case (Some(fhirUrl), Some("Procedure.FocalDevice")) => Right(scalaxb.fromXML[Procedureu46FocalDevice](node, stack))
          case (Some(fhirUrl), Some("ProcedureRequest.Requester")) => Right(scalaxb.fromXML[ProcedureRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("ProcessRequest.Item")) => Right(scalaxb.fromXML[ProcessRequestu46Item](node, stack))
          case (Some(fhirUrl), Some("ProcessResponse.ProcessNote")) => Right(scalaxb.fromXML[ProcessResponseu46ProcessNote](node, stack))
          case (Some(fhirUrl), Some("Provenance.Agent")) => Right(scalaxb.fromXML[Provenanceu46Agent](node, stack))
          case (Some(fhirUrl), Some("Questionnaire.EnableWhen")) => Right(scalaxb.fromXML[Questionnaireu46EnableWhen](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse.Answer")) => Right(scalaxb.fromXML[QuestionnaireResponseu46Answer](node, stack))
          case (Some(fhirUrl), Some("ReferralRequest.Requester")) => Right(scalaxb.fromXML[ReferralRequestu46Requester](node, stack))
          case (Some(fhirUrl), Some("RequestGroup.Condition")) => Right(scalaxb.fromXML[RequestGroupu46Condition](node, stack))
          case (Some(fhirUrl), Some("RiskAssessment.Prediction")) => Right(scalaxb.fromXML[RiskAssessmentu46Prediction](node, stack))
          case (Some(fhirUrl), Some("Sequence.Variant")) => Right(scalaxb.fromXML[Sequenceu46Variant](node, stack))
          case (Some(fhirUrl), Some("Sequence.Repository")) => Right(scalaxb.fromXML[Sequenceu46Repository](node, stack))
          case (Some(fhirUrl), Some("Specimen.Collection")) => Right(scalaxb.fromXML[Specimenu46Collection](node, stack))
          case (Some(fhirUrl), Some("Specimen.Container")) => Right(scalaxb.fromXML[Specimenu46Container](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Mapping")) => Right(scalaxb.fromXML[StructureDefinitionu46Mapping](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition.Differential")) => Right(scalaxb.fromXML[StructureDefinitionu46Differential](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Structure")) => Right(scalaxb.fromXML[StructureMapu46Structure](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Input")) => Right(scalaxb.fromXML[StructureMapu46Input](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Source")) => Right(scalaxb.fromXML[StructureMapu46Source](node, stack))
          case (Some(fhirUrl), Some("StructureMap.Parameter")) => Right(scalaxb.fromXML[StructureMapu46Parameter](node, stack))
          case (Some(fhirUrl), Some("Substance.Ingredient")) => Right(scalaxb.fromXML[Substanceu46Ingredient](node, stack))
          case (Some(fhirUrl), Some("SupplyDelivery.SuppliedItem")) => Right(scalaxb.fromXML[SupplyDeliveryu46SuppliedItem](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest.OrderedItem")) => Right(scalaxb.fromXML[SupplyRequestu46OrderedItem](node, stack))
          case (Some(fhirUrl), Some("Task.Restriction")) => Right(scalaxb.fromXML[Tasku46Restriction](node, stack))
          case (Some(fhirUrl), Some("Task.Output")) => Right(scalaxb.fromXML[Tasku46Output](node, stack))
          case (Some(fhirUrl), Some("TestReport.Participant")) => Right(scalaxb.fromXML[TestReportu46Participant](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action")) => Right(scalaxb.fromXML[TestReportu46Action](node, stack))
          case (Some(fhirUrl), Some("TestReport.Assert")) => Right(scalaxb.fromXML[TestReportu46Assert](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action1")) => Right(scalaxb.fromXML[TestReportu46Action1](node, stack))
          case (Some(fhirUrl), Some("TestReport.Action2")) => Right(scalaxb.fromXML[TestReportu46Action2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Origin")) => Right(scalaxb.fromXML[TestScriptu46Origin](node, stack))
          case (Some(fhirUrl), Some("TestScript.Metadata")) => Right(scalaxb.fromXML[TestScriptu46Metadata](node, stack))
          case (Some(fhirUrl), Some("TestScript.Capability")) => Right(scalaxb.fromXML[TestScriptu46Capability](node, stack))
          case (Some(fhirUrl), Some("TestScript.Variable")) => Right(scalaxb.fromXML[TestScriptu46Variable](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param")) => Right(scalaxb.fromXML[TestScriptu46Param](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule1")) => Right(scalaxb.fromXML[TestScriptu46Rule1](node, stack))
          case (Some(fhirUrl), Some("TestScript.Setup")) => Right(scalaxb.fromXML[TestScriptu46Setup](node, stack))
          case (Some(fhirUrl), Some("TestScript.Operation")) => Right(scalaxb.fromXML[TestScriptu46Operation](node, stack))
          case (Some(fhirUrl), Some("TestScript.Assert")) => Right(scalaxb.fromXML[TestScriptu46Assert](node, stack))
          case (Some(fhirUrl), Some("TestScript.Param2")) => Right(scalaxb.fromXML[TestScriptu46Param2](node, stack))
          case (Some(fhirUrl), Some("TestScript.Rule3")) => Right(scalaxb.fromXML[TestScriptu46Rule3](node, stack))
          case (Some(fhirUrl), Some("TestScript.Test")) => Right(scalaxb.fromXML[TestScriptu46Test](node, stack))
          case (Some(fhirUrl), Some("TestScript.Teardown")) => Right(scalaxb.fromXML[TestScriptu46Teardown](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Include")) => Right(scalaxb.fromXML[ValueSetu46Include](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Designation")) => Right(scalaxb.fromXML[ValueSetu46Designation](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Expansion")) => Right(scalaxb.fromXML[ValueSetu46Expansion](node, stack))
          case (Some(fhirUrl), Some("ValueSet.Contains")) => Right(scalaxb.fromXML[ValueSetu46Contains](node, stack))
          case (Some(fhirUrl), Some("VisionPrescription.Dispense")) => Right(scalaxb.fromXML[VisionPrescriptionu46Dispense](node, stack))
          case (Some(fhirUrl), Some("date")) => Right(scalaxb.fromXML[DateType](node, stack))
          case (Some(fhirUrl), Some("dateTime")) => Right(scalaxb.fromXML[DateTimeType](node, stack))
          case (Some(fhirUrl), Some("code")) => Right(scalaxb.fromXML[CodeType](node, stack))
          case (Some(fhirUrl), Some("string")) => Right(scalaxb.fromXML[StringTypeType](node, stack))
          case (Some(fhirUrl), Some("integer")) => Right(scalaxb.fromXML[IntegerType](node, stack))
          case (Some(fhirUrl), Some("oid")) => Right(scalaxb.fromXML[OidType](node, stack))
          case (Some(fhirUrl), Some("uri")) => Right(scalaxb.fromXML[UriType](node, stack))
          case (Some(fhirUrl), Some("uuid")) => Right(scalaxb.fromXML[UuidType](node, stack))
          case (Some(fhirUrl), Some("instant")) => Right(scalaxb.fromXML[InstantType](node, stack))
          case (Some(fhirUrl), Some("boolean")) => Right(scalaxb.fromXML[BooleanTypeType](node, stack))
          case (Some(fhirUrl), Some("base64Binary")) => Right(scalaxb.fromXML[Base64BinaryTypeType](node, stack))
          case (Some(fhirUrl), Some("unsignedInt")) => Right(scalaxb.fromXML[UnsignedIntType](node, stack))
          case (Some(fhirUrl), Some("markdown")) => Right(scalaxb.fromXML[MarkdownType](node, stack))
          case (Some(fhirUrl), Some("time")) => Right(scalaxb.fromXML[TimeType](node, stack))
          case (Some(fhirUrl), Some("id")) => Right(scalaxb.fromXML[IdType](node, stack))
          case (Some(fhirUrl), Some("positiveInt")) => Right(scalaxb.fromXML[PositiveIntType](node, stack))
          case (Some(fhirUrl), Some("decimal")) => Right(scalaxb.fromXML[DecimalType](node, stack))
          case (Some(fhirUrl), Some("Extension")) => Right(scalaxb.fromXML[ExtensionType](node, stack))
          case (Some(fhirUrl), Some("Narrative")) => Right(scalaxb.fromXML[NarrativeType](node, stack))
          case (Some(fhirUrl), Some("NarrativeStatus")) => Right(scalaxb.fromXML[NarrativeStatus](node, stack))
          case (Some(fhirUrl), Some("Reference")) => Right(scalaxb.fromXML[ReferenceType](node, stack))
          case (Some(fhirUrl), Some("Period")) => Right(scalaxb.fromXML[PeriodType](node, stack))
          case (Some(fhirUrl), Some("Range")) => Right(scalaxb.fromXML[RangeTypeType](node, stack))
          case (Some(fhirUrl), Some("Coding")) => Right(scalaxb.fromXML[CodingType](node, stack))
          case (Some(fhirUrl), Some("SampledData")) => Right(scalaxb.fromXML[SampledDataType](node, stack))
          case (Some(fhirUrl), Some("SampledDataDataType")) => Right(scalaxb.fromXML[SampledDataDataType](node, stack))
          case (Some(fhirUrl), Some("CodeableConcept")) => Right(scalaxb.fromXML[CodeableConceptType](node, stack))
          case (Some(fhirUrl), Some("Address")) => Right(scalaxb.fromXML[AddressType2](node, stack))
          case (Some(fhirUrl), Some("AddressUse")) => Right(scalaxb.fromXML[AddressUse](node, stack))
          case (Some(fhirUrl), Some("AddressType")) => Right(scalaxb.fromXML[AddressType](node, stack))
          case (Some(fhirUrl), Some("Contributor")) => Right(scalaxb.fromXML[ContributorType2](node, stack))
          case (Some(fhirUrl), Some("ContributorType")) => Right(scalaxb.fromXML[ContributorType](node, stack))
          case (Some(fhirUrl), Some("DataRequirement.CodeFilter")) => Right(scalaxb.fromXML[DataRequirementu46CodeFilter](node, stack))
          case (Some(fhirUrl), Some("Dosage")) => Right(scalaxb.fromXML[DosageType](node, stack))
          case (Some(fhirUrl), Some("ContactDetail")) => Right(scalaxb.fromXML[ContactDetailType](node, stack))
          case (Some(fhirUrl), Some("ContactPoint")) => Right(scalaxb.fromXML[ContactPointType](node, stack))
          case (Some(fhirUrl), Some("ContactPointSystem")) => Right(scalaxb.fromXML[ContactPointSystem](node, stack))
          case (Some(fhirUrl), Some("ContactPointUse")) => Right(scalaxb.fromXML[ContactPointUse](node, stack))
          case (Some(fhirUrl), Some("Timing")) => Right(scalaxb.fromXML[TimingType](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition")) => Right(scalaxb.fromXML[ElementDefinitionType](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Mapping")) => Right(scalaxb.fromXML[ElementDefinitionu46Mapping](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Type")) => Right(scalaxb.fromXML[ElementDefinitionu46Type](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Slicing")) => Right(scalaxb.fromXML[ElementDefinitionu46Slicing](node, stack))
          case (Some(fhirUrl), Some("ElementDefinition.Discriminator")) => Right(scalaxb.fromXML[ElementDefinitionu46Discriminator](node, stack))
          case (Some(fhirUrl), Some("PropertyRepresentation")) => Right(scalaxb.fromXML[PropertyRepresentation](node, stack))
          case (Some(fhirUrl), Some("ConstraintSeverity")) => Right(scalaxb.fromXML[ConstraintSeverity](node, stack))
          case (Some(fhirUrl), Some("AggregationMode")) => Right(scalaxb.fromXML[AggregationMode](node, stack))
          case (Some(fhirUrl), Some("ReferenceVersionRules")) => Right(scalaxb.fromXML[ReferenceVersionRules](node, stack))
          case (Some(fhirUrl), Some("SlicingRules")) => Right(scalaxb.fromXML[SlicingRules](node, stack))
          case (Some(fhirUrl), Some("BindingStrength")) => Right(scalaxb.fromXML[BindingStrength](node, stack))
          case (Some(fhirUrl), Some("DiscriminatorType")) => Right(scalaxb.fromXML[DiscriminatorType](node, stack))
          case (Some(fhirUrl), Some("AccountStatus")) => Right(scalaxb.fromXML[AccountStatus](node, stack))
          case (Some(fhirUrl), Some("AuditEventOutcome")) => Right(scalaxb.fromXML[AuditEventOutcome](node, stack))
          case (Some(fhirUrl), Some("AuditEventAction")) => Right(scalaxb.fromXML[AuditEventAction](node, stack))
          case (Some(fhirUrl), Some("AuditEventAgentNetworkType")) => Right(scalaxb.fromXML[AuditEventAgentNetworkType](node, stack))
          case (Some(fhirUrl), Some("CarePlanStatus")) => Right(scalaxb.fromXML[CarePlanStatus](node, stack))
          case (Some(fhirUrl), Some("CarePlanActivityStatus")) => Right(scalaxb.fromXML[CarePlanActivityStatus](node, stack))
          case (Some(fhirUrl), Some("CarePlanIntent")) => Right(scalaxb.fromXML[CarePlanIntent](node, stack))
          case (Some(fhirUrl), Some("CareTeamStatus")) => Right(scalaxb.fromXML[CareTeamStatus](node, stack))
          case (Some(fhirUrl), Some("ChargeItemStatus")) => Right(scalaxb.fromXML[ChargeItemStatus](node, stack))
          case (Some(fhirUrl), Some("Use")) => Right(scalaxb.fromXML[Use](node, stack))
          case (Some(fhirUrl), Some("FinancialResourceStatusCodes")) => Right(scalaxb.fromXML[FinancialResourceStatusCodes](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpressionStatus")) => Right(scalaxb.fromXML[ClinicalImpressionStatus](node, stack))
          case (Some(fhirUrl), Some("FilterOperator")) => Right(scalaxb.fromXML[FilterOperator](node, stack))
          case (Some(fhirUrl), Some("PropertyType")) => Right(scalaxb.fromXML[PropertyType](node, stack))
          case (Some(fhirUrl), Some("CodeSystemHierarchyMeaning")) => Right(scalaxb.fromXML[CodeSystemHierarchyMeaning](node, stack))
          case (Some(fhirUrl), Some("CodeSystemContentMode")) => Right(scalaxb.fromXML[CodeSystemContentMode](node, stack))
          case (Some(fhirUrl), Some("EventStatus")) => Right(scalaxb.fromXML[EventStatus](node, stack))
          case (Some(fhirUrl), Some("CompositionStatus")) => Right(scalaxb.fromXML[CompositionStatus](node, stack))
          case (Some(fhirUrl), Some("ConfidentialityClassification")) => Right(scalaxb.fromXML[ConfidentialityClassification](node, stack))
          case (Some(fhirUrl), Some("DocumentRelationshipType")) => Right(scalaxb.fromXML[DocumentRelationshipType](node, stack))
          case (Some(fhirUrl), Some("CompositionAttestationMode")) => Right(scalaxb.fromXML[CompositionAttestationMode](node, stack))
          case (Some(fhirUrl), Some("ListMode")) => Right(scalaxb.fromXML[ListMode](node, stack))
          case (Some(fhirUrl), Some("ConceptMapGroupUnmappedMode")) => Right(scalaxb.fromXML[ConceptMapGroupUnmappedMode](node, stack))
          case (Some(fhirUrl), Some("ConsentDataMeaning")) => Right(scalaxb.fromXML[ConsentDataMeaning](node, stack))
          case (Some(fhirUrl), Some("ConsentState")) => Right(scalaxb.fromXML[ConsentState](node, stack))
          case (Some(fhirUrl), Some("ConsentExceptType")) => Right(scalaxb.fromXML[ConsentExceptType](node, stack))
          case (Some(fhirUrl), Some("ContractResourceStatusCodes")) => Right(scalaxb.fromXML[ContractResourceStatusCodes](node, stack))
          case (Some(fhirUrl), Some("DataElementStringency")) => Right(scalaxb.fromXML[DataElementStringency](node, stack))
          case (Some(fhirUrl), Some("ObservationStatus")) => Right(scalaxb.fromXML[ObservationStatus](node, stack))
          case (Some(fhirUrl), Some("DetectedIssueSeverity")) => Right(scalaxb.fromXML[DetectedIssueSeverity](node, stack))
          case (Some(fhirUrl), Some("FHIRDeviceStatus")) => Right(scalaxb.fromXML[FHIRDeviceStatus](node, stack))
          case (Some(fhirUrl), Some("UDIEntryType")) => Right(scalaxb.fromXML[UDIEntryType](node, stack))
          case (Some(fhirUrl), Some("MeasmntPrinciple")) => Right(scalaxb.fromXML[MeasmntPrinciple](node, stack))
          case (Some(fhirUrl), Some("DeviceMetricCalibrationType")) => Right(scalaxb.fromXML[DeviceMetricCalibrationType](node, stack))
          case (Some(fhirUrl), Some("DeviceMetricColor")) => Right(scalaxb.fromXML[DeviceMetricColor](node, stack))
          case (Some(fhirUrl), Some("DeviceMetricCalibrationState")) => Right(scalaxb.fromXML[DeviceMetricCalibrationState](node, stack))
          case (Some(fhirUrl), Some("DeviceMetricOperationalStatus")) => Right(scalaxb.fromXML[DeviceMetricOperationalStatus](node, stack))
          case (Some(fhirUrl), Some("DeviceMetricCategory")) => Right(scalaxb.fromXML[DeviceMetricCategory](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReportStatus")) => Right(scalaxb.fromXML[DiagnosticReportStatus](node, stack))
          case (Some(fhirUrl), Some("EndpointStatus")) => Right(scalaxb.fromXML[EndpointStatus](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefitStatus")) => Right(scalaxb.fromXML[ExplanationOfBenefitStatus](node, stack))
          case (Some(fhirUrl), Some("FamilyHistoryStatus")) => Right(scalaxb.fromXML[FamilyHistoryStatus](node, stack))
          case (Some(fhirUrl), Some("GroupType")) => Right(scalaxb.fromXML[GroupType](node, stack))
          case (Some(fhirUrl), Some("DaysOfWeek")) => Right(scalaxb.fromXML[DaysOfWeek](node, stack))
          case (Some(fhirUrl), Some("ImmunizationStatusCodes")) => Right(scalaxb.fromXML[ImmunizationStatusCodes](node, stack))
          case (Some(fhirUrl), Some("GuideDependencyType")) => Right(scalaxb.fromXML[GuideDependencyType](node, stack))
          case (Some(fhirUrl), Some("GuidePageKind")) => Right(scalaxb.fromXML[GuidePageKind](node, stack))
          case (Some(fhirUrl), Some("MeasureReportStatus")) => Right(scalaxb.fromXML[MeasureReportStatus](node, stack))
          case (Some(fhirUrl), Some("MeasureReportType")) => Right(scalaxb.fromXML[MeasureReportType](node, stack))
          case (Some(fhirUrl), Some("MedicationStatus")) => Right(scalaxb.fromXML[MedicationStatus](node, stack))
          case (Some(fhirUrl), Some("MedicationDispenseStatus")) => Right(scalaxb.fromXML[MedicationDispenseStatus](node, stack))
          case (Some(fhirUrl), Some("MedicationRequestStatus")) => Right(scalaxb.fromXML[MedicationRequestStatus](node, stack))
          case (Some(fhirUrl), Some("MedicationRequestPriority")) => Right(scalaxb.fromXML[MedicationRequestPriority](node, stack))
          case (Some(fhirUrl), Some("MedicationRequestIntent")) => Right(scalaxb.fromXML[MedicationRequestIntent](node, stack))
          case (Some(fhirUrl), Some("ResponseType")) => Right(scalaxb.fromXML[ResponseType](node, stack))
          case (Some(fhirUrl), Some("NamingSystemIdentifierType")) => Right(scalaxb.fromXML[NamingSystemIdentifierType](node, stack))
          case (Some(fhirUrl), Some("NamingSystemType")) => Right(scalaxb.fromXML[NamingSystemType](node, stack))
          case (Some(fhirUrl), Some("LinkType")) => Right(scalaxb.fromXML[LinkType](node, stack))
          case (Some(fhirUrl), Some("IdentityAssuranceLevel")) => Right(scalaxb.fromXML[IdentityAssuranceLevel](node, stack))
          case (Some(fhirUrl), Some("ActionRequiredBehavior")) => Right(scalaxb.fromXML[ActionRequiredBehavior](node, stack))
          case (Some(fhirUrl), Some("ActionRelationshipType")) => Right(scalaxb.fromXML[ActionRelationshipType](node, stack))
          case (Some(fhirUrl), Some("ActionGroupingBehavior")) => Right(scalaxb.fromXML[ActionGroupingBehavior](node, stack))
          case (Some(fhirUrl), Some("ActionSelectionBehavior")) => Right(scalaxb.fromXML[ActionSelectionBehavior](node, stack))
          case (Some(fhirUrl), Some("ActionCardinalityBehavior")) => Right(scalaxb.fromXML[ActionCardinalityBehavior](node, stack))
          case (Some(fhirUrl), Some("ActionPrecheckBehavior")) => Right(scalaxb.fromXML[ActionPrecheckBehavior](node, stack))
          case (Some(fhirUrl), Some("ActionConditionKind")) => Right(scalaxb.fromXML[ActionConditionKind](node, stack))
          case (Some(fhirUrl), Some("RequestIntent")) => Right(scalaxb.fromXML[RequestIntent](node, stack))
          case (Some(fhirUrl), Some("ActionList")) => Right(scalaxb.fromXML[ActionList](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponseStatus")) => Right(scalaxb.fromXML[QuestionnaireResponseStatus](node, stack))
          case (Some(fhirUrl), Some("ResearchSubjectStatus")) => Right(scalaxb.fromXML[ResearchSubjectStatus](node, stack))
          case (Some(fhirUrl), Some("repositoryType")) => Right(scalaxb.fromXML[RepositoryType](node, stack))
          case (Some(fhirUrl), Some("qualityType")) => Right(scalaxb.fromXML[QualityType](node, stack))
          case (Some(fhirUrl), Some("SlotStatus")) => Right(scalaxb.fromXML[SlotStatus](node, stack))
          case (Some(fhirUrl), Some("SpecimenStatus")) => Right(scalaxb.fromXML[SpecimenStatus](node, stack))
          case (Some(fhirUrl), Some("StructureDefinitionKind")) => Right(scalaxb.fromXML[StructureDefinitionKind](node, stack))
          case (Some(fhirUrl), Some("TypeDerivationRule")) => Right(scalaxb.fromXML[TypeDerivationRule](node, stack))
          case (Some(fhirUrl), Some("ExtensionContext")) => Right(scalaxb.fromXML[ExtensionContext](node, stack))
          case (Some(fhirUrl), Some("FHIRSubstanceStatus")) => Right(scalaxb.fromXML[FHIRSubstanceStatus](node, stack))
          case (Some(fhirUrl), Some("SupplyDeliveryStatus")) => Right(scalaxb.fromXML[SupplyDeliveryStatus](node, stack))
          case (Some(fhirUrl), Some("TaskStatus")) => Right(scalaxb.fromXML[TaskStatus](node, stack))
          case (Some(fhirUrl), Some("TestReportStatus")) => Right(scalaxb.fromXML[TestReportStatus](node, stack))
          case (Some(fhirUrl), Some("TestReportActionResult")) => Right(scalaxb.fromXML[TestReportActionResult](node, stack))
          case (Some(fhirUrl), Some("TestReportParticipantType")) => Right(scalaxb.fromXML[TestReportParticipantType](node, stack))
          case (Some(fhirUrl), Some("TestReportResult")) => Right(scalaxb.fromXML[TestReportResult](node, stack))
          case (Some(fhirUrl), Some("VisionBase")) => Right(scalaxb.fromXML[VisionBase](node, stack))
          case (Some(fhirUrl), Some("VisionEyes")) => Right(scalaxb.fromXML[VisionEyes](node, stack))
          case _ => Right(scalaxb.fromXML[ElementType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: Elementable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: TestScriptRequestMethodCode => scalaxb.toXML[TestScriptRequestMethodCode](x, __namespace, __elementLabel, __scope, true)
      case x: AssertionResponseTypes => scalaxb.toXML[AssertionResponseTypes](x, __namespace, __elementLabel, __scope, true)
      case x: AssertionOperatorType => scalaxb.toXML[AssertionOperatorType](x, __namespace, __elementLabel, __scope, true)
      case x: AssertionDirectionType => scalaxb.toXML[AssertionDirectionType](x, __namespace, __elementLabel, __scope, true)
      case x: ContentType => scalaxb.toXML[ContentType](x, __namespace, __elementLabel, __scope, true)
      case x: FHIRDefinedType => scalaxb.toXML[FHIRDefinedType](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyRequestStatus => scalaxb.toXML[SupplyRequestStatus](x, __namespace, __elementLabel, __scope, true)
      case x: SubscriptionChannelType => scalaxb.toXML[SubscriptionChannelType](x, __namespace, __elementLabel, __scope, true)
      case x: SubscriptionStatus => scalaxb.toXML[SubscriptionStatus](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapModelMode => scalaxb.toXML[StructureMapModelMode](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapGroupTypeMode => scalaxb.toXML[StructureMapGroupTypeMode](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapSourceListMode => scalaxb.toXML[StructureMapSourceListMode](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapTransform => scalaxb.toXML[StructureMapTransform](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapTargetListMode => scalaxb.toXML[StructureMapTargetListMode](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapContextType => scalaxb.toXML[StructureMapContextType](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapInputMode => scalaxb.toXML[StructureMapInputMode](x, __namespace, __elementLabel, __scope, true)
      case x: SearchComparator => scalaxb.toXML[SearchComparator](x, __namespace, __elementLabel, __scope, true)
      case x: SearchModifierCode => scalaxb.toXML[SearchModifierCode](x, __namespace, __elementLabel, __scope, true)
      case x: XPathUsageType => scalaxb.toXML[XPathUsageType](x, __namespace, __elementLabel, __scope, true)
      case x: ResearchStudyStatus => scalaxb.toXML[ResearchStudyStatus](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireItemType => scalaxb.toXML[QuestionnaireItemType](x, __namespace, __elementLabel, __scope, true)
      case x: ProvenanceEntityRole => scalaxb.toXML[ProvenanceEntityRole](x, __namespace, __elementLabel, __scope, true)
      case x: IssueSeverity => scalaxb.toXML[IssueSeverity](x, __namespace, __elementLabel, __scope, true)
      case x: IssueType => scalaxb.toXML[IssueType](x, __namespace, __elementLabel, __scope, true)
      case x: OperationKind => scalaxb.toXML[OperationKind](x, __namespace, __elementLabel, __scope, true)
      case x: OperationParameterUse => scalaxb.toXML[OperationParameterUse](x, __namespace, __elementLabel, __scope, true)
      case x: FHIRAllTypes => scalaxb.toXML[FHIRAllTypes](x, __namespace, __elementLabel, __scope, true)
      case x: ObservationRelationshipType => scalaxb.toXML[ObservationRelationshipType](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderStatus => scalaxb.toXML[NutritionOrderStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationStatementTaken => scalaxb.toXML[MedicationStatementTaken](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationStatementStatus => scalaxb.toXML[MedicationStatementStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationAdministrationStatus => scalaxb.toXML[MedicationAdministrationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: DigitalMediaType => scalaxb.toXML[DigitalMediaType](x, __namespace, __elementLabel, __scope, true)
      case x: LocationStatus => scalaxb.toXML[LocationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: LocationMode => scalaxb.toXML[LocationMode](x, __namespace, __elementLabel, __scope, true)
      case x: ListStatus => scalaxb.toXML[ListStatus](x, __namespace, __elementLabel, __scope, true)
      case x: LinkageTypeType => scalaxb.toXML[LinkageTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: InstanceAvailability => scalaxb.toXML[InstanceAvailability](x, __namespace, __elementLabel, __scope, true)
      case x: GuidanceResponseStatus => scalaxb.toXML[GuidanceResponseStatus](x, __namespace, __elementLabel, __scope, true)
      case x: GraphCompartmentRule => scalaxb.toXML[GraphCompartmentRule](x, __namespace, __elementLabel, __scope, true)
      case x: GoalStatus => scalaxb.toXML[GoalStatus](x, __namespace, __elementLabel, __scope, true)
      case x: FlagStatus => scalaxb.toXML[FlagStatus](x, __namespace, __elementLabel, __scope, true)
      case x: SystemVersionProcessingMode => scalaxb.toXML[SystemVersionProcessingMode](x, __namespace, __elementLabel, __scope, true)
      case x: EpisodeOfCareStatus => scalaxb.toXML[EpisodeOfCareStatus](x, __namespace, __elementLabel, __scope, true)
      case x: EncounterStatus => scalaxb.toXML[EncounterStatus](x, __namespace, __elementLabel, __scope, true)
      case x: EncounterLocationStatus => scalaxb.toXML[EncounterLocationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceUseStatementStatus => scalaxb.toXML[DeviceUseStatementStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ConditionClinicalStatusCodes => scalaxb.toXML[ConditionClinicalStatusCodes](x, __namespace, __elementLabel, __scope, true)
      case x: ConditionVerificationStatus => scalaxb.toXML[ConditionVerificationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: CompartmentType => scalaxb.toXML[CompartmentType](x, __namespace, __elementLabel, __scope, true)
      case x: RequestPriority => scalaxb.toXML[RequestPriority](x, __namespace, __elementLabel, __scope, true)
      case x: RequestStatus => scalaxb.toXML[RequestStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ConditionalDeleteStatus => scalaxb.toXML[ConditionalDeleteStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ReferenceHandlingPolicy => scalaxb.toXML[ReferenceHandlingPolicy](x, __namespace, __elementLabel, __scope, true)
      case x: ConditionalReadStatus => scalaxb.toXML[ConditionalReadStatus](x, __namespace, __elementLabel, __scope, true)
      case x: SystemRestfulInteraction => scalaxb.toXML[SystemRestfulInteraction](x, __namespace, __elementLabel, __scope, true)
      case x: TypeRestfulInteraction => scalaxb.toXML[TypeRestfulInteraction](x, __namespace, __elementLabel, __scope, true)
      case x: UnknownContentCode => scalaxb.toXML[UnknownContentCode](x, __namespace, __elementLabel, __scope, true)
      case x: RestfulCapabilityMode => scalaxb.toXML[RestfulCapabilityMode](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentMode => scalaxb.toXML[DocumentMode](x, __namespace, __elementLabel, __scope, true)
      case x: MessageSignificanceCategory => scalaxb.toXML[MessageSignificanceCategory](x, __namespace, __elementLabel, __scope, true)
      case x: ResourceVersionPolicy => scalaxb.toXML[ResourceVersionPolicy](x, __namespace, __elementLabel, __scope, true)
      case x: EventCapabilityMode => scalaxb.toXML[EventCapabilityMode](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementKind => scalaxb.toXML[CapabilityStatementKind](x, __namespace, __elementLabel, __scope, true)
      case x: SearchEntryMode => scalaxb.toXML[SearchEntryMode](x, __namespace, __elementLabel, __scope, true)
      case x: BundleTypeType => scalaxb.toXML[BundleTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: HTTPVerb => scalaxb.toXML[HTTPVerb](x, __namespace, __elementLabel, __scope, true)
      case x: ParticipationStatus => scalaxb.toXML[ParticipationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: AppointmentStatus => scalaxb.toXML[AppointmentStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ParticipantRequired => scalaxb.toXML[ParticipantRequired](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceClinicalStatus => scalaxb.toXML[AllergyIntoleranceClinicalStatus](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceSeverity => scalaxb.toXML[AllergyIntoleranceSeverity](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceVerificationStatus => scalaxb.toXML[AllergyIntoleranceVerificationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceCategory => scalaxb.toXML[AllergyIntoleranceCategory](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceTypeType => scalaxb.toXML[AllergyIntoleranceTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceCriticality => scalaxb.toXML[AllergyIntoleranceCriticality](x, __namespace, __elementLabel, __scope, true)
      case x: AdverseEventCategory => scalaxb.toXML[AdverseEventCategory](x, __namespace, __elementLabel, __scope, true)
      case x: AdverseEventCausality => scalaxb.toXML[AdverseEventCausality](x, __namespace, __elementLabel, __scope, true)
      case x: ResourceTypeType => scalaxb.toXML[ResourceTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: ActionParticipantType => scalaxb.toXML[ActionParticipantType](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceStatus => scalaxb.toXML[DocumentReferenceStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapEquivalence => scalaxb.toXML[ConceptMapEquivalence](x, __namespace, __elementLabel, __scope, true)
      case x: NoteType => scalaxb.toXML[NoteType](x, __namespace, __elementLabel, __scope, true)
      case x: RemittanceOutcome => scalaxb.toXML[RemittanceOutcome](x, __namespace, __elementLabel, __scope, true)
      case x: AdministrativeGender => scalaxb.toXML[AdministrativeGender](x, __namespace, __elementLabel, __scope, true)
      case x: SearchParamType => scalaxb.toXML[SearchParamType](x, __namespace, __elementLabel, __scope, true)
      case x: PublicationStatus => scalaxb.toXML[PublicationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ParameterDefinitionType => scalaxb.toXML[ParameterDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Binding => scalaxb.toXML[ElementDefinitionu46Binding](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Example => scalaxb.toXML[ElementDefinitionu46Example](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Base => scalaxb.toXML[ElementDefinitionu46Base](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Constraint => scalaxb.toXML[ElementDefinitionu46Constraint](x, __namespace, __elementLabel, __scope, true)
      case x: EventTiming => scalaxb.toXML[EventTiming](x, __namespace, __elementLabel, __scope, true)
      case x: UnitsOfTime => scalaxb.toXML[UnitsOfTime](x, __namespace, __elementLabel, __scope, true)
      case x: Timingu46Repeat => scalaxb.toXML[Timingu46Repeat](x, __namespace, __elementLabel, __scope, true)
      case x: UsageContextType => scalaxb.toXML[UsageContextType](x, __namespace, __elementLabel, __scope, true)
      case x: NameUse => scalaxb.toXML[NameUse](x, __namespace, __elementLabel, __scope, true)
      case x: HumanNameType => scalaxb.toXML[HumanNameType](x, __namespace, __elementLabel, __scope, true)
      case x: RelatedArtifactTypeType => scalaxb.toXML[RelatedArtifactTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: RelatedArtifactType => scalaxb.toXML[RelatedArtifactType](x, __namespace, __elementLabel, __scope, true)
      case x: DataRequirementu46DateFilter => scalaxb.toXML[DataRequirementu46DateFilter](x, __namespace, __elementLabel, __scope, true)
      case x: DataRequirementType => scalaxb.toXML[DataRequirementType](x, __namespace, __elementLabel, __scope, true)
      case x: TriggerType => scalaxb.toXML[TriggerType](x, __namespace, __elementLabel, __scope, true)
      case x: TriggerDefinitionType => scalaxb.toXML[TriggerDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: MetaType => scalaxb.toXML[MetaType](x, __namespace, __elementLabel, __scope, true)
      case x: RatioType => scalaxb.toXML[RatioType](x, __namespace, __elementLabel, __scope, true)
      case x: SignatureType => scalaxb.toXML[SignatureType](x, __namespace, __elementLabel, __scope, true)
      case x: IdentifierUse => scalaxb.toXML[IdentifierUse](x, __namespace, __elementLabel, __scope, true)
      case x: IdentifierType => scalaxb.toXML[IdentifierType](x, __namespace, __elementLabel, __scope, true)
      case x: AnnotationType => scalaxb.toXML[AnnotationType](x, __namespace, __elementLabel, __scope, true)
      case x: AttachmentType => scalaxb.toXML[AttachmentType](x, __namespace, __elementLabel, __scope, true)
      case x: QuantityComparator => scalaxb.toXML[QuantityComparator](x, __namespace, __elementLabel, __scope, true)
      case x: Quantityable => scalaxb.toXML[Quantityable](x, __namespace, __elementLabel, __scope, true)
      case x: BackboneElementable => scalaxb.toXML[BackboneElementable](x, __namespace, __elementLabel, __scope, true)
      case x: DateType => scalaxb.toXML[DateType](x, __namespace, __elementLabel, __scope, true)
      case x: DateTimeType => scalaxb.toXML[DateTimeType](x, __namespace, __elementLabel, __scope, true)
      case x: CodeType => scalaxb.toXML[CodeType](x, __namespace, __elementLabel, __scope, true)
      case x: StringTypeType => scalaxb.toXML[StringTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: IntegerType => scalaxb.toXML[IntegerType](x, __namespace, __elementLabel, __scope, true)
      case x: OidType => scalaxb.toXML[OidType](x, __namespace, __elementLabel, __scope, true)
      case x: UriType => scalaxb.toXML[UriType](x, __namespace, __elementLabel, __scope, true)
      case x: UuidType => scalaxb.toXML[UuidType](x, __namespace, __elementLabel, __scope, true)
      case x: InstantType => scalaxb.toXML[InstantType](x, __namespace, __elementLabel, __scope, true)
      case x: BooleanTypeType => scalaxb.toXML[BooleanTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: Base64BinaryTypeType => scalaxb.toXML[Base64BinaryTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: UnsignedIntType => scalaxb.toXML[UnsignedIntType](x, __namespace, __elementLabel, __scope, true)
      case x: MarkdownType => scalaxb.toXML[MarkdownType](x, __namespace, __elementLabel, __scope, true)
      case x: TimeType => scalaxb.toXML[TimeType](x, __namespace, __elementLabel, __scope, true)
      case x: IdType => scalaxb.toXML[IdType](x, __namespace, __elementLabel, __scope, true)
      case x: PositiveIntType => scalaxb.toXML[PositiveIntType](x, __namespace, __elementLabel, __scope, true)
      case x: DecimalType => scalaxb.toXML[DecimalType](x, __namespace, __elementLabel, __scope, true)
      case x: ExtensionType => scalaxb.toXML[ExtensionType](x, __namespace, __elementLabel, __scope, true)
      case x: NarrativeType => scalaxb.toXML[NarrativeType](x, __namespace, __elementLabel, __scope, true)
      case x: NarrativeStatus => scalaxb.toXML[NarrativeStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ReferenceType => scalaxb.toXML[ReferenceType](x, __namespace, __elementLabel, __scope, true)
      case x: PeriodType => scalaxb.toXML[PeriodType](x, __namespace, __elementLabel, __scope, true)
      case x: RangeTypeType => scalaxb.toXML[RangeTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: CodingType => scalaxb.toXML[CodingType](x, __namespace, __elementLabel, __scope, true)
      case x: SampledDataType => scalaxb.toXML[SampledDataType](x, __namespace, __elementLabel, __scope, true)
      case x: SampledDataDataType => scalaxb.toXML[SampledDataDataType](x, __namespace, __elementLabel, __scope, true)
      case x: CodeableConceptType => scalaxb.toXML[CodeableConceptType](x, __namespace, __elementLabel, __scope, true)
      case x: AddressType2 => scalaxb.toXML[AddressType2](x, __namespace, __elementLabel, __scope, true)
      case x: AddressUse => scalaxb.toXML[AddressUse](x, __namespace, __elementLabel, __scope, true)
      case x: AddressType => scalaxb.toXML[AddressType](x, __namespace, __elementLabel, __scope, true)
      case x: ContributorType2 => scalaxb.toXML[ContributorType2](x, __namespace, __elementLabel, __scope, true)
      case x: ContributorType => scalaxb.toXML[ContributorType](x, __namespace, __elementLabel, __scope, true)
      case x: DataRequirementu46CodeFilter => scalaxb.toXML[DataRequirementu46CodeFilter](x, __namespace, __elementLabel, __scope, true)
      case x: DosageType => scalaxb.toXML[DosageType](x, __namespace, __elementLabel, __scope, true)
      case x: ContactDetailType => scalaxb.toXML[ContactDetailType](x, __namespace, __elementLabel, __scope, true)
      case x: ContactPointType => scalaxb.toXML[ContactPointType](x, __namespace, __elementLabel, __scope, true)
      case x: ContactPointSystem => scalaxb.toXML[ContactPointSystem](x, __namespace, __elementLabel, __scope, true)
      case x: ContactPointUse => scalaxb.toXML[ContactPointUse](x, __namespace, __elementLabel, __scope, true)
      case x: TimingType => scalaxb.toXML[TimingType](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionType => scalaxb.toXML[ElementDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Mapping => scalaxb.toXML[ElementDefinitionu46Mapping](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Type => scalaxb.toXML[ElementDefinitionu46Type](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Slicing => scalaxb.toXML[ElementDefinitionu46Slicing](x, __namespace, __elementLabel, __scope, true)
      case x: ElementDefinitionu46Discriminator => scalaxb.toXML[ElementDefinitionu46Discriminator](x, __namespace, __elementLabel, __scope, true)
      case x: PropertyRepresentation => scalaxb.toXML[PropertyRepresentation](x, __namespace, __elementLabel, __scope, true)
      case x: ConstraintSeverity => scalaxb.toXML[ConstraintSeverity](x, __namespace, __elementLabel, __scope, true)
      case x: AggregationMode => scalaxb.toXML[AggregationMode](x, __namespace, __elementLabel, __scope, true)
      case x: ReferenceVersionRules => scalaxb.toXML[ReferenceVersionRules](x, __namespace, __elementLabel, __scope, true)
      case x: SlicingRules => scalaxb.toXML[SlicingRules](x, __namespace, __elementLabel, __scope, true)
      case x: BindingStrength => scalaxb.toXML[BindingStrength](x, __namespace, __elementLabel, __scope, true)
      case x: DiscriminatorType => scalaxb.toXML[DiscriminatorType](x, __namespace, __elementLabel, __scope, true)
      case x: AccountStatus => scalaxb.toXML[AccountStatus](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventOutcome => scalaxb.toXML[AuditEventOutcome](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventAction => scalaxb.toXML[AuditEventAction](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventAgentNetworkType => scalaxb.toXML[AuditEventAgentNetworkType](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanStatus => scalaxb.toXML[CarePlanStatus](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanActivityStatus => scalaxb.toXML[CarePlanActivityStatus](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanIntent => scalaxb.toXML[CarePlanIntent](x, __namespace, __elementLabel, __scope, true)
      case x: CareTeamStatus => scalaxb.toXML[CareTeamStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ChargeItemStatus => scalaxb.toXML[ChargeItemStatus](x, __namespace, __elementLabel, __scope, true)
      case x: Use => scalaxb.toXML[Use](x, __namespace, __elementLabel, __scope, true)
      case x: FinancialResourceStatusCodes => scalaxb.toXML[FinancialResourceStatusCodes](x, __namespace, __elementLabel, __scope, true)
      case x: ClinicalImpressionStatus => scalaxb.toXML[ClinicalImpressionStatus](x, __namespace, __elementLabel, __scope, true)
      case x: FilterOperator => scalaxb.toXML[FilterOperator](x, __namespace, __elementLabel, __scope, true)
      case x: PropertyType => scalaxb.toXML[PropertyType](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemHierarchyMeaning => scalaxb.toXML[CodeSystemHierarchyMeaning](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemContentMode => scalaxb.toXML[CodeSystemContentMode](x, __namespace, __elementLabel, __scope, true)
      case x: EventStatus => scalaxb.toXML[EventStatus](x, __namespace, __elementLabel, __scope, true)
      case x: CompositionStatus => scalaxb.toXML[CompositionStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ConfidentialityClassification => scalaxb.toXML[ConfidentialityClassification](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentRelationshipType => scalaxb.toXML[DocumentRelationshipType](x, __namespace, __elementLabel, __scope, true)
      case x: CompositionAttestationMode => scalaxb.toXML[CompositionAttestationMode](x, __namespace, __elementLabel, __scope, true)
      case x: ListMode => scalaxb.toXML[ListMode](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapGroupUnmappedMode => scalaxb.toXML[ConceptMapGroupUnmappedMode](x, __namespace, __elementLabel, __scope, true)
      case x: ConsentDataMeaning => scalaxb.toXML[ConsentDataMeaning](x, __namespace, __elementLabel, __scope, true)
      case x: ConsentState => scalaxb.toXML[ConsentState](x, __namespace, __elementLabel, __scope, true)
      case x: ConsentExceptType => scalaxb.toXML[ConsentExceptType](x, __namespace, __elementLabel, __scope, true)
      case x: ContractResourceStatusCodes => scalaxb.toXML[ContractResourceStatusCodes](x, __namespace, __elementLabel, __scope, true)
      case x: DataElementStringency => scalaxb.toXML[DataElementStringency](x, __namespace, __elementLabel, __scope, true)
      case x: ObservationStatus => scalaxb.toXML[ObservationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: DetectedIssueSeverity => scalaxb.toXML[DetectedIssueSeverity](x, __namespace, __elementLabel, __scope, true)
      case x: FHIRDeviceStatus => scalaxb.toXML[FHIRDeviceStatus](x, __namespace, __elementLabel, __scope, true)
      case x: UDIEntryType => scalaxb.toXML[UDIEntryType](x, __namespace, __elementLabel, __scope, true)
      case x: MeasmntPrinciple => scalaxb.toXML[MeasmntPrinciple](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricCalibrationType => scalaxb.toXML[DeviceMetricCalibrationType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricColor => scalaxb.toXML[DeviceMetricColor](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricCalibrationState => scalaxb.toXML[DeviceMetricCalibrationState](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricOperationalStatus => scalaxb.toXML[DeviceMetricOperationalStatus](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricCategory => scalaxb.toXML[DeviceMetricCategory](x, __namespace, __elementLabel, __scope, true)
      case x: DiagnosticReportStatus => scalaxb.toXML[DiagnosticReportStatus](x, __namespace, __elementLabel, __scope, true)
      case x: EndpointStatus => scalaxb.toXML[EndpointStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitStatus => scalaxb.toXML[ExplanationOfBenefitStatus](x, __namespace, __elementLabel, __scope, true)
      case x: FamilyHistoryStatus => scalaxb.toXML[FamilyHistoryStatus](x, __namespace, __elementLabel, __scope, true)
      case x: GroupType => scalaxb.toXML[GroupType](x, __namespace, __elementLabel, __scope, true)
      case x: DaysOfWeek => scalaxb.toXML[DaysOfWeek](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationStatusCodes => scalaxb.toXML[ImmunizationStatusCodes](x, __namespace, __elementLabel, __scope, true)
      case x: GuideDependencyType => scalaxb.toXML[GuideDependencyType](x, __namespace, __elementLabel, __scope, true)
      case x: GuidePageKind => scalaxb.toXML[GuidePageKind](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportStatus => scalaxb.toXML[MeasureReportStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportType => scalaxb.toXML[MeasureReportType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationStatus => scalaxb.toXML[MedicationStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationDispenseStatus => scalaxb.toXML[MedicationDispenseStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestStatus => scalaxb.toXML[MedicationRequestStatus](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestPriority => scalaxb.toXML[MedicationRequestPriority](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestIntent => scalaxb.toXML[MedicationRequestIntent](x, __namespace, __elementLabel, __scope, true)
      case x: ResponseType => scalaxb.toXML[ResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: NamingSystemIdentifierType => scalaxb.toXML[NamingSystemIdentifierType](x, __namespace, __elementLabel, __scope, true)
      case x: NamingSystemType => scalaxb.toXML[NamingSystemType](x, __namespace, __elementLabel, __scope, true)
      case x: LinkType => scalaxb.toXML[LinkType](x, __namespace, __elementLabel, __scope, true)
      case x: IdentityAssuranceLevel => scalaxb.toXML[IdentityAssuranceLevel](x, __namespace, __elementLabel, __scope, true)
      case x: ActionRequiredBehavior => scalaxb.toXML[ActionRequiredBehavior](x, __namespace, __elementLabel, __scope, true)
      case x: ActionRelationshipType => scalaxb.toXML[ActionRelationshipType](x, __namespace, __elementLabel, __scope, true)
      case x: ActionGroupingBehavior => scalaxb.toXML[ActionGroupingBehavior](x, __namespace, __elementLabel, __scope, true)
      case x: ActionSelectionBehavior => scalaxb.toXML[ActionSelectionBehavior](x, __namespace, __elementLabel, __scope, true)
      case x: ActionCardinalityBehavior => scalaxb.toXML[ActionCardinalityBehavior](x, __namespace, __elementLabel, __scope, true)
      case x: ActionPrecheckBehavior => scalaxb.toXML[ActionPrecheckBehavior](x, __namespace, __elementLabel, __scope, true)
      case x: ActionConditionKind => scalaxb.toXML[ActionConditionKind](x, __namespace, __elementLabel, __scope, true)
      case x: RequestIntent => scalaxb.toXML[RequestIntent](x, __namespace, __elementLabel, __scope, true)
      case x: ActionList => scalaxb.toXML[ActionList](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireResponseStatus => scalaxb.toXML[QuestionnaireResponseStatus](x, __namespace, __elementLabel, __scope, true)
      case x: ResearchSubjectStatus => scalaxb.toXML[ResearchSubjectStatus](x, __namespace, __elementLabel, __scope, true)
      case x: RepositoryType => scalaxb.toXML[RepositoryType](x, __namespace, __elementLabel, __scope, true)
      case x: QualityType => scalaxb.toXML[QualityType](x, __namespace, __elementLabel, __scope, true)
      case x: SlotStatus => scalaxb.toXML[SlotStatus](x, __namespace, __elementLabel, __scope, true)
      case x: SpecimenStatus => scalaxb.toXML[SpecimenStatus](x, __namespace, __elementLabel, __scope, true)
      case x: StructureDefinitionKind => scalaxb.toXML[StructureDefinitionKind](x, __namespace, __elementLabel, __scope, true)
      case x: TypeDerivationRule => scalaxb.toXML[TypeDerivationRule](x, __namespace, __elementLabel, __scope, true)
      case x: ExtensionContext => scalaxb.toXML[ExtensionContext](x, __namespace, __elementLabel, __scope, true)
      case x: FHIRSubstanceStatus => scalaxb.toXML[FHIRSubstanceStatus](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyDeliveryStatus => scalaxb.toXML[SupplyDeliveryStatus](x, __namespace, __elementLabel, __scope, true)
      case x: TaskStatus => scalaxb.toXML[TaskStatus](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportStatus => scalaxb.toXML[TestReportStatus](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportActionResult => scalaxb.toXML[TestReportActionResult](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportParticipantType => scalaxb.toXML[TestReportParticipantType](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportResult => scalaxb.toXML[TestReportResult](x, __namespace, __elementLabel, __scope, true)
      case x: VisionBase => scalaxb.toXML[VisionBase](x, __namespace, __elementLabel, __scope, true)
      case x: VisionEyes => scalaxb.toXML[VisionEyes](x, __namespace, __elementLabel, __scope, true)
      case x: ElementType => scalaxb.toXML[ElementType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComionkinmrshl7fhir_ElementTypeFormat extends scalaxb.ElemNameParser[ElementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ElementType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ReferenceTypeFormat extends scalaxb.ElemNameParser[ReferenceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Reference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReferenceType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ReferenceType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.reference map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_QuantityableFormat extends scalaxb.XMLFormat[Quantityable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Quantityable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some(fhirUrl), Some("Age")) => Right(scalaxb.fromXML[AgeType](node, stack))
          case (Some(fhirUrl), Some("Count")) => Right(scalaxb.fromXML[CountType](node, stack))
          case (Some(fhirUrl), Some("Duration")) => Right(scalaxb.fromXML[DurationType](node, stack))
          case (Some(fhirUrl), Some("Money")) => Right(scalaxb.fromXML[MoneyType](node, stack))
          case (Some(fhirUrl), Some("Distance")) => Right(scalaxb.fromXML[DistanceType](node, stack))
          case _ => Right(scalaxb.fromXML[QuantityType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: Quantityable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: AgeType => scalaxb.toXML[AgeType](x, __namespace, __elementLabel, __scope, true)
      case x: CountType => scalaxb.toXML[CountType](x, __namespace, __elementLabel, __scope, true)
      case x: DurationType => scalaxb.toXML[DurationType](x, __namespace, __elementLabel, __scope, true)
      case x: MoneyType => scalaxb.toXML[MoneyType](x, __namespace, __elementLabel, __scope, true)
      case x: DistanceType => scalaxb.toXML[DistanceType](x, __namespace, __elementLabel, __scope, true)
      case x: QuantityType => scalaxb.toXML[QuantityType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComionkinmrshl7fhir_QuantityTypeFormat extends scalaxb.ElemNameParser[QuantityType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Quantity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuantityType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      QuantityType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuantityType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuantityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_QuantityComparatoru45listFormat = new DefaultComionkinmrshl7fhir_QuantityComparatoru45listFormat {}
  trait DefaultComionkinmrshl7fhir_QuantityComparatoru45listFormat extends scalaxb.XMLFormat[QuantityComparatoru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): QuantityComparatoru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("<")) => U60
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("<=")) => U60u61
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text(">=")) => U62u61
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text(">")) => U62

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QuantityComparatoru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: QuantityComparatoru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_QuantityComparatorFormat extends scalaxb.ElemNameParser[QuantityComparator] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuantityComparator")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuantityComparator] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      QuantityComparator(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[QuantityComparatoru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuantityComparator, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuantityComparator, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PeriodTypeFormat extends scalaxb.ElemNameParser[PeriodType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Period")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PeriodType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ^^
      { case p1 ~ p2 ~ p3 =>
      PeriodType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PeriodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PeriodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.start map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_AttachmentTypeFormat extends scalaxb.ElemNameParser[AttachmentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Attachment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AttachmentType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "data")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "size")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hash")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "creation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      AttachmentType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AttachmentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AttachmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.contentType map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("contentType"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.data map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("data"), __scope, false) } getOrElse {Nil},
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.size map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("size"), __scope, false) } getOrElse {Nil},
        __obj.hash map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("hash"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.creation map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("creation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DurationTypeFormat extends scalaxb.ElemNameParser[DurationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Duration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DurationType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      DurationType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DurationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DurationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CountTypeFormat extends scalaxb.ElemNameParser[CountType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Count")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CountType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CountType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CountType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CountType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RangeTypeTypeFormat extends scalaxb.ElemNameParser[RangeTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Range")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RangeTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "low")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "high")) ^^
      { case p1 ~ p2 ~ p3 =>
      RangeTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RangeTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RangeTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.low map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("low"), __scope, false) } getOrElse {Nil},
        __obj.high map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("high"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_AnnotationTypeFormat extends scalaxb.ElemNameParser[AnnotationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Annotation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AnnotationType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authorReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authorString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "time")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      AnnotationType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AnnotationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AnnotationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.authorReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authorReference"), __scope, false) } getOrElse {Nil},
        __obj.authorString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("authorString"), __scope, false) } getOrElse {Nil},
        __obj.time map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("time"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.text, Some(fhirUrl), Some("text"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_MoneyTypeFormat extends scalaxb.ElemNameParser[MoneyType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Money")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MoneyType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MoneyType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MoneyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MoneyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_IdentifierTypeFormat extends scalaxb.ElemNameParser[IdentifierType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Identifier")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IdentifierType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assigner")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      IdentifierType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[IdentifierUse](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IdentifierType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IdentifierType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.use map { scalaxb.toXML[IdentifierUse](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.assigner map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("assigner"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_IdentifierUseu45listFormat = new DefaultComionkinmrshl7fhir_IdentifierUseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_IdentifierUseu45listFormat extends scalaxb.XMLFormat[IdentifierUseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): IdentifierUseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("usual")) => UsualValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("official")) => OfficialValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temp")) => TempValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("secondary")) => Secondary

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdentifierUseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: IdentifierUseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_IdentifierUseFormat extends scalaxb.ElemNameParser[IdentifierUse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("IdentifierUse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IdentifierUse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IdentifierUse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[IdentifierUseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IdentifierUse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IdentifierUse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CodingTypeFormat extends scalaxb.ElemNameParser[CodingType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Coding")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodingType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "userSelected")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CodingType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodingType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.userSelected map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("userSelected"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SignatureTypeFormat extends scalaxb.ElemNameParser[SignatureType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Signature")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SignatureType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "when")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whoUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whoReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOfUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOfReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "blob")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      SignatureType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[InstantType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SignatureType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SignatureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) },
        scalaxb.toXML[InstantType](__obj.when, Some(fhirUrl), Some("when"), __scope, false),
        __obj.whoUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("whoUri"), __scope, false) } getOrElse {Nil},
        __obj.whoReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("whoReference"), __scope, false) } getOrElse {Nil},
        __obj.onBehalfOfUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("onBehalfOfUri"), __scope, false) } getOrElse {Nil},
        __obj.onBehalfOfReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOfReference"), __scope, false) } getOrElse {Nil},
        __obj.contentType map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("contentType"), __scope, false) } getOrElse {Nil},
        __obj.blob map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("blob"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SampledDataTypeFormat extends scalaxb.ElemNameParser[SampledDataType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SampledData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SampledDataType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "origin")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lowerLimit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "upperLimit")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "dimensions")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      SampledDataType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Quantityable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DecimalType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[SampledDataDataType](p8, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SampledDataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SampledDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[Quantityable](__obj.origin, Some(fhirUrl), Some("origin"), __scope, false),
        scalaxb.toXML[DecimalType](__obj.period, Some(fhirUrl), Some("period"), __scope, false),
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.lowerLimit map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("lowerLimit"), __scope, false) } getOrElse {Nil},
        __obj.upperLimit map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("upperLimit"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PositiveIntType](__obj.dimensions, Some(fhirUrl), Some("dimensions"), __scope, false),
        scalaxb.toXML[SampledDataDataType](__obj.data, Some(fhirUrl), Some("data"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_SampledDataDataTypeFormat extends scalaxb.ElemNameParser[SampledDataDataType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SampledDataDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SampledDataDataType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SampledDataDataType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SampledDataDataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SampledDataDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_RatioTypeFormat extends scalaxb.ElemNameParser[RatioType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Ratio")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RatioType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "numerator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "denominator")) ^^
      { case p1 ~ p2 ~ p3 =>
      RatioType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RatioType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RatioType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.numerator map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("numerator"), __scope, false) } getOrElse {Nil},
        __obj.denominator map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("denominator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DistanceTypeFormat extends scalaxb.ElemNameParser[DistanceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Distance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DistanceType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      DistanceType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DistanceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DistanceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_AgeTypeFormat extends scalaxb.ElemNameParser[AgeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Age")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AgeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      AgeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[QuantityComparator](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AgeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AgeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.comparator map { scalaxb.toXML[QuantityComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CodeableConceptTypeFormat extends scalaxb.ElemNameParser[CodeableConceptType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeableConcept")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeableConceptType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "coding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ^^
      { case p1 ~ p2 ~ p3 =>
      CodeableConceptType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeableConceptType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeableConceptType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.coding flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("coding"), __scope, false) },
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MetaTypeFormat extends scalaxb.ElemNameParser[MetaType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Meta")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "versionId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastUpdated")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "security")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "tag")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MetaType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MetaType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MetaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.versionId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("versionId"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("lastUpdated"), __scope, false) } getOrElse {Nil},
        __obj.profile flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("profile"), __scope, false) },
        __obj.security flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("security"), __scope, false) },
        __obj.tag flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("tag"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AddressType2Format extends scalaxb.ElemNameParser[AddressType2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Address")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AddressType2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "line")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "city")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "district")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "state")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "postalCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "country")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      AddressType2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[AddressUse](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AddressType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AddressType2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AddressType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.use map { scalaxb.toXML[AddressUse](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[AddressType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.line flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("line"), __scope, false) },
        __obj.city map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("city"), __scope, false) } getOrElse {Nil},
        __obj.district map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("district"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("state"), __scope, false) } getOrElse {Nil},
        __obj.postalCode map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("postalCode"), __scope, false) } getOrElse {Nil},
        __obj.country map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("country"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_AddressUseu45listFormat = new DefaultComionkinmrshl7fhir_AddressUseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AddressUseu45listFormat extends scalaxb.XMLFormat[AddressUseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AddressUseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("home")) => Home
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("work")) => Work
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temp")) => TempValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("old")) => OldValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AddressUseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AddressUseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AddressUseFormat extends scalaxb.ElemNameParser[AddressUse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AddressUse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AddressUse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AddressUse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AddressUseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AddressUse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AddressUse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AddressTypeu45listFormat = new DefaultComionkinmrshl7fhir_AddressTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AddressTypeu45listFormat extends scalaxb.XMLFormat[AddressTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AddressTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("postal")) => Postal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("physical")) => Physical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => BothValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AddressTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AddressTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AddressTypeFormat extends scalaxb.ElemNameParser[AddressType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AddressType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AddressType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AddressTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AddressType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TriggerDefinitionTypeFormat extends scalaxb.ElemNameParser[TriggerDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TriggerDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TriggerDefinitionType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventTimingTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventTimingReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventTimingDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventTimingDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      TriggerDefinitionType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TriggerType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TriggerDefinitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TriggerDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[TriggerType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.eventName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("eventName"), __scope, false) } getOrElse {Nil},
        __obj.eventTimingTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("eventTimingTiming"), __scope, false) } getOrElse {Nil},
        __obj.eventTimingReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("eventTimingReference"), __scope, false) } getOrElse {Nil},
        __obj.eventTimingDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("eventTimingDate"), __scope, false) } getOrElse {Nil},
        __obj.eventTimingDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("eventTimingDateTime"), __scope, false) } getOrElse {Nil},
        __obj.eventData map { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("eventData"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_TriggerTypeu45listFormat = new DefaultComionkinmrshl7fhir_TriggerTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TriggerTypeu45listFormat extends scalaxb.XMLFormat[TriggerTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TriggerTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("named-event")) => Namedu45event
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("periodic")) => Periodic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-added")) => Datau45added
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-modified")) => Datau45modified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-removed")) => Datau45removed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-accessed")) => Datau45accessed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-access-ended")) => Datau45accessu45ended

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TriggerTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TriggerTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TriggerTypeFormat extends scalaxb.ElemNameParser[TriggerType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TriggerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TriggerType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TriggerType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TriggerTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TriggerType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TriggerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ContributorType2Format extends scalaxb.ElemNameParser[ContributorType2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contributor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContributorType2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ContributorType2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ContributorType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContributorType2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContributorType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[ContributorType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ContributorTypeu45listFormat = new DefaultComionkinmrshl7fhir_ContributorTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ContributorTypeu45listFormat extends scalaxb.XMLFormat[ContributorTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ContributorTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("author")) => Author
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("editor")) => Editor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reviewer")) => Reviewer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endorser")) => Endorser

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContributorTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ContributorTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ContributorTypeFormat extends scalaxb.ElemNameParser[ContributorType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContributorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContributorType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ContributorType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ContributorTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContributorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContributorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DataRequirementTypeFormat extends scalaxb.ElemNameParser[DataRequirementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataRequirement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataRequirementType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mustSupport")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "codeFilter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dateFilter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      DataRequirementType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[DataRequirementu46CodeFilter](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[DataRequirementu46DateFilter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DataRequirementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DataRequirementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.profile flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("profile"), __scope, false) },
        __obj.mustSupport flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("mustSupport"), __scope, false) },
        __obj.codeFilter flatMap { scalaxb.toXML[DataRequirementu46CodeFilter](_, Some(fhirUrl), Some("codeFilter"), __scope, false) },
        __obj.dateFilter flatMap { scalaxb.toXML[DataRequirementu46DateFilter](_, Some(fhirUrl), Some("dateFilter"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DataRequirementu46CodeFilterFormat extends scalaxb.ElemNameParser[DataRequirementu46CodeFilter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataRequirement.CodeFilter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataRequirementu46CodeFilter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      DataRequirementu46CodeFilter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DataRequirementu46CodeFilter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DataRequirementu46CodeFilter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false),
        __obj.valueSetString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueSetString"), __scope, false) } getOrElse {Nil},
        __obj.valueSetReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueSetReference"), __scope, false) } getOrElse {Nil},
        __obj.valueCode flatMap { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) },
        __obj.valueCoding flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) },
        __obj.valueCodeableConcept flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DataRequirementu46DateFilterFormat extends scalaxb.ElemNameParser[DataRequirementu46DateFilter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataRequirement.DateFilter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataRequirementu46DateFilter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      DataRequirementu46DateFilter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DataRequirementu46DateFilter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DataRequirementu46DateFilter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false),
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DosageTypeFormat extends scalaxb.ElemNameParser[DosageType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Dosage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DosageType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "additionalInstruction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patientInstruction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timing")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asNeededBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asNeededCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "site")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "route")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxDosePerPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxDosePerAdministration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxDosePerLifetime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateQuantity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      DosageType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DosageType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DosageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.sequence map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("sequence"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.additionalInstruction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("additionalInstruction"), __scope, false) },
        __obj.patientInstruction map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("patientInstruction"), __scope, false) } getOrElse {Nil},
        __obj.timing map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("timing"), __scope, false) } getOrElse {Nil},
        __obj.asNeededBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("asNeededBoolean"), __scope, false) } getOrElse {Nil},
        __obj.asNeededCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("asNeededCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.site map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("site"), __scope, false) } getOrElse {Nil},
        __obj.route map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("route"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.doseRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("doseRange"), __scope, false) } getOrElse {Nil},
        __obj.doseQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("doseQuantity"), __scope, false) } getOrElse {Nil},
        __obj.maxDosePerPeriod map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("maxDosePerPeriod"), __scope, false) } getOrElse {Nil},
        __obj.maxDosePerAdministration map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("maxDosePerAdministration"), __scope, false) } getOrElse {Nil},
        __obj.maxDosePerLifetime map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("maxDosePerLifetime"), __scope, false) } getOrElse {Nil},
        __obj.rateRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("rateRatio"), __scope, false) } getOrElse {Nil},
        __obj.rateRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("rateRange"), __scope, false) } getOrElse {Nil},
        __obj.rateQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("rateQuantity"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RelatedArtifactTypeFormat extends scalaxb.ElemNameParser[RelatedArtifactType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RelatedArtifact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RelatedArtifactType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "citation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "document")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      RelatedArtifactType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RelatedArtifactTypeType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RelatedArtifactType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RelatedArtifactType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[RelatedArtifactTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.citation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("citation"), __scope, false) } getOrElse {Nil},
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.document map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("document"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_RelatedArtifactTypeu45listFormat = new DefaultComionkinmrshl7fhir_RelatedArtifactTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RelatedArtifactTypeu45listFormat extends scalaxb.XMLFormat[RelatedArtifactTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RelatedArtifactTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("documentation")) => Documentation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("justification")) => Justification
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("citation")) => Citation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("predecessor")) => Predecessor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("successor")) => Successor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("derived-from")) => Derivedu45fromValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("depends-on")) => Dependsu45on
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("composed-of")) => Composedu45of

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RelatedArtifactTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RelatedArtifactTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RelatedArtifactTypeTypeFormat extends scalaxb.ElemNameParser[RelatedArtifactTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RelatedArtifactType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RelatedArtifactTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RelatedArtifactTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RelatedArtifactTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RelatedArtifactTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RelatedArtifactTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ContactDetailTypeFormat extends scalaxb.ElemNameParser[ContactDetailType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContactDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContactDetailType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ^^
      { case p1 ~ p2 ~ p3 =>
      ContactDetailType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContactDetailType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContactDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_HumanNameTypeFormat extends scalaxb.ElemNameParser[HumanNameType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("HumanName")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[HumanNameType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "family")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "given")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "prefix")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "suffix")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      HumanNameType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[NameUse](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: HumanNameType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: HumanNameType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.use map { scalaxb.toXML[NameUse](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.family map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("family"), __scope, false) } getOrElse {Nil},
        __obj.given flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("given"), __scope, false) },
        __obj.prefix flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("prefix"), __scope, false) },
        __obj.suffix flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("suffix"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_NameUseu45listFormat = new DefaultComionkinmrshl7fhir_NameUseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NameUseu45listFormat extends scalaxb.XMLFormat[NameUseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NameUseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("usual")) => Usual
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("official")) => Official
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temp")) => Temp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nickname")) => Nickname
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("anonymous")) => Anonymous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("old")) => Old
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maiden")) => Maiden

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NameUseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NameUseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NameUseFormat extends scalaxb.ElemNameParser[NameUse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NameUse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NameUse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NameUse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NameUseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NameUse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NameUse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ContactPointTypeFormat extends scalaxb.ElemNameParser[ContactPointType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContactPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContactPointType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rank")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ContactPointType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[ContactPointSystem](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ContactPointUse](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContactPointType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContactPointType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.system map { scalaxb.toXML[ContactPointSystem](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.use map { scalaxb.toXML[ContactPointUse](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        __obj.rank map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("rank"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ContactPointSystemu45listFormat = new DefaultComionkinmrshl7fhir_ContactPointSystemu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ContactPointSystemu45listFormat extends scalaxb.XMLFormat[ContactPointSystemu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ContactPointSystemu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("phone")) => Phone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fax")) => Fax
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("email")) => EmailValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pager")) => Pager
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("url")) => UrlValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sms")) => SmsValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContactPointSystemu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ContactPointSystemu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ContactPointSystemFormat extends scalaxb.ElemNameParser[ContactPointSystem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContactPointSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContactPointSystem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ContactPointSystem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ContactPointSystemu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContactPointSystem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContactPointSystem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ContactPointUseu45listFormat = new DefaultComionkinmrshl7fhir_ContactPointUseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ContactPointUseu45listFormat extends scalaxb.XMLFormat[ContactPointUseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ContactPointUseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("home")) => HomeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("work")) => WorkValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temp")) => TempValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("old")) => OldValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mobile")) => Mobile

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContactPointUseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ContactPointUseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ContactPointUseFormat extends scalaxb.ElemNameParser[ContactPointUse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContactPointUse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContactPointUse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ContactPointUse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ContactPointUseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContactPointUse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContactPointUse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_UsageContextTypeFormat extends scalaxb.ElemNameParser[UsageContextType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("UsageContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UsageContextType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      UsageContextType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UsageContextType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UsageContextType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TimingTypeFormat extends scalaxb.ElemNameParser[TimingType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Timing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TimingType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "event")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "repeat")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TimingType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Timingu46Repeat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TimingType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TimingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.event flatMap { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("event"), __scope, false) },
        __obj.repeat map { scalaxb.toXML[Timingu46Repeat](_, Some(fhirUrl), Some("repeat"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Timingu46RepeatFormat extends scalaxb.ElemNameParser[Timingu46Repeat] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Timing.Repeat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Timingu46Repeat] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "boundsDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "boundsRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "boundsPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "count")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "countMax")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "duration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "durationMax")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "durationUnit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "frequency")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "frequencyMax")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "periodMax")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "periodUnit")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dayOfWeek")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "timeOfDay")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "when")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offset")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      Timingu46Repeat(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UnitsOfTime](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[UnitsOfTime](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[EventTiming](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Timingu46Repeat, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Timingu46Repeat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.boundsDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("boundsDuration"), __scope, false) } getOrElse {Nil},
        __obj.boundsRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("boundsRange"), __scope, false) } getOrElse {Nil},
        __obj.boundsPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("boundsPeriod"), __scope, false) } getOrElse {Nil},
        __obj.count map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("count"), __scope, false) } getOrElse {Nil},
        __obj.countMax map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("countMax"), __scope, false) } getOrElse {Nil},
        __obj.duration map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("duration"), __scope, false) } getOrElse {Nil},
        __obj.durationMax map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("durationMax"), __scope, false) } getOrElse {Nil},
        __obj.durationUnit map { scalaxb.toXML[UnitsOfTime](_, Some(fhirUrl), Some("durationUnit"), __scope, false) } getOrElse {Nil},
        __obj.frequency map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("frequency"), __scope, false) } getOrElse {Nil},
        __obj.frequencyMax map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("frequencyMax"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.periodMax map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("periodMax"), __scope, false) } getOrElse {Nil},
        __obj.periodUnit map { scalaxb.toXML[UnitsOfTime](_, Some(fhirUrl), Some("periodUnit"), __scope, false) } getOrElse {Nil},
        __obj.dayOfWeek flatMap { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("dayOfWeek"), __scope, false) },
        __obj.timeOfDay flatMap { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("timeOfDay"), __scope, false) },
        __obj.when flatMap { scalaxb.toXML[EventTiming](_, Some(fhirUrl), Some("when"), __scope, false) },
        __obj.offset map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("offset"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_UnitsOfTimeu45listFormat = new DefaultComionkinmrshl7fhir_UnitsOfTimeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_UnitsOfTimeu45listFormat extends scalaxb.XMLFormat[UnitsOfTimeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): UnitsOfTimeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("s")) => S
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("min")) => Min
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("h")) => H
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("d")) => D
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wk")) => Wk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mo")) => Mo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("a")) => A

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UnitsOfTimeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: UnitsOfTimeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_UnitsOfTimeFormat extends scalaxb.ElemNameParser[UnitsOfTime] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("UnitsOfTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UnitsOfTime] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UnitsOfTime(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[UnitsOfTimeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UnitsOfTime, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UnitsOfTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_EventTimingu45listFormat = new DefaultComionkinmrshl7fhir_EventTimingu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EventTimingu45listFormat extends scalaxb.XMLFormat[EventTimingu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EventTimingu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MORN")) => MORN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AFT")) => AFT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EVE")) => EVE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NIGHT")) => NIGHT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PHS")) => PHS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HS")) => HS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("WAKE")) => WAKE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C")) => CValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CM")) => CM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CD")) => CD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CV")) => CV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AC")) => AC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ACM")) => ACM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ACD")) => ACD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ACV")) => ACV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PC")) => PC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PCM")) => PCM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PCD")) => PCD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PCV")) => PCV

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EventTimingu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EventTimingu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EventTimingFormat extends scalaxb.ElemNameParser[EventTiming] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EventTiming")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EventTiming] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EventTiming(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EventTimingu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EventTiming, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EventTiming, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionTypeFormat extends scalaxb.ElemNameParser[ElementDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "representation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sliceName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "slicing")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "short")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requirements")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "alias")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "max")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "base")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMeta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meaningWhenMissing")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "orderMeaning")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedPositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fixedMeta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternPositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patternMeta")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "example")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minValueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxValueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxLength")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "constraint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "mustSupport")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "isModifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "isSummary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "binding")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mapping")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 ~ p48 ~ p49 ~ p50 ~ p51 ~ p52 ~ p53 ~ p54 ~ p55 ~ p56 ~ p57 ~ p58 ~ p59 ~ p60 ~ p61 ~ p62 ~ p63 ~ p64 ~ p65 ~ p66 ~ p67 ~ p68 ~ p69 ~ p70 ~ p71 ~ p72 ~ p73 ~ p74 ~ p75 ~ p76 ~ p77 ~ p78 ~ p79 ~ p80 ~ p81 ~ p82 ~ p83 ~ p84 ~ p85 ~ p86 ~ p87 ~ p88 ~ p89 ~ p90 ~ p91 ~ p92 ~ p93 ~ p94 ~ p95 ~ p96 ~ p97 ~ p98 ~ p99 ~ p100 ~ p101 ~ p102 ~ p103 ~ p104 ~ p105 ~ p106 ~ p107 ~ p108 ~ p109 ~ p110 ~ p111 ~ p112 ~ p113 ~ p114 ~ p115 ~ p116 ~ p117 ~ p118 ~ p119 ~ p120 ~ p121 ~ p122 ~ p123 ~ p124 ~ p125 ~ p126 ~ p127 ~ p128 ~ p129 ~ p130 ~ p131 ~ p132 ~ p133 ~ p134 ~ p135 ~ p136 ~ p137 ~ p138 ~ p139 ~ p140 ~ p141 ~ p142 ~ p143 ~ p144 ~ p145 ~ p146 ~ p147 ~ p148 ~ p149 ~ p150 ~ p151 ~ p152 ~ p153 ~ p154 ~ p155 ~ p156 ~ p157 ~ p158 ~ p159 ~ p160 =>
      ElementDefinitionType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[PropertyRepresentation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ElementDefinitionu46Slicing](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ElementDefinitionu46Base](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ElementDefinitionu46Type](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p46.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p47.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p48.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p49.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p50.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p51.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p52.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p53.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p54.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p55.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p56.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p57.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p58.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p59.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p60.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p61.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p62.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p63.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p64.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p65.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p66.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p67.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p68.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p69.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p70.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p71.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p72.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p73.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p74.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p75.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p76.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p77.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p78.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p79.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p80.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p81.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p82.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p83.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p84.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p85.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p86.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p87.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p88.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p89.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p90.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p91.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p92.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p93.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p94.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p95.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p96.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p97.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p98.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p99.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p100.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p101.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p102.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p103.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p104.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p105.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p106.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p107.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p108.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p109.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p110.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p111.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p112.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p113.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p114.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p115.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p116.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p117.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p118.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p119.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p120.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p121.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p122.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p123.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p124.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p125.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p126.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p127.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p128.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p129.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p130.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p131.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p132.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p133.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p134 map { scalaxb.fromXML[ElementDefinitionu46Example](_, scalaxb.ElemName(node) :: stack) },
        p135.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p136.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p137.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p138.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p139.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p140.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p141.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p142.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p143.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p144.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p145.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p146.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p147.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p148.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p149.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p150.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p151.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p152.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p153.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p154 map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p155 map { scalaxb.fromXML[ElementDefinitionu46Constraint](_, scalaxb.ElemName(node) :: stack) },
        p156.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p157.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p158.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p159.headOption map { scalaxb.fromXML[ElementDefinitionu46Binding](_, scalaxb.ElemName(node) :: stack) },
        p160 map { scalaxb.fromXML[ElementDefinitionu46Mapping](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false),
        __obj.representation flatMap { scalaxb.toXML[PropertyRepresentation](_, Some(fhirUrl), Some("representation"), __scope, false) },
        __obj.sliceName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("sliceName"), __scope, false) } getOrElse {Nil},
        __obj.label map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("label"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.slicing map { scalaxb.toXML[ElementDefinitionu46Slicing](_, Some(fhirUrl), Some("slicing"), __scope, false) } getOrElse {Nil},
        __obj.short map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("short"), __scope, false) } getOrElse {Nil},
        __obj.definition map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.requirements map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("requirements"), __scope, false) } getOrElse {Nil},
        __obj.alias flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("alias"), __scope, false) },
        __obj.min map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("min"), __scope, false) } getOrElse {Nil},
        __obj.max map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("max"), __scope, false) } getOrElse {Nil},
        __obj.base map { scalaxb.toXML[ElementDefinitionu46Base](_, Some(fhirUrl), Some("base"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[ElementDefinitionu46Type](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.defaultValueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("defaultValueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("defaultValueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("defaultValueCode"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("defaultValueDate"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("defaultValueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("defaultValueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("defaultValueId"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("defaultValueInstant"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("defaultValueInteger"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("defaultValueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("defaultValueOid"), __scope, false) } getOrElse {Nil},
        __obj.defaultValuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("defaultValuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("defaultValueString"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("defaultValueTime"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("defaultValueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("defaultValueUri"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("defaultValueAddress"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("defaultValueAge"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("defaultValueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("defaultValueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("defaultValueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("defaultValueCoding"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("defaultValueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("defaultValueCount"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("defaultValueDistance"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("defaultValueDuration"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("defaultValueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("defaultValueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("defaultValueMoney"), __scope, false) } getOrElse {Nil},
        __obj.defaultValuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("defaultValuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("defaultValueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("defaultValueRange"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("defaultValueRatio"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("defaultValueReference"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("defaultValueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("defaultValueSignature"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("defaultValueTiming"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("defaultValueMeta"), __scope, false) } getOrElse {Nil},
        __obj.meaningWhenMissing map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("meaningWhenMissing"), __scope, false) } getOrElse {Nil},
        __obj.orderMeaning map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("orderMeaning"), __scope, false) } getOrElse {Nil},
        __obj.fixedBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("fixedBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.fixedBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("fixedBoolean"), __scope, false) } getOrElse {Nil},
        __obj.fixedCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("fixedCode"), __scope, false) } getOrElse {Nil},
        __obj.fixedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("fixedDate"), __scope, false) } getOrElse {Nil},
        __obj.fixedDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("fixedDateTime"), __scope, false) } getOrElse {Nil},
        __obj.fixedDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("fixedDecimal"), __scope, false) } getOrElse {Nil},
        __obj.fixedId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("fixedId"), __scope, false) } getOrElse {Nil},
        __obj.fixedInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("fixedInstant"), __scope, false) } getOrElse {Nil},
        __obj.fixedInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("fixedInteger"), __scope, false) } getOrElse {Nil},
        __obj.fixedMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("fixedMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.fixedOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("fixedOid"), __scope, false) } getOrElse {Nil},
        __obj.fixedPositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("fixedPositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.fixedString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("fixedString"), __scope, false) } getOrElse {Nil},
        __obj.fixedTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("fixedTime"), __scope, false) } getOrElse {Nil},
        __obj.fixedUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("fixedUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.fixedUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("fixedUri"), __scope, false) } getOrElse {Nil},
        __obj.fixedAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("fixedAddress"), __scope, false) } getOrElse {Nil},
        __obj.fixedAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("fixedAge"), __scope, false) } getOrElse {Nil},
        __obj.fixedAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("fixedAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.fixedAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("fixedAttachment"), __scope, false) } getOrElse {Nil},
        __obj.fixedCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("fixedCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.fixedCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("fixedCoding"), __scope, false) } getOrElse {Nil},
        __obj.fixedContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("fixedContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.fixedCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("fixedCount"), __scope, false) } getOrElse {Nil},
        __obj.fixedDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("fixedDistance"), __scope, false) } getOrElse {Nil},
        __obj.fixedDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("fixedDuration"), __scope, false) } getOrElse {Nil},
        __obj.fixedHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("fixedHumanName"), __scope, false) } getOrElse {Nil},
        __obj.fixedIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("fixedIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.fixedMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("fixedMoney"), __scope, false) } getOrElse {Nil},
        __obj.fixedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("fixedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.fixedQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("fixedQuantity"), __scope, false) } getOrElse {Nil},
        __obj.fixedRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("fixedRange"), __scope, false) } getOrElse {Nil},
        __obj.fixedRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("fixedRatio"), __scope, false) } getOrElse {Nil},
        __obj.fixedReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("fixedReference"), __scope, false) } getOrElse {Nil},
        __obj.fixedSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("fixedSampledData"), __scope, false) } getOrElse {Nil},
        __obj.fixedSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("fixedSignature"), __scope, false) } getOrElse {Nil},
        __obj.fixedTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("fixedTiming"), __scope, false) } getOrElse {Nil},
        __obj.fixedMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("fixedMeta"), __scope, false) } getOrElse {Nil},
        __obj.patternBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("patternBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.patternBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("patternBoolean"), __scope, false) } getOrElse {Nil},
        __obj.patternCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("patternCode"), __scope, false) } getOrElse {Nil},
        __obj.patternDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("patternDate"), __scope, false) } getOrElse {Nil},
        __obj.patternDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("patternDateTime"), __scope, false) } getOrElse {Nil},
        __obj.patternDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("patternDecimal"), __scope, false) } getOrElse {Nil},
        __obj.patternId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("patternId"), __scope, false) } getOrElse {Nil},
        __obj.patternInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("patternInstant"), __scope, false) } getOrElse {Nil},
        __obj.patternInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("patternInteger"), __scope, false) } getOrElse {Nil},
        __obj.patternMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("patternMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.patternOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("patternOid"), __scope, false) } getOrElse {Nil},
        __obj.patternPositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("patternPositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.patternString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("patternString"), __scope, false) } getOrElse {Nil},
        __obj.patternTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("patternTime"), __scope, false) } getOrElse {Nil},
        __obj.patternUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("patternUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.patternUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("patternUri"), __scope, false) } getOrElse {Nil},
        __obj.patternAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("patternAddress"), __scope, false) } getOrElse {Nil},
        __obj.patternAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("patternAge"), __scope, false) } getOrElse {Nil},
        __obj.patternAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("patternAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.patternAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("patternAttachment"), __scope, false) } getOrElse {Nil},
        __obj.patternCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("patternCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.patternCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("patternCoding"), __scope, false) } getOrElse {Nil},
        __obj.patternContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("patternContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.patternCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("patternCount"), __scope, false) } getOrElse {Nil},
        __obj.patternDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("patternDistance"), __scope, false) } getOrElse {Nil},
        __obj.patternDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("patternDuration"), __scope, false) } getOrElse {Nil},
        __obj.patternHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("patternHumanName"), __scope, false) } getOrElse {Nil},
        __obj.patternIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("patternIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.patternMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("patternMoney"), __scope, false) } getOrElse {Nil},
        __obj.patternPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("patternPeriod"), __scope, false) } getOrElse {Nil},
        __obj.patternQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("patternQuantity"), __scope, false) } getOrElse {Nil},
        __obj.patternRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("patternRange"), __scope, false) } getOrElse {Nil},
        __obj.patternRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("patternRatio"), __scope, false) } getOrElse {Nil},
        __obj.patternReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patternReference"), __scope, false) } getOrElse {Nil},
        __obj.patternSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("patternSampledData"), __scope, false) } getOrElse {Nil},
        __obj.patternSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("patternSignature"), __scope, false) } getOrElse {Nil},
        __obj.patternTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("patternTiming"), __scope, false) } getOrElse {Nil},
        __obj.patternMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("patternMeta"), __scope, false) } getOrElse {Nil},
        __obj.example flatMap { scalaxb.toXML[ElementDefinitionu46Example](_, Some(fhirUrl), Some("example"), __scope, false) },
        __obj.minValueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("minValueDate"), __scope, false) } getOrElse {Nil},
        __obj.minValueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("minValueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.minValueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("minValueInstant"), __scope, false) } getOrElse {Nil},
        __obj.minValueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("minValueTime"), __scope, false) } getOrElse {Nil},
        __obj.minValueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("minValueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.minValueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("minValueInteger"), __scope, false) } getOrElse {Nil},
        __obj.minValuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("minValuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.minValueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("minValueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.minValueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("minValueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.maxValueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("maxValueDate"), __scope, false) } getOrElse {Nil},
        __obj.maxValueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("maxValueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.maxValueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("maxValueInstant"), __scope, false) } getOrElse {Nil},
        __obj.maxValueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("maxValueTime"), __scope, false) } getOrElse {Nil},
        __obj.maxValueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("maxValueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.maxValueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("maxValueInteger"), __scope, false) } getOrElse {Nil},
        __obj.maxValuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("maxValuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.maxValueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("maxValueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.maxValueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("maxValueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.maxLength map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("maxLength"), __scope, false) } getOrElse {Nil},
        __obj.condition flatMap { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("condition"), __scope, false) },
        __obj.constraint flatMap { scalaxb.toXML[ElementDefinitionu46Constraint](_, Some(fhirUrl), Some("constraint"), __scope, false) },
        __obj.mustSupport map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("mustSupport"), __scope, false) } getOrElse {Nil},
        __obj.isModifier map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("isModifier"), __scope, false) } getOrElse {Nil},
        __obj.isSummary map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("isSummary"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[ElementDefinitionu46Binding](_, Some(fhirUrl), Some("binding"), __scope, false) } getOrElse {Nil},
        __obj.mapping flatMap { scalaxb.toXML[ElementDefinitionu46Mapping](_, Some(fhirUrl), Some("mapping"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46ConstraintFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Constraint] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Constraint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Constraint] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "key")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requirements")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "severity")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "human")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "expression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "xpath")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ElementDefinitionu46Constraint(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConstraintSeverity](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Constraint, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Constraint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.key, Some(fhirUrl), Some("key"), __scope, false),
        __obj.requirements map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("requirements"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ConstraintSeverity](__obj.severity, Some(fhirUrl), Some("severity"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.human, Some(fhirUrl), Some("human"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.expression, Some(fhirUrl), Some("expression"), __scope, false),
        __obj.xpath map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("xpath"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46MappingFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Mapping] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Mapping")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Mapping] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "map")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ElementDefinitionu46Mapping(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Mapping, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Mapping, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.identity, Some(fhirUrl), Some("identity"), __scope, false),
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.map, Some(fhirUrl), Some("map"), __scope, false),
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46BaseFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Base] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Base")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Base] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "max")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ElementDefinitionu46Base(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UnsignedIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Base, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Base, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false),
        scalaxb.toXML[UnsignedIntType](__obj.min, Some(fhirUrl), Some("min"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.max, Some(fhirUrl), Some("max"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46TypeFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Type] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Type")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Type] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetProfile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "aggregation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "versioning")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ElementDefinitionu46Type(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[AggregationMode](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceVersionRules](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Type, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.profile map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.targetProfile map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("targetProfile"), __scope, false) } getOrElse {Nil},
        __obj.aggregation flatMap { scalaxb.toXML[AggregationMode](_, Some(fhirUrl), Some("aggregation"), __scope, false) },
        __obj.versioning map { scalaxb.toXML[ReferenceVersionRules](_, Some(fhirUrl), Some("versioning"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46ExampleFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Example] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Example")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Example] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMeta")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 =>
      ElementDefinitionu46Example(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Example, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Example, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.label, Some(fhirUrl), Some("label"), __scope, false),
        __obj.valueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("valueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("valueInstant"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("valueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.valueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("valueOid"), __scope, false) } getOrElse {Nil},
        __obj.valuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("valuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("valueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("valueAddress"), __scope, false) } getOrElse {Nil},
        __obj.valueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("valueAge"), __scope, false) } getOrElse {Nil},
        __obj.valueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("valueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("valueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.valueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("valueCount"), __scope, false) } getOrElse {Nil},
        __obj.valueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("valueDistance"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil},
        __obj.valueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("valueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.valueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("valueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.valueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("valueMoney"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("valueSignature"), __scope, false) } getOrElse {Nil},
        __obj.valueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("valueTiming"), __scope, false) } getOrElse {Nil},
        __obj.valueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("valueMeta"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46SlicingFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Slicing] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Slicing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Slicing] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "discriminator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ordered")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "rules")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ElementDefinitionu46Slicing(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ElementDefinitionu46Discriminator](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SlicingRules](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Slicing, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Slicing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.discriminator flatMap { scalaxb.toXML[ElementDefinitionu46Discriminator](_, Some(fhirUrl), Some("discriminator"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.ordered map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("ordered"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[SlicingRules](__obj.rules, Some(fhirUrl), Some("rules"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46BindingFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Binding] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Binding")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Binding] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "strength")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ElementDefinitionu46Binding(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BindingStrength](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Binding, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Binding, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[BindingStrength](__obj.strength, Some(fhirUrl), Some("strength"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.valueSetUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueSetUri"), __scope, false) } getOrElse {Nil},
        __obj.valueSetReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueSetReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ElementDefinitionu46DiscriminatorFormat extends scalaxb.ElemNameParser[ElementDefinitionu46Discriminator] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ElementDefinition.Discriminator")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ElementDefinitionu46Discriminator] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ^^
      { case p1 ~ p2 ~ p3 =>
      ElementDefinitionu46Discriminator(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DiscriminatorType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ElementDefinitionu46Discriminator, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ElementDefinitionu46Discriminator, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        scalaxb.toXML[DiscriminatorType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false))

  }

  def buildComionkinmrshl7fhir_PropertyRepresentationu45listFormat = new DefaultComionkinmrshl7fhir_PropertyRepresentationu45listFormat {}
  trait DefaultComionkinmrshl7fhir_PropertyRepresentationu45listFormat extends scalaxb.XMLFormat[PropertyRepresentationu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): PropertyRepresentationu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xmlAttr")) => XmlAttr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xmlText")) => XmlText
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("typeAttr")) => TypeAttr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cdaText")) => CdaText
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xhtml")) => XhtmlValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, PropertyRepresentationu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: PropertyRepresentationu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_PropertyRepresentationFormat extends scalaxb.ElemNameParser[PropertyRepresentation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PropertyRepresentation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PropertyRepresentation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      PropertyRepresentation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[PropertyRepresentationu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PropertyRepresentation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PropertyRepresentation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConstraintSeverityu45listFormat = new DefaultComionkinmrshl7fhir_ConstraintSeverityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConstraintSeverityu45listFormat extends scalaxb.XMLFormat[ConstraintSeverityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConstraintSeverityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("warning")) => WarningValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConstraintSeverityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConstraintSeverityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConstraintSeverityFormat extends scalaxb.ElemNameParser[ConstraintSeverity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConstraintSeverity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConstraintSeverity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConstraintSeverity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConstraintSeverityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConstraintSeverity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConstraintSeverity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AggregationModeu45listFormat = new DefaultComionkinmrshl7fhir_AggregationModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AggregationModeu45listFormat extends scalaxb.XMLFormat[AggregationModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AggregationModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("contained")) => Contained
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("referenced")) => Referenced
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bundled")) => Bundled

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AggregationModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AggregationModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AggregationModeFormat extends scalaxb.ElemNameParser[AggregationMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AggregationMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AggregationMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AggregationMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AggregationModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AggregationMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AggregationMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ReferenceVersionRulesu45listFormat = new DefaultComionkinmrshl7fhir_ReferenceVersionRulesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ReferenceVersionRulesu45listFormat extends scalaxb.XMLFormat[ReferenceVersionRulesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ReferenceVersionRulesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("either")) => Either
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("independent")) => Independent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specific")) => Specific

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReferenceVersionRulesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ReferenceVersionRulesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ReferenceVersionRulesFormat extends scalaxb.ElemNameParser[ReferenceVersionRules] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ReferenceVersionRules")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReferenceVersionRules] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ReferenceVersionRules(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ReferenceVersionRulesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ReferenceVersionRules, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReferenceVersionRules, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SlicingRulesu45listFormat = new DefaultComionkinmrshl7fhir_SlicingRulesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SlicingRulesu45listFormat extends scalaxb.XMLFormat[SlicingRulesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SlicingRulesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("closed")) => Closed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("open")) => Open
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openAtEnd")) => OpenAtEnd

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SlicingRulesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SlicingRulesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SlicingRulesFormat extends scalaxb.ElemNameParser[SlicingRules] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SlicingRules")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SlicingRules] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SlicingRules(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SlicingRulesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SlicingRules, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SlicingRules, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_BindingStrengthu45listFormat = new DefaultComionkinmrshl7fhir_BindingStrengthu45listFormat {}
  trait DefaultComionkinmrshl7fhir_BindingStrengthu45listFormat extends scalaxb.XMLFormat[BindingStrengthu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): BindingStrengthu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("required")) => RequiredValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extensible")) => Extensible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preferred")) => Preferred
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("example")) => Example

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, BindingStrengthu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: BindingStrengthu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_BindingStrengthFormat extends scalaxb.ElemNameParser[BindingStrength] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("BindingStrength")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BindingStrength] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      BindingStrength(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BindingStrengthu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: BindingStrength, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: BindingStrength, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DiscriminatorTypeu45listFormat = new DefaultComionkinmrshl7fhir_DiscriminatorTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DiscriminatorTypeu45listFormat extends scalaxb.XMLFormat[DiscriminatorTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DiscriminatorTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("value")) => ValueValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exists")) => Exists
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pattern")) => Pattern
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("type")) => TypeValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("profile")) => Profile

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DiscriminatorTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DiscriminatorTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DiscriminatorTypeFormat extends scalaxb.ElemNameParser[DiscriminatorType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DiscriminatorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DiscriminatorType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DiscriminatorType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DiscriminatorTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DiscriminatorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DiscriminatorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ParameterDefinitionTypeFormat extends scalaxb.ElemNameParser[ParameterDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ParameterDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ParameterDefinitionType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "max")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ParameterDefinitionType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ParameterDefinitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ParameterDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.name map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeType](__obj.use, Some(fhirUrl), Some("use"), __scope, false),
        __obj.min map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("min"), __scope, false) } getOrElse {Nil},
        __obj.max map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("max"), __scope, false) } getOrElse {Nil},
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.profile map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DomainResourcableFormat extends scalaxb.XMLFormat[DomainResourcable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DomainResourcable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some(fhirUrl), Some("VisionPrescription")) => Right(scalaxb.fromXML[VisionPrescriptionType](node, stack))
          case (Some(fhirUrl), Some("TestScript")) => Right(scalaxb.fromXML[TestScriptType](node, stack))
          case (Some(fhirUrl), Some("TestReport")) => Right(scalaxb.fromXML[TestReportType](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest")) => Right(scalaxb.fromXML[SupplyRequestType](node, stack))
          case (Some(fhirUrl), Some("SupplyDelivery")) => Right(scalaxb.fromXML[SupplyDeliveryType](node, stack))
          case (Some(fhirUrl), Some("StructureMap")) => Right(scalaxb.fromXML[StructureMapType](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition")) => Right(scalaxb.fromXML[StructureDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Specimen")) => Right(scalaxb.fromXML[SpecimenType](node, stack))
          case (Some(fhirUrl), Some("ServiceDefinition")) => Right(scalaxb.fromXML[ServiceDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Schedule")) => Right(scalaxb.fromXML[ScheduleType](node, stack))
          case (Some(fhirUrl), Some("RiskAssessment")) => Right(scalaxb.fromXML[RiskAssessmentType](node, stack))
          case (Some(fhirUrl), Some("RelatedPerson")) => Right(scalaxb.fromXML[RelatedPersonType](node, stack))
          case (Some(fhirUrl), Some("ReferralRequest")) => Right(scalaxb.fromXML[ReferralRequestType](node, stack))
          case (Some(fhirUrl), Some("Provenance")) => Right(scalaxb.fromXML[ProvenanceType](node, stack))
          case (Some(fhirUrl), Some("ProcessResponse")) => Right(scalaxb.fromXML[ProcessResponseType](node, stack))
          case (Some(fhirUrl), Some("ProcessRequest")) => Right(scalaxb.fromXML[ProcessRequestType](node, stack))
          case (Some(fhirUrl), Some("ProcedureRequest")) => Right(scalaxb.fromXML[ProcedureRequestType](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole")) => Right(scalaxb.fromXML[PractitionerRoleType](node, stack))
          case (Some(fhirUrl), Some("Practitioner")) => Right(scalaxb.fromXML[PractitionerType](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition")) => Right(scalaxb.fromXML[PlanDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Person")) => Right(scalaxb.fromXML[PersonType](node, stack))
          case (Some(fhirUrl), Some("PaymentNotice")) => Right(scalaxb.fromXML[PaymentNoticeType](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder")) => Right(scalaxb.fromXML[NutritionOrderType](node, stack))
          case (Some(fhirUrl), Some("NamingSystem")) => Right(scalaxb.fromXML[NamingSystemType2](node, stack))
          case (Some(fhirUrl), Some("MessageHeader")) => Right(scalaxb.fromXML[MessageHeaderType](node, stack))
          case (Some(fhirUrl), Some("MedicationStatement")) => Right(scalaxb.fromXML[MedicationStatementType](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest")) => Right(scalaxb.fromXML[MedicationRequestType](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration")) => Right(scalaxb.fromXML[MedicationAdministrationType](node, stack))
          case (Some(fhirUrl), Some("Media")) => Right(scalaxb.fromXML[MediaType](node, stack))
          case (Some(fhirUrl), Some("MeasureReport")) => Right(scalaxb.fromXML[MeasureReportType2](node, stack))
          case (Some(fhirUrl), Some("Library")) => Right(scalaxb.fromXML[LibraryType](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide")) => Right(scalaxb.fromXML[ImplementationGuideType](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation")) => Right(scalaxb.fromXML[ImmunizationRecommendationType](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy")) => Right(scalaxb.fromXML[ImagingStudyType](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest")) => Right(scalaxb.fromXML[ImagingManifestType](node, stack))
          case (Some(fhirUrl), Some("GuidanceResponse")) => Right(scalaxb.fromXML[GuidanceResponseType](node, stack))
          case (Some(fhirUrl), Some("Flag")) => Right(scalaxb.fromXML[FlagType](node, stack))
          case (Some(fhirUrl), Some("FamilyMemberHistory")) => Right(scalaxb.fromXML[FamilyMemberHistoryType](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare")) => Right(scalaxb.fromXML[EpisodeOfCareType](node, stack))
          case (Some(fhirUrl), Some("EnrollmentRequest")) => Right(scalaxb.fromXML[EnrollmentRequestType](node, stack))
          case (Some(fhirUrl), Some("Encounter")) => Right(scalaxb.fromXML[EncounterType](node, stack))
          case (Some(fhirUrl), Some("EligibilityRequest")) => Right(scalaxb.fromXML[EligibilityRequestType](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest")) => Right(scalaxb.fromXML[DocumentManifestType](node, stack))
          case (Some(fhirUrl), Some("DeviceUseStatement")) => Right(scalaxb.fromXML[DeviceUseStatementType](node, stack))
          case (Some(fhirUrl), Some("DeviceRequest")) => Right(scalaxb.fromXML[DeviceRequestType](node, stack))
          case (Some(fhirUrl), Some("DeviceMetric")) => Right(scalaxb.fromXML[DeviceMetricType](node, stack))
          case (Some(fhirUrl), Some("DeviceComponent")) => Right(scalaxb.fromXML[DeviceComponentType](node, stack))
          case (Some(fhirUrl), Some("Device")) => Right(scalaxb.fromXML[DeviceType](node, stack))
          case (Some(fhirUrl), Some("DetectedIssue")) => Right(scalaxb.fromXML[DetectedIssueType](node, stack))
          case (Some(fhirUrl), Some("DataElement")) => Right(scalaxb.fromXML[DataElementType](node, stack))
          case (Some(fhirUrl), Some("Coverage")) => Right(scalaxb.fromXML[CoverageType](node, stack))
          case (Some(fhirUrl), Some("Contract")) => Right(scalaxb.fromXML[ContractType](node, stack))
          case (Some(fhirUrl), Some("Condition")) => Right(scalaxb.fromXML[ConditionType](node, stack))
          case (Some(fhirUrl), Some("ConceptMap")) => Right(scalaxb.fromXML[ConceptMapType](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest")) => Right(scalaxb.fromXML[CommunicationRequestType](node, stack))
          case (Some(fhirUrl), Some("Communication")) => Right(scalaxb.fromXML[CommunicationType](node, stack))
          case (Some(fhirUrl), Some("CodeSystem")) => Right(scalaxb.fromXML[CodeSystemType](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse")) => Right(scalaxb.fromXML[ClaimResponseType](node, stack))
          case (Some(fhirUrl), Some("Claim")) => Right(scalaxb.fromXML[ClaimType](node, stack))
          case (Some(fhirUrl), Some("ChargeItem")) => Right(scalaxb.fromXML[ChargeItemType](node, stack))
          case (Some(fhirUrl), Some("CareTeam")) => Right(scalaxb.fromXML[CareTeamType](node, stack))
          case (Some(fhirUrl), Some("BodySite")) => Right(scalaxb.fromXML[BodySiteType](node, stack))
          case (Some(fhirUrl), Some("Basic")) => Right(scalaxb.fromXML[BasicType](node, stack))
          case (Some(fhirUrl), Some("AuditEvent")) => Right(scalaxb.fromXML[AuditEventType](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition")) => Right(scalaxb.fromXML[ActivityDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Account")) => Right(scalaxb.fromXML[AccountType](node, stack))
          case (Some(fhirUrl), Some("AdverseEvent")) => Right(scalaxb.fromXML[AdverseEventType](node, stack))
          case (Some(fhirUrl), Some("AllergyIntolerance")) => Right(scalaxb.fromXML[AllergyIntoleranceType](node, stack))
          case (Some(fhirUrl), Some("Appointment")) => Right(scalaxb.fromXML[AppointmentType](node, stack))
          case (Some(fhirUrl), Some("AppointmentResponse")) => Right(scalaxb.fromXML[AppointmentResponseType](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement")) => Right(scalaxb.fromXML[CapabilityStatementType](node, stack))
          case (Some(fhirUrl), Some("CarePlan")) => Right(scalaxb.fromXML[CarePlanType](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression")) => Right(scalaxb.fromXML[ClinicalImpressionType](node, stack))
          case (Some(fhirUrl), Some("CompartmentDefinition")) => Right(scalaxb.fromXML[CompartmentDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Composition")) => Right(scalaxb.fromXML[CompositionType](node, stack))
          case (Some(fhirUrl), Some("Consent")) => Right(scalaxb.fromXML[ConsentType](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport")) => Right(scalaxb.fromXML[DiagnosticReportType](node, stack))
          case (Some(fhirUrl), Some("DocumentReference")) => Right(scalaxb.fromXML[DocumentReferenceType](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse")) => Right(scalaxb.fromXML[EligibilityResponseType](node, stack))
          case (Some(fhirUrl), Some("Endpoint")) => Right(scalaxb.fromXML[EndpointType](node, stack))
          case (Some(fhirUrl), Some("EnrollmentResponse")) => Right(scalaxb.fromXML[EnrollmentResponseType](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile")) => Right(scalaxb.fromXML[ExpansionProfileType](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit")) => Right(scalaxb.fromXML[ExplanationOfBenefitType](node, stack))
          case (Some(fhirUrl), Some("Goal")) => Right(scalaxb.fromXML[GoalType](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition")) => Right(scalaxb.fromXML[GraphDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Group")) => Right(scalaxb.fromXML[GroupType2](node, stack))
          case (Some(fhirUrl), Some("HealthcareService")) => Right(scalaxb.fromXML[HealthcareServiceType](node, stack))
          case (Some(fhirUrl), Some("Immunization")) => Right(scalaxb.fromXML[ImmunizationType](node, stack))
          case (Some(fhirUrl), Some("Linkage")) => Right(scalaxb.fromXML[LinkageType](node, stack))
          case (Some(fhirUrl), Some("List")) => Right(scalaxb.fromXML[ListTypeType](node, stack))
          case (Some(fhirUrl), Some("Location")) => Right(scalaxb.fromXML[LocationType](node, stack))
          case (Some(fhirUrl), Some("Measure")) => Right(scalaxb.fromXML[MeasureType](node, stack))
          case (Some(fhirUrl), Some("Medication")) => Right(scalaxb.fromXML[MedicationType](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense")) => Right(scalaxb.fromXML[MedicationDispenseType](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition")) => Right(scalaxb.fromXML[MessageDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Observation")) => Right(scalaxb.fromXML[ObservationType](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition")) => Right(scalaxb.fromXML[OperationDefinitionType](node, stack))
          case (Some(fhirUrl), Some("OperationOutcome")) => Right(scalaxb.fromXML[OperationOutcomeType](node, stack))
          case (Some(fhirUrl), Some("Organization")) => Right(scalaxb.fromXML[OrganizationType](node, stack))
          case (Some(fhirUrl), Some("Patient")) => Right(scalaxb.fromXML[PatientType](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation")) => Right(scalaxb.fromXML[PaymentReconciliationType](node, stack))
          case (Some(fhirUrl), Some("Procedure")) => Right(scalaxb.fromXML[ProcedureType](node, stack))
          case (Some(fhirUrl), Some("Questionnaire")) => Right(scalaxb.fromXML[QuestionnaireType](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse")) => Right(scalaxb.fromXML[QuestionnaireResponseType](node, stack))
          case (Some(fhirUrl), Some("RequestGroup")) => Right(scalaxb.fromXML[RequestGroupType](node, stack))
          case (Some(fhirUrl), Some("ResearchStudy")) => Right(scalaxb.fromXML[ResearchStudyType](node, stack))
          case (Some(fhirUrl), Some("ResearchSubject")) => Right(scalaxb.fromXML[ResearchSubjectType](node, stack))
          case (Some(fhirUrl), Some("SearchParameter")) => Right(scalaxb.fromXML[SearchParameterType](node, stack))
          case (Some(fhirUrl), Some("Sequence")) => Right(scalaxb.fromXML[SequenceType](node, stack))
          case (Some(fhirUrl), Some("Slot")) => Right(scalaxb.fromXML[SlotType](node, stack))
          case (Some(fhirUrl), Some("Subscription")) => Right(scalaxb.fromXML[SubscriptionType](node, stack))
          case (Some(fhirUrl), Some("Substance")) => Right(scalaxb.fromXML[SubstanceType](node, stack))
          case (Some(fhirUrl), Some("Task")) => Right(scalaxb.fromXML[TaskType](node, stack))
          case (Some(fhirUrl), Some("ValueSet")) => Right(scalaxb.fromXML[ValueSet](node, stack))
          case _ => Right(scalaxb.fromXML[DomainResourceType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: DomainResourcable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: VisionPrescriptionType => scalaxb.toXML[VisionPrescriptionType](x, __namespace, __elementLabel, __scope, true)
      case x: TestScriptType => scalaxb.toXML[TestScriptType](x, __namespace, __elementLabel, __scope, true)
      case x: TestReportType => scalaxb.toXML[TestReportType](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyRequestType => scalaxb.toXML[SupplyRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: SupplyDeliveryType => scalaxb.toXML[SupplyDeliveryType](x, __namespace, __elementLabel, __scope, true)
      case x: StructureMapType => scalaxb.toXML[StructureMapType](x, __namespace, __elementLabel, __scope, true)
      case x: StructureDefinitionType => scalaxb.toXML[StructureDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: SpecimenType => scalaxb.toXML[SpecimenType](x, __namespace, __elementLabel, __scope, true)
      case x: ServiceDefinitionType => scalaxb.toXML[ServiceDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ScheduleType => scalaxb.toXML[ScheduleType](x, __namespace, __elementLabel, __scope, true)
      case x: RiskAssessmentType => scalaxb.toXML[RiskAssessmentType](x, __namespace, __elementLabel, __scope, true)
      case x: RelatedPersonType => scalaxb.toXML[RelatedPersonType](x, __namespace, __elementLabel, __scope, true)
      case x: ReferralRequestType => scalaxb.toXML[ReferralRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: ProvenanceType => scalaxb.toXML[ProvenanceType](x, __namespace, __elementLabel, __scope, true)
      case x: ProcessResponseType => scalaxb.toXML[ProcessResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: ProcessRequestType => scalaxb.toXML[ProcessRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: ProcedureRequestType => scalaxb.toXML[ProcedureRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: PractitionerRoleType => scalaxb.toXML[PractitionerRoleType](x, __namespace, __elementLabel, __scope, true)
      case x: PractitionerType => scalaxb.toXML[PractitionerType](x, __namespace, __elementLabel, __scope, true)
      case x: PlanDefinitionType => scalaxb.toXML[PlanDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: PersonType => scalaxb.toXML[PersonType](x, __namespace, __elementLabel, __scope, true)
      case x: PaymentNoticeType => scalaxb.toXML[PaymentNoticeType](x, __namespace, __elementLabel, __scope, true)
      case x: NutritionOrderType => scalaxb.toXML[NutritionOrderType](x, __namespace, __elementLabel, __scope, true)
      case x: NamingSystemType2 => scalaxb.toXML[NamingSystemType2](x, __namespace, __elementLabel, __scope, true)
      case x: MessageHeaderType => scalaxb.toXML[MessageHeaderType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationStatementType => scalaxb.toXML[MedicationStatementType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationRequestType => scalaxb.toXML[MedicationRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationAdministrationType => scalaxb.toXML[MedicationAdministrationType](x, __namespace, __elementLabel, __scope, true)
      case x: MediaType => scalaxb.toXML[MediaType](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureReportType2 => scalaxb.toXML[MeasureReportType2](x, __namespace, __elementLabel, __scope, true)
      case x: LibraryType => scalaxb.toXML[LibraryType](x, __namespace, __elementLabel, __scope, true)
      case x: ImplementationGuideType => scalaxb.toXML[ImplementationGuideType](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationRecommendationType => scalaxb.toXML[ImmunizationRecommendationType](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingStudyType => scalaxb.toXML[ImagingStudyType](x, __namespace, __elementLabel, __scope, true)
      case x: ImagingManifestType => scalaxb.toXML[ImagingManifestType](x, __namespace, __elementLabel, __scope, true)
      case x: GuidanceResponseType => scalaxb.toXML[GuidanceResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: FlagType => scalaxb.toXML[FlagType](x, __namespace, __elementLabel, __scope, true)
      case x: FamilyMemberHistoryType => scalaxb.toXML[FamilyMemberHistoryType](x, __namespace, __elementLabel, __scope, true)
      case x: EpisodeOfCareType => scalaxb.toXML[EpisodeOfCareType](x, __namespace, __elementLabel, __scope, true)
      case x: EnrollmentRequestType => scalaxb.toXML[EnrollmentRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: EncounterType => scalaxb.toXML[EncounterType](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityRequestType => scalaxb.toXML[EligibilityRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentManifestType => scalaxb.toXML[DocumentManifestType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceUseStatementType => scalaxb.toXML[DeviceUseStatementType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceRequestType => scalaxb.toXML[DeviceRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceMetricType => scalaxb.toXML[DeviceMetricType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceComponentType => scalaxb.toXML[DeviceComponentType](x, __namespace, __elementLabel, __scope, true)
      case x: DeviceType => scalaxb.toXML[DeviceType](x, __namespace, __elementLabel, __scope, true)
      case x: DetectedIssueType => scalaxb.toXML[DetectedIssueType](x, __namespace, __elementLabel, __scope, true)
      case x: DataElementType => scalaxb.toXML[DataElementType](x, __namespace, __elementLabel, __scope, true)
      case x: CoverageType => scalaxb.toXML[CoverageType](x, __namespace, __elementLabel, __scope, true)
      case x: ContractType => scalaxb.toXML[ContractType](x, __namespace, __elementLabel, __scope, true)
      case x: ConditionType => scalaxb.toXML[ConditionType](x, __namespace, __elementLabel, __scope, true)
      case x: ConceptMapType => scalaxb.toXML[ConceptMapType](x, __namespace, __elementLabel, __scope, true)
      case x: CommunicationRequestType => scalaxb.toXML[CommunicationRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: CommunicationType => scalaxb.toXML[CommunicationType](x, __namespace, __elementLabel, __scope, true)
      case x: CodeSystemType => scalaxb.toXML[CodeSystemType](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimResponseType => scalaxb.toXML[ClaimResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: ClaimType => scalaxb.toXML[ClaimType](x, __namespace, __elementLabel, __scope, true)
      case x: ChargeItemType => scalaxb.toXML[ChargeItemType](x, __namespace, __elementLabel, __scope, true)
      case x: CareTeamType => scalaxb.toXML[CareTeamType](x, __namespace, __elementLabel, __scope, true)
      case x: BodySiteType => scalaxb.toXML[BodySiteType](x, __namespace, __elementLabel, __scope, true)
      case x: BasicType => scalaxb.toXML[BasicType](x, __namespace, __elementLabel, __scope, true)
      case x: AuditEventType => scalaxb.toXML[AuditEventType](x, __namespace, __elementLabel, __scope, true)
      case x: ActivityDefinitionType => scalaxb.toXML[ActivityDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: AccountType => scalaxb.toXML[AccountType](x, __namespace, __elementLabel, __scope, true)
      case x: AdverseEventType => scalaxb.toXML[AdverseEventType](x, __namespace, __elementLabel, __scope, true)
      case x: AllergyIntoleranceType => scalaxb.toXML[AllergyIntoleranceType](x, __namespace, __elementLabel, __scope, true)
      case x: AppointmentType => scalaxb.toXML[AppointmentType](x, __namespace, __elementLabel, __scope, true)
      case x: AppointmentResponseType => scalaxb.toXML[AppointmentResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: CapabilityStatementType => scalaxb.toXML[CapabilityStatementType](x, __namespace, __elementLabel, __scope, true)
      case x: CarePlanType => scalaxb.toXML[CarePlanType](x, __namespace, __elementLabel, __scope, true)
      case x: ClinicalImpressionType => scalaxb.toXML[ClinicalImpressionType](x, __namespace, __elementLabel, __scope, true)
      case x: CompartmentDefinitionType => scalaxb.toXML[CompartmentDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: CompositionType => scalaxb.toXML[CompositionType](x, __namespace, __elementLabel, __scope, true)
      case x: ConsentType => scalaxb.toXML[ConsentType](x, __namespace, __elementLabel, __scope, true)
      case x: DiagnosticReportType => scalaxb.toXML[DiagnosticReportType](x, __namespace, __elementLabel, __scope, true)
      case x: DocumentReferenceType => scalaxb.toXML[DocumentReferenceType](x, __namespace, __elementLabel, __scope, true)
      case x: EligibilityResponseType => scalaxb.toXML[EligibilityResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: EndpointType => scalaxb.toXML[EndpointType](x, __namespace, __elementLabel, __scope, true)
      case x: EnrollmentResponseType => scalaxb.toXML[EnrollmentResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: ExpansionProfileType => scalaxb.toXML[ExpansionProfileType](x, __namespace, __elementLabel, __scope, true)
      case x: ExplanationOfBenefitType => scalaxb.toXML[ExplanationOfBenefitType](x, __namespace, __elementLabel, __scope, true)
      case x: GoalType => scalaxb.toXML[GoalType](x, __namespace, __elementLabel, __scope, true)
      case x: GraphDefinitionType => scalaxb.toXML[GraphDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: GroupType2 => scalaxb.toXML[GroupType2](x, __namespace, __elementLabel, __scope, true)
      case x: HealthcareServiceType => scalaxb.toXML[HealthcareServiceType](x, __namespace, __elementLabel, __scope, true)
      case x: ImmunizationType => scalaxb.toXML[ImmunizationType](x, __namespace, __elementLabel, __scope, true)
      case x: LinkageType => scalaxb.toXML[LinkageType](x, __namespace, __elementLabel, __scope, true)
      case x: ListTypeType => scalaxb.toXML[ListTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: LocationType => scalaxb.toXML[LocationType](x, __namespace, __elementLabel, __scope, true)
      case x: MeasureType => scalaxb.toXML[MeasureType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationType => scalaxb.toXML[MedicationType](x, __namespace, __elementLabel, __scope, true)
      case x: MedicationDispenseType => scalaxb.toXML[MedicationDispenseType](x, __namespace, __elementLabel, __scope, true)
      case x: MessageDefinitionType => scalaxb.toXML[MessageDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ObservationType => scalaxb.toXML[ObservationType](x, __namespace, __elementLabel, __scope, true)
      case x: OperationDefinitionType => scalaxb.toXML[OperationDefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: OperationOutcomeType => scalaxb.toXML[OperationOutcomeType](x, __namespace, __elementLabel, __scope, true)
      case x: OrganizationType => scalaxb.toXML[OrganizationType](x, __namespace, __elementLabel, __scope, true)
      case x: PatientType => scalaxb.toXML[PatientType](x, __namespace, __elementLabel, __scope, true)
      case x: PaymentReconciliationType => scalaxb.toXML[PaymentReconciliationType](x, __namespace, __elementLabel, __scope, true)
      case x: ProcedureType => scalaxb.toXML[ProcedureType](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireType => scalaxb.toXML[QuestionnaireType](x, __namespace, __elementLabel, __scope, true)
      case x: QuestionnaireResponseType => scalaxb.toXML[QuestionnaireResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: RequestGroupType => scalaxb.toXML[RequestGroupType](x, __namespace, __elementLabel, __scope, true)
      case x: ResearchStudyType => scalaxb.toXML[ResearchStudyType](x, __namespace, __elementLabel, __scope, true)
      case x: ResearchSubjectType => scalaxb.toXML[ResearchSubjectType](x, __namespace, __elementLabel, __scope, true)
      case x: SearchParameterType => scalaxb.toXML[SearchParameterType](x, __namespace, __elementLabel, __scope, true)
      case x: SequenceType => scalaxb.toXML[SequenceType](x, __namespace, __elementLabel, __scope, true)
      case x: SlotType => scalaxb.toXML[SlotType](x, __namespace, __elementLabel, __scope, true)
      case x: SubscriptionType => scalaxb.toXML[SubscriptionType](x, __namespace, __elementLabel, __scope, true)
      case x: SubstanceType => scalaxb.toXML[SubstanceType](x, __namespace, __elementLabel, __scope, true)
      case x: TaskType => scalaxb.toXML[TaskType](x, __namespace, __elementLabel, __scope, true)
      case x: ValueSet => scalaxb.toXML[ValueSet](x, __namespace, __elementLabel, __scope, true)
      case x: DomainResourceType => scalaxb.toXML[DomainResourceType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComionkinmrshl7fhir_DomainResourceTypeFormat extends scalaxb.ElemNameParser[DomainResourceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DomainResource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DomainResourceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      DomainResourceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DomainResourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ResourcableFormat extends scalaxb.XMLFormat[Resourcable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Resourcable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some(fhirUrl), Some("DomainResource")) => Right(scalaxb.fromXML[DomainResourcable](node, stack))
          case (Some(fhirUrl), Some("VisionPrescription")) => Right(scalaxb.fromXML[VisionPrescriptionType](node, stack))
          case (Some(fhirUrl), Some("TestScript")) => Right(scalaxb.fromXML[TestScriptType](node, stack))
          case (Some(fhirUrl), Some("TestReport")) => Right(scalaxb.fromXML[TestReportType](node, stack))
          case (Some(fhirUrl), Some("SupplyRequest")) => Right(scalaxb.fromXML[SupplyRequestType](node, stack))
          case (Some(fhirUrl), Some("SupplyDelivery")) => Right(scalaxb.fromXML[SupplyDeliveryType](node, stack))
          case (Some(fhirUrl), Some("StructureMap")) => Right(scalaxb.fromXML[StructureMapType](node, stack))
          case (Some(fhirUrl), Some("StructureDefinition")) => Right(scalaxb.fromXML[StructureDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Specimen")) => Right(scalaxb.fromXML[SpecimenType](node, stack))
          case (Some(fhirUrl), Some("ServiceDefinition")) => Right(scalaxb.fromXML[ServiceDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Schedule")) => Right(scalaxb.fromXML[ScheduleType](node, stack))
          case (Some(fhirUrl), Some("RiskAssessment")) => Right(scalaxb.fromXML[RiskAssessmentType](node, stack))
          case (Some(fhirUrl), Some("RelatedPerson")) => Right(scalaxb.fromXML[RelatedPersonType](node, stack))
          case (Some(fhirUrl), Some("ReferralRequest")) => Right(scalaxb.fromXML[ReferralRequestType](node, stack))
          case (Some(fhirUrl), Some("Provenance")) => Right(scalaxb.fromXML[ProvenanceType](node, stack))
          case (Some(fhirUrl), Some("ProcessResponse")) => Right(scalaxb.fromXML[ProcessResponseType](node, stack))
          case (Some(fhirUrl), Some("ProcessRequest")) => Right(scalaxb.fromXML[ProcessRequestType](node, stack))
          case (Some(fhirUrl), Some("ProcedureRequest")) => Right(scalaxb.fromXML[ProcedureRequestType](node, stack))
          case (Some(fhirUrl), Some("PractitionerRole")) => Right(scalaxb.fromXML[PractitionerRoleType](node, stack))
          case (Some(fhirUrl), Some("Practitioner")) => Right(scalaxb.fromXML[PractitionerType](node, stack))
          case (Some(fhirUrl), Some("PlanDefinition")) => Right(scalaxb.fromXML[PlanDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Person")) => Right(scalaxb.fromXML[PersonType](node, stack))
          case (Some(fhirUrl), Some("PaymentNotice")) => Right(scalaxb.fromXML[PaymentNoticeType](node, stack))
          case (Some(fhirUrl), Some("NutritionOrder")) => Right(scalaxb.fromXML[NutritionOrderType](node, stack))
          case (Some(fhirUrl), Some("NamingSystem")) => Right(scalaxb.fromXML[NamingSystemType2](node, stack))
          case (Some(fhirUrl), Some("MessageHeader")) => Right(scalaxb.fromXML[MessageHeaderType](node, stack))
          case (Some(fhirUrl), Some("MedicationStatement")) => Right(scalaxb.fromXML[MedicationStatementType](node, stack))
          case (Some(fhirUrl), Some("MedicationRequest")) => Right(scalaxb.fromXML[MedicationRequestType](node, stack))
          case (Some(fhirUrl), Some("MedicationAdministration")) => Right(scalaxb.fromXML[MedicationAdministrationType](node, stack))
          case (Some(fhirUrl), Some("Media")) => Right(scalaxb.fromXML[MediaType](node, stack))
          case (Some(fhirUrl), Some("MeasureReport")) => Right(scalaxb.fromXML[MeasureReportType2](node, stack))
          case (Some(fhirUrl), Some("Library")) => Right(scalaxb.fromXML[LibraryType](node, stack))
          case (Some(fhirUrl), Some("ImplementationGuide")) => Right(scalaxb.fromXML[ImplementationGuideType](node, stack))
          case (Some(fhirUrl), Some("ImmunizationRecommendation")) => Right(scalaxb.fromXML[ImmunizationRecommendationType](node, stack))
          case (Some(fhirUrl), Some("ImagingStudy")) => Right(scalaxb.fromXML[ImagingStudyType](node, stack))
          case (Some(fhirUrl), Some("ImagingManifest")) => Right(scalaxb.fromXML[ImagingManifestType](node, stack))
          case (Some(fhirUrl), Some("GuidanceResponse")) => Right(scalaxb.fromXML[GuidanceResponseType](node, stack))
          case (Some(fhirUrl), Some("Flag")) => Right(scalaxb.fromXML[FlagType](node, stack))
          case (Some(fhirUrl), Some("FamilyMemberHistory")) => Right(scalaxb.fromXML[FamilyMemberHistoryType](node, stack))
          case (Some(fhirUrl), Some("EpisodeOfCare")) => Right(scalaxb.fromXML[EpisodeOfCareType](node, stack))
          case (Some(fhirUrl), Some("EnrollmentRequest")) => Right(scalaxb.fromXML[EnrollmentRequestType](node, stack))
          case (Some(fhirUrl), Some("Encounter")) => Right(scalaxb.fromXML[EncounterType](node, stack))
          case (Some(fhirUrl), Some("EligibilityRequest")) => Right(scalaxb.fromXML[EligibilityRequestType](node, stack))
          case (Some(fhirUrl), Some("DocumentManifest")) => Right(scalaxb.fromXML[DocumentManifestType](node, stack))
          case (Some(fhirUrl), Some("DeviceUseStatement")) => Right(scalaxb.fromXML[DeviceUseStatementType](node, stack))
          case (Some(fhirUrl), Some("DeviceRequest")) => Right(scalaxb.fromXML[DeviceRequestType](node, stack))
          case (Some(fhirUrl), Some("DeviceMetric")) => Right(scalaxb.fromXML[DeviceMetricType](node, stack))
          case (Some(fhirUrl), Some("DeviceComponent")) => Right(scalaxb.fromXML[DeviceComponentType](node, stack))
          case (Some(fhirUrl), Some("Device")) => Right(scalaxb.fromXML[DeviceType](node, stack))
          case (Some(fhirUrl), Some("DetectedIssue")) => Right(scalaxb.fromXML[DetectedIssueType](node, stack))
          case (Some(fhirUrl), Some("DataElement")) => Right(scalaxb.fromXML[DataElementType](node, stack))
          case (Some(fhirUrl), Some("Coverage")) => Right(scalaxb.fromXML[CoverageType](node, stack))
          case (Some(fhirUrl), Some("Contract")) => Right(scalaxb.fromXML[ContractType](node, stack))
          case (Some(fhirUrl), Some("Condition")) => Right(scalaxb.fromXML[ConditionType](node, stack))
          case (Some(fhirUrl), Some("ConceptMap")) => Right(scalaxb.fromXML[ConceptMapType](node, stack))
          case (Some(fhirUrl), Some("CommunicationRequest")) => Right(scalaxb.fromXML[CommunicationRequestType](node, stack))
          case (Some(fhirUrl), Some("Communication")) => Right(scalaxb.fromXML[CommunicationType](node, stack))
          case (Some(fhirUrl), Some("CodeSystem")) => Right(scalaxb.fromXML[CodeSystemType](node, stack))
          case (Some(fhirUrl), Some("ClaimResponse")) => Right(scalaxb.fromXML[ClaimResponseType](node, stack))
          case (Some(fhirUrl), Some("Claim")) => Right(scalaxb.fromXML[ClaimType](node, stack))
          case (Some(fhirUrl), Some("ChargeItem")) => Right(scalaxb.fromXML[ChargeItemType](node, stack))
          case (Some(fhirUrl), Some("CareTeam")) => Right(scalaxb.fromXML[CareTeamType](node, stack))
          case (Some(fhirUrl), Some("BodySite")) => Right(scalaxb.fromXML[BodySiteType](node, stack))
          case (Some(fhirUrl), Some("Basic")) => Right(scalaxb.fromXML[BasicType](node, stack))
          case (Some(fhirUrl), Some("AuditEvent")) => Right(scalaxb.fromXML[AuditEventType](node, stack))
          case (Some(fhirUrl), Some("ActivityDefinition")) => Right(scalaxb.fromXML[ActivityDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Account")) => Right(scalaxb.fromXML[AccountType](node, stack))
          case (Some(fhirUrl), Some("AdverseEvent")) => Right(scalaxb.fromXML[AdverseEventType](node, stack))
          case (Some(fhirUrl), Some("AllergyIntolerance")) => Right(scalaxb.fromXML[AllergyIntoleranceType](node, stack))
          case (Some(fhirUrl), Some("Appointment")) => Right(scalaxb.fromXML[AppointmentType](node, stack))
          case (Some(fhirUrl), Some("AppointmentResponse")) => Right(scalaxb.fromXML[AppointmentResponseType](node, stack))
          case (Some(fhirUrl), Some("CapabilityStatement")) => Right(scalaxb.fromXML[CapabilityStatementType](node, stack))
          case (Some(fhirUrl), Some("CarePlan")) => Right(scalaxb.fromXML[CarePlanType](node, stack))
          case (Some(fhirUrl), Some("ClinicalImpression")) => Right(scalaxb.fromXML[ClinicalImpressionType](node, stack))
          case (Some(fhirUrl), Some("CompartmentDefinition")) => Right(scalaxb.fromXML[CompartmentDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Composition")) => Right(scalaxb.fromXML[CompositionType](node, stack))
          case (Some(fhirUrl), Some("Consent")) => Right(scalaxb.fromXML[ConsentType](node, stack))
          case (Some(fhirUrl), Some("DiagnosticReport")) => Right(scalaxb.fromXML[DiagnosticReportType](node, stack))
          case (Some(fhirUrl), Some("DocumentReference")) => Right(scalaxb.fromXML[DocumentReferenceType](node, stack))
          case (Some(fhirUrl), Some("EligibilityResponse")) => Right(scalaxb.fromXML[EligibilityResponseType](node, stack))
          case (Some(fhirUrl), Some("Endpoint")) => Right(scalaxb.fromXML[EndpointType](node, stack))
          case (Some(fhirUrl), Some("EnrollmentResponse")) => Right(scalaxb.fromXML[EnrollmentResponseType](node, stack))
          case (Some(fhirUrl), Some("ExpansionProfile")) => Right(scalaxb.fromXML[ExpansionProfileType](node, stack))
          case (Some(fhirUrl), Some("ExplanationOfBenefit")) => Right(scalaxb.fromXML[ExplanationOfBenefitType](node, stack))
          case (Some(fhirUrl), Some("Goal")) => Right(scalaxb.fromXML[GoalType](node, stack))
          case (Some(fhirUrl), Some("GraphDefinition")) => Right(scalaxb.fromXML[GraphDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Group")) => Right(scalaxb.fromXML[GroupType2](node, stack))
          case (Some(fhirUrl), Some("HealthcareService")) => Right(scalaxb.fromXML[HealthcareServiceType](node, stack))
          case (Some(fhirUrl), Some("Immunization")) => Right(scalaxb.fromXML[ImmunizationType](node, stack))
          case (Some(fhirUrl), Some("Linkage")) => Right(scalaxb.fromXML[LinkageType](node, stack))
          case (Some(fhirUrl), Some("List")) => Right(scalaxb.fromXML[ListTypeType](node, stack))
          case (Some(fhirUrl), Some("Location")) => Right(scalaxb.fromXML[LocationType](node, stack))
          case (Some(fhirUrl), Some("Measure")) => Right(scalaxb.fromXML[MeasureType](node, stack))
          case (Some(fhirUrl), Some("Medication")) => Right(scalaxb.fromXML[MedicationType](node, stack))
          case (Some(fhirUrl), Some("MedicationDispense")) => Right(scalaxb.fromXML[MedicationDispenseType](node, stack))
          case (Some(fhirUrl), Some("MessageDefinition")) => Right(scalaxb.fromXML[MessageDefinitionType](node, stack))
          case (Some(fhirUrl), Some("Observation")) => Right(scalaxb.fromXML[ObservationType](node, stack))
          case (Some(fhirUrl), Some("OperationDefinition")) => Right(scalaxb.fromXML[OperationDefinitionType](node, stack))
          case (Some(fhirUrl), Some("OperationOutcome")) => Right(scalaxb.fromXML[OperationOutcomeType](node, stack))
          case (Some(fhirUrl), Some("Organization")) => Right(scalaxb.fromXML[OrganizationType](node, stack))
          case (Some(fhirUrl), Some("Patient")) => Right(scalaxb.fromXML[PatientType](node, stack))
          case (Some(fhirUrl), Some("PaymentReconciliation")) => Right(scalaxb.fromXML[PaymentReconciliationType](node, stack))
          case (Some(fhirUrl), Some("Procedure")) => Right(scalaxb.fromXML[ProcedureType](node, stack))
          case (Some(fhirUrl), Some("Questionnaire")) => Right(scalaxb.fromXML[QuestionnaireType](node, stack))
          case (Some(fhirUrl), Some("QuestionnaireResponse")) => Right(scalaxb.fromXML[QuestionnaireResponseType](node, stack))
          case (Some(fhirUrl), Some("RequestGroup")) => Right(scalaxb.fromXML[RequestGroupType](node, stack))
          case (Some(fhirUrl), Some("ResearchStudy")) => Right(scalaxb.fromXML[ResearchStudyType](node, stack))
          case (Some(fhirUrl), Some("ResearchSubject")) => Right(scalaxb.fromXML[ResearchSubjectType](node, stack))
          case (Some(fhirUrl), Some("SearchParameter")) => Right(scalaxb.fromXML[SearchParameterType](node, stack))
          case (Some(fhirUrl), Some("Sequence")) => Right(scalaxb.fromXML[SequenceType](node, stack))
          case (Some(fhirUrl), Some("Slot")) => Right(scalaxb.fromXML[SlotType](node, stack))
          case (Some(fhirUrl), Some("Subscription")) => Right(scalaxb.fromXML[SubscriptionType](node, stack))
          case (Some(fhirUrl), Some("Substance")) => Right(scalaxb.fromXML[SubstanceType](node, stack))
          case (Some(fhirUrl), Some("Task")) => Right(scalaxb.fromXML[TaskType](node, stack))
          case (Some(fhirUrl), Some("ValueSet")) => Right(scalaxb.fromXML[ValueSet](node, stack))
          case (Some(fhirUrl), Some("Binary")) => Right(scalaxb.fromXML[BinaryType](node, stack))
          case (Some(fhirUrl), Some("Bundle")) => Right(scalaxb.fromXML[BundleType](node, stack))
          case (Some(fhirUrl), Some("Parameters")) => Right(scalaxb.fromXML[ParametersType](node, stack))
          case _ => Right(scalaxb.fromXML[ResourceType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: Resourcable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: DomainResourcable => scalaxb.toXML[DomainResourcable](x, __namespace, __elementLabel, __scope, true)
      case x: BinaryType => scalaxb.toXML[BinaryType](x, __namespace, __elementLabel, __scope, true)
      case x: BundleType => scalaxb.toXML[BundleType](x, __namespace, __elementLabel, __scope, true)
      case x: ParametersType => scalaxb.toXML[ParametersType](x, __namespace, __elementLabel, __scope, true)
      case x: ResourceType => scalaxb.toXML[ResourceType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComionkinmrshl7fhir_ResourceTypeFormat extends scalaxb.ElemNameParser[ResourceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Resource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResourceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ResourceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ResourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_PublicationStatusu45listFormat = new DefaultComionkinmrshl7fhir_PublicationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_PublicationStatusu45listFormat extends scalaxb.XMLFormat[PublicationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): PublicationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue12
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("retired")) => RetiredValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, PublicationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: PublicationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_PublicationStatusFormat extends scalaxb.ElemNameParser[PublicationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PublicationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PublicationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      PublicationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[PublicationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PublicationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PublicationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SearchParamTypeu45listFormat = new DefaultComionkinmrshl7fhir_SearchParamTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SearchParamTypeu45listFormat extends scalaxb.XMLFormat[SearchParamTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SearchParamTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("number")) => Number
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("date")) => DateValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("string")) => StringTypeValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("token")) => Token
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reference")) => ReferenceValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("composite")) => Composite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("quantity")) => QuantityValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uri")) => UriValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SearchParamTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SearchParamTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SearchParamTypeFormat extends scalaxb.ElemNameParser[SearchParamType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchParamType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchParamType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SearchParamType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SearchParamTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SearchParamType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SearchParamType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AdministrativeGenderu45listFormat = new DefaultComionkinmrshl7fhir_AdministrativeGenderu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AdministrativeGenderu45listFormat extends scalaxb.XMLFormat[AdministrativeGenderu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AdministrativeGenderu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("male")) => Male
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("female")) => Female
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AdministrativeGenderu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AdministrativeGenderu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AdministrativeGenderFormat extends scalaxb.ElemNameParser[AdministrativeGender] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AdministrativeGender")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AdministrativeGender] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AdministrativeGender(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AdministrativeGenderu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AdministrativeGender, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AdministrativeGender, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_RemittanceOutcomeu45listFormat = new DefaultComionkinmrshl7fhir_RemittanceOutcomeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RemittanceOutcomeu45listFormat extends scalaxb.XMLFormat[RemittanceOutcomeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RemittanceOutcomeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("complete")) => Complete
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("partial")) => Partial

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RemittanceOutcomeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RemittanceOutcomeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RemittanceOutcomeFormat extends scalaxb.ElemNameParser[RemittanceOutcome] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RemittanceOutcome")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RemittanceOutcome] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RemittanceOutcome(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RemittanceOutcomeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RemittanceOutcome, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RemittanceOutcome, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_NoteTypeu45listFormat = new DefaultComionkinmrshl7fhir_NoteTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NoteTypeu45listFormat extends scalaxb.XMLFormat[NoteTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NoteTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("display")) => DisplayValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("print")) => Print
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("printoper")) => Printoper

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NoteTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NoteTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NoteTypeFormat extends scalaxb.ElemNameParser[NoteType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NoteType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NoteType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NoteType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NoteTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NoteType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NoteType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConceptMapEquivalenceu45listFormat = new DefaultComionkinmrshl7fhir_ConceptMapEquivalenceu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConceptMapEquivalenceu45listFormat extends scalaxb.XMLFormat[ConceptMapEquivalenceu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConceptMapEquivalenceu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("relatedto")) => Relatedto
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equivalent")) => Equivalent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equal")) => Equal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wider")) => Wider
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("subsumes")) => Subsumes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("narrower")) => Narrower
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specializes")) => Specializes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inexact")) => Inexact
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unmatched")) => Unmatched
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("disjoint")) => Disjoint

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConceptMapEquivalenceu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConceptMapEquivalenceu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConceptMapEquivalenceFormat extends scalaxb.ElemNameParser[ConceptMapEquivalence] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMapEquivalence")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapEquivalence] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConceptMapEquivalence(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConceptMapEquivalenceu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapEquivalence, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapEquivalence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DocumentReferenceStatusu45listFormat = new DefaultComionkinmrshl7fhir_DocumentReferenceStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DocumentReferenceStatusu45listFormat extends scalaxb.XMLFormat[DocumentReferenceStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DocumentReferenceStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("current")) => CurrentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("superseded")) => Superseded
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DocumentReferenceStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DocumentReferenceStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceStatusFormat extends scalaxb.ElemNameParser[DocumentReferenceStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReferenceStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DocumentReferenceStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DocumentReferenceStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentReferenceStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentReferenceStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AccountTypeFormat extends scalaxb.ElemNameParser[AccountType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Account")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "balance")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "owner")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "guarantor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      AccountType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AccountStatus](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[Accountu46Coverage](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[Accountu46Guarantor](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AccountType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[AccountStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.active map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.balance map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("balance"), __scope, false) } getOrElse {Nil},
        __obj.coverage flatMap { scalaxb.toXML[Accountu46Coverage](_, Some(fhirUrl), Some("coverage"), __scope, false) },
        __obj.owner map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("owner"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.guarantor flatMap { scalaxb.toXML[Accountu46Guarantor](_, Some(fhirUrl), Some("guarantor"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Accountu46CoverageFormat extends scalaxb.ElemNameParser[Accountu46Coverage] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Account.Coverage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Accountu46Coverage] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Accountu46Coverage(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Accountu46Coverage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Accountu46Coverage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.coverage, Some(fhirUrl), Some("coverage"), __scope, false),
        __obj.priority map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Accountu46GuarantorFormat extends scalaxb.ElemNameParser[Accountu46Guarantor] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Account.Guarantor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Accountu46Guarantor] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "party")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onHold")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Accountu46Guarantor(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Accountu46Guarantor, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Accountu46Guarantor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.party, Some(fhirUrl), Some("party"), __scope, false),
        __obj.onHold map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("onHold"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_AccountStatusu45listFormat = new DefaultComionkinmrshl7fhir_AccountStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AccountStatusu45listFormat extends scalaxb.XMLFormat[AccountStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AccountStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue13
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue17

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AccountStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AccountStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AccountStatusFormat extends scalaxb.ElemNameParser[AccountStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AccountStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AccountStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AccountStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AccountStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AccountStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ActivityDefinitionTypeFormat extends scalaxb.ElemNameParser[ActivityDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActivityDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActivityDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contributor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "library")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dosage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "transform")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dynamicValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 =>
      ActivityDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ContributorType2](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[ActivityDefinitionu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[DosageType](_, scalaxb.ElemName(node) :: stack) },
        p44 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p46 map { scalaxb.fromXML[ActivityDefinitionu46DynamicValue](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ActivityDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.contributor flatMap { scalaxb.toXML[ContributorType2](_, Some(fhirUrl), Some("contributor"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.library flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("library"), __scope, false) },
        __obj.kind map { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("kind"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.timingTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("timingTiming"), __scope, false) } getOrElse {Nil},
        __obj.timingDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("timingDateTime"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.timingRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("timingRange"), __scope, false) } getOrElse {Nil},
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[ActivityDefinitionu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.productReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("productReference"), __scope, false) } getOrElse {Nil},
        __obj.productCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("productCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.dosage flatMap { scalaxb.toXML[DosageType](_, Some(fhirUrl), Some("dosage"), __scope, false) },
        __obj.bodySite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) },
        __obj.transform map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("transform"), __scope, false) } getOrElse {Nil},
        __obj.dynamicValue flatMap { scalaxb.toXML[ActivityDefinitionu46DynamicValue](_, Some(fhirUrl), Some("dynamicValue"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ActivityDefinitionu46ParticipantFormat extends scalaxb.ElemNameParser[ActivityDefinitionu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActivityDefinition.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActivityDefinitionu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ActivityDefinitionu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ActionParticipantType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActivityDefinitionu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActivityDefinitionu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ActionParticipantType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ActivityDefinitionu46DynamicValueFormat extends scalaxb.ElemNameParser[ActivityDefinitionu46DynamicValue] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActivityDefinition.DynamicValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActivityDefinitionu46DynamicValue] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ActivityDefinitionu46DynamicValue(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActivityDefinitionu46DynamicValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActivityDefinitionu46DynamicValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ActionParticipantTypeu45listFormat = new DefaultComionkinmrshl7fhir_ActionParticipantTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionParticipantTypeu45listFormat extends scalaxb.XMLFormat[ActionParticipantTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionParticipantTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patient")) => PatientValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("practitioner")) => PractitionerValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("related-person")) => Relatedu45person

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionParticipantTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionParticipantTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionParticipantTypeFormat extends scalaxb.ElemNameParser[ActionParticipantType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionParticipantType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionParticipantType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionParticipantType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionParticipantTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionParticipantType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionParticipantType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ResourceTypeu45listFormat = new DefaultComionkinmrshl7fhir_ResourceTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ResourceTypeu45listFormat extends scalaxb.XMLFormat[ResourceTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ResourceTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Account")) => AccountValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ActivityDefinition")) => ActivityDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AdverseEvent")) => AdverseEventValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AllergyIntolerance")) => AllergyIntoleranceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Appointment")) => AppointmentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AppointmentResponse")) => AppointmentResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AuditEvent")) => AuditEventValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Basic")) => BasicValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Binary")) => BinaryValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BodySite")) => BodySiteValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Bundle")) => BundleValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CapabilityStatement")) => CapabilityStatementValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CarePlan")) => CarePlanValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CareTeam")) => CareTeamValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ChargeItem")) => ChargeItemValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Claim")) => ClaimValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClaimResponse")) => ClaimResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClinicalImpression")) => ClinicalImpressionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CodeSystem")) => CodeSystemValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Communication")) => CommunicationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CommunicationRequest")) => CommunicationRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CompartmentDefinition")) => CompartmentDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Composition")) => CompositionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ConceptMap")) => ConceptMapValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Condition")) => ConditionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Consent")) => ConsentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Contract")) => ContractValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coverage")) => CoverageValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DataElement")) => DataElementValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DetectedIssue")) => DetectedIssueValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Device")) => DeviceValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceComponent")) => DeviceComponentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceMetric")) => DeviceMetricValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceRequest")) => DeviceRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceUseStatement")) => DeviceUseStatementValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DiagnosticReport")) => DiagnosticReportValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentManifest")) => DocumentManifestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentReference")) => DocumentReferenceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DomainResource")) => DomainResourceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityRequest")) => EligibilityRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityResponse")) => EligibilityResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Encounter")) => EncounterValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Endpoint")) => EndpointValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentRequest")) => EnrollmentRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentResponse")) => EnrollmentResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EpisodeOfCare")) => EpisodeOfCareValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExpansionProfile")) => ExpansionProfileValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExplanationOfBenefit")) => ExplanationOfBenefitValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FamilyMemberHistory")) => FamilyMemberHistoryValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Flag")) => FlagValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Goal")) => GoalValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GraphDefinition")) => GraphDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Group")) => GroupValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GuidanceResponse")) => GuidanceResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HealthcareService")) => HealthcareServiceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingManifest")) => ImagingManifestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingStudy")) => ImagingStudyValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Immunization")) => ImmunizationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImmunizationRecommendation")) => ImmunizationRecommendationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImplementationGuide")) => ImplementationGuideValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Library")) => LibraryValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Linkage")) => LinkageValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("List")) => ListTypeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Location")) => LocationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Measure")) => MeasureValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MeasureReport")) => MeasureReportValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Media")) => MediaValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Medication")) => MedicationValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationAdministration")) => MedicationAdministrationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationDispense")) => MedicationDispenseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationRequest")) => MedicationRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationStatement")) => MedicationStatementValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageDefinition")) => MessageDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageHeader")) => MessageHeaderValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NamingSystem")) => NamingSystemValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NutritionOrder")) => NutritionOrderValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Observation")) => ObservationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationDefinition")) => OperationDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationOutcome")) => OperationOutcomeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Organization")) => OrganizationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Parameters")) => ParametersValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Patient")) => PatientValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentNotice")) => PaymentNoticeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentReconciliation")) => PaymentReconciliationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Person")) => PersonValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PlanDefinition")) => PlanDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Practitioner")) => PractitionerValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PractitionerRole")) => PractitionerRoleValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Procedure")) => ProcedureValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcedureRequest")) => ProcedureRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessRequest")) => ProcessRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessResponse")) => ProcessResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Provenance")) => ProvenanceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Questionnaire")) => QuestionnaireValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("QuestionnaireResponse")) => QuestionnaireResponseValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ReferralRequest")) => ReferralRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedPerson")) => RelatedPersonValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RequestGroup")) => RequestGroupValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchStudy")) => ResearchStudyValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchSubject")) => ResearchSubjectValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Resource")) => ResourceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RiskAssessment")) => RiskAssessmentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Schedule")) => ScheduleValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SearchParameter")) => SearchParameterValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Sequence")) => SequenceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ServiceDefinition")) => ServiceDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Slot")) => SlotValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Specimen")) => SpecimenValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureDefinition")) => StructureDefinitionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureMap")) => StructureMapValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Subscription")) => SubscriptionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Substance")) => SubstanceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyDelivery")) => SupplyDeliveryValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyRequest")) => SupplyRequestValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Task")) => TaskValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestReport")) => TestReportValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestScript")) => TestScriptValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ValueSet")) => ValueSetValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VisionPrescription")) => VisionPrescriptionValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ResourceTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ResourceTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ResourceTypeTypeFormat extends scalaxb.ElemNameParser[ResourceTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResourceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResourceTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ResourceTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ResourceTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResourceTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResourceTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AdverseEventTypeFormat extends scalaxb.ElemNameParser[AdverseEventType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AdverseEvent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AdverseEventType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reaction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "seriousness")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "recorder")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eventParticipant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "suspectEntity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subjectMedicalHistory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referenceDocument")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "study")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      AdverseEventType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AdverseEventCategory](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[AdverseEventu46SuspectEntity](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AdverseEventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[AdverseEventCategory](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.reaction flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reaction"), __scope, false) },
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.seriousness map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("seriousness"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.recorder map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recorder"), __scope, false) } getOrElse {Nil},
        __obj.eventParticipant map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("eventParticipant"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.suspectEntity flatMap { scalaxb.toXML[AdverseEventu46SuspectEntity](_, Some(fhirUrl), Some("suspectEntity"), __scope, false) },
        __obj.subjectMedicalHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subjectMedicalHistory"), __scope, false) },
        __obj.referenceDocument flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referenceDocument"), __scope, false) },
        __obj.study flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("study"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AdverseEventu46SuspectEntityFormat extends scalaxb.ElemNameParser[AdverseEventu46SuspectEntity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AdverseEvent.SuspectEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AdverseEventu46SuspectEntity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "instance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causality")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causalityAssessment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causalityProductRelatedness")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causalityMethod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causalityAuthor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "causalityResult")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      AdverseEventu46SuspectEntity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[AdverseEventCausality](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AdverseEventu46SuspectEntity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AdverseEventu46SuspectEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.instance, Some(fhirUrl), Some("instance"), __scope, false),
        __obj.causality map { scalaxb.toXML[AdverseEventCausality](_, Some(fhirUrl), Some("causality"), __scope, false) } getOrElse {Nil},
        __obj.causalityAssessment map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("causalityAssessment"), __scope, false) } getOrElse {Nil},
        __obj.causalityProductRelatedness map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("causalityProductRelatedness"), __scope, false) } getOrElse {Nil},
        __obj.causalityMethod map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("causalityMethod"), __scope, false) } getOrElse {Nil},
        __obj.causalityAuthor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("causalityAuthor"), __scope, false) } getOrElse {Nil},
        __obj.causalityResult map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("causalityResult"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_AdverseEventCausalityu45listFormat = new DefaultComionkinmrshl7fhir_AdverseEventCausalityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AdverseEventCausalityu45listFormat extends scalaxb.XMLFormat[AdverseEventCausalityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AdverseEventCausalityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("causality1")) => Causality1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("causality2")) => Causality2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AdverseEventCausalityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AdverseEventCausalityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AdverseEventCausalityFormat extends scalaxb.ElemNameParser[AdverseEventCausality] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AdverseEventCausality")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AdverseEventCausality] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AdverseEventCausality(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AdverseEventCausalityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AdverseEventCausality, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AdverseEventCausality, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AdverseEventCategoryu45listFormat = new DefaultComionkinmrshl7fhir_AdverseEventCategoryu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AdverseEventCategoryu45listFormat extends scalaxb.XMLFormat[AdverseEventCategoryu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AdverseEventCategoryu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AE")) => AE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PAE")) => PAE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AdverseEventCategoryu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AdverseEventCategoryu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AdverseEventCategoryFormat extends scalaxb.ElemNameParser[AdverseEventCategory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AdverseEventCategory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AdverseEventCategory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AdverseEventCategory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AdverseEventCategoryu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AdverseEventCategory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AdverseEventCategory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeFormat extends scalaxb.ElemNameParser[AllergyIntoleranceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntolerance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "clinicalStatus")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "verificationStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "criticality")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assertedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "recorder")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asserter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastOccurrence")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reaction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      AllergyIntoleranceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AllergyIntoleranceClinicalStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[AllergyIntoleranceVerificationStatus](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[AllergyIntoleranceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[AllergyIntoleranceCategory](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[AllergyIntoleranceCriticality](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[AllergyIntoleranceu46Reaction](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AllergyIntoleranceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.clinicalStatus map { scalaxb.toXML[AllergyIntoleranceClinicalStatus](_, Some(fhirUrl), Some("clinicalStatus"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[AllergyIntoleranceVerificationStatus](__obj.verificationStatus, Some(fhirUrl), Some("verificationStatus"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[AllergyIntoleranceTypeType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[AllergyIntoleranceCategory](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.criticality map { scalaxb.toXML[AllergyIntoleranceCriticality](_, Some(fhirUrl), Some("criticality"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.onsetDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("onsetDateTime"), __scope, false) } getOrElse {Nil},
        __obj.onsetAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("onsetAge"), __scope, false) } getOrElse {Nil},
        __obj.onsetPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("onsetPeriod"), __scope, false) } getOrElse {Nil},
        __obj.onsetRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("onsetRange"), __scope, false) } getOrElse {Nil},
        __obj.onsetString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("onsetString"), __scope, false) } getOrElse {Nil},
        __obj.assertedDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("assertedDate"), __scope, false) } getOrElse {Nil},
        __obj.recorder map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recorder"), __scope, false) } getOrElse {Nil},
        __obj.asserter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("asserter"), __scope, false) } getOrElse {Nil},
        __obj.lastOccurrence map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("lastOccurrence"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.reaction flatMap { scalaxb.toXML[AllergyIntoleranceu46Reaction](_, Some(fhirUrl), Some("reaction"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceu46ReactionFormat extends scalaxb.ElemNameParser[AllergyIntoleranceu46Reaction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntolerance.Reaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceu46Reaction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "substance")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "manifestation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onset")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "severity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "exposureRoute")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      AllergyIntoleranceu46Reaction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[AllergyIntoleranceSeverity](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceu46Reaction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceu46Reaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.substance map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("substance"), __scope, false) } getOrElse {Nil},
        __obj.manifestation flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("manifestation"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.onset map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("onset"), __scope, false) } getOrElse {Nil},
        __obj.severity map { scalaxb.toXML[AllergyIntoleranceSeverity](_, Some(fhirUrl), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.exposureRoute map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("exposureRoute"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceCriticalityu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCriticalityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceCriticalityu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceCriticalityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceCriticalityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("low")) => Low
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("high")) => High
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unable-to-assess")) => Unableu45tou45assess

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceCriticalityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceCriticalityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceCriticalityFormat extends scalaxb.ElemNameParser[AllergyIntoleranceCriticality] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceCriticality")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceCriticality] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceCriticality(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceCriticalityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceCriticality, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceCriticality, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceTypeu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allergy")) => Allergy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intolerance")) => Intolerance

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceTypeTypeFormat extends scalaxb.ElemNameParser[AllergyIntoleranceTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceCategoryu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceCategoryu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceCategoryu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceCategoryu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceCategoryu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("food")) => Food
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medication")) => MedicationValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("environment")) => Environment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("biologic")) => Biologic

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceCategoryu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceCategoryu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceCategoryFormat extends scalaxb.ElemNameParser[AllergyIntoleranceCategory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceCategory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceCategory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceCategory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceCategoryu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceCategory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceCategory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceVerificationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceVerificationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unconfirmed")) => Unconfirmed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("confirmed")) => ConfirmedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refuted")) => RefutedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue15

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceVerificationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceVerificationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceVerificationStatusFormat extends scalaxb.ElemNameParser[AllergyIntoleranceVerificationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceVerificationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceVerificationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceVerificationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceVerificationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceVerificationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceVerificationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceSeverityu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceSeverityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceSeverityu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceSeverityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceSeverityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mild")) => Mild
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("moderate")) => Moderate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("severe")) => Severe

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceSeverityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceSeverityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceSeverityFormat extends scalaxb.ElemNameParser[AllergyIntoleranceSeverity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceSeverity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceSeverity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceSeverity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceSeverityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceSeverity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceSeverity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusu45listFormat = new DefaultComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusu45listFormat extends scalaxb.XMLFormat[AllergyIntoleranceClinicalStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AllergyIntoleranceClinicalStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resolved")) => ResolvedValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AllergyIntoleranceClinicalStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AllergyIntoleranceClinicalStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AllergyIntoleranceClinicalStatusFormat extends scalaxb.ElemNameParser[AllergyIntoleranceClinicalStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AllergyIntoleranceClinicalStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AllergyIntoleranceClinicalStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AllergyIntoleranceClinicalStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AllergyIntoleranceClinicalStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AllergyIntoleranceClinicalStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AllergyIntoleranceClinicalStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AppointmentTypeFormat extends scalaxb.ElemNameParser[AppointmentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Appointment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AppointmentType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "serviceCategory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "serviceType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "appointmentType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "indication")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInformation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minutesDuration")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "slot")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "incomingReferral")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "requestedPeriod")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      AppointmentType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[AppointmentStatus](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Appointmentu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AppointmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[AppointmentStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.serviceCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceCategory"), __scope, false) } getOrElse {Nil},
        __obj.serviceType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceType"), __scope, false) },
        __obj.specialty flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) },
        __obj.appointmentType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("appointmentType"), __scope, false) } getOrElse {Nil},
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.indication flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("indication"), __scope, false) },
        __obj.priority map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.supportingInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInformation"), __scope, false) },
        __obj.start map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil},
        __obj.minutesDuration map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("minutesDuration"), __scope, false) } getOrElse {Nil},
        __obj.slot flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("slot"), __scope, false) },
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.incomingReferral flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("incomingReferral"), __scope, false) },
        __obj.participant flatMap { scalaxb.toXML[Appointmentu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.requestedPeriod flatMap { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("requestedPeriod"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Appointmentu46ParticipantFormat extends scalaxb.ElemNameParser[Appointmentu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Appointment.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Appointmentu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "required")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Appointmentu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ParticipantRequired](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ParticipationStatus](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Appointmentu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Appointmentu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.actor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("actor"), __scope, false) } getOrElse {Nil},
        __obj.required map { scalaxb.toXML[ParticipantRequired](_, Some(fhirUrl), Some("required"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ParticipationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false))

  }

  def buildComionkinmrshl7fhir_ParticipantRequiredu45listFormat = new DefaultComionkinmrshl7fhir_ParticipantRequiredu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ParticipantRequiredu45listFormat extends scalaxb.XMLFormat[ParticipantRequiredu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ParticipantRequiredu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("required")) => RequiredValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("optional")) => Optional
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("information-only")) => Informationu45only

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ParticipantRequiredu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ParticipantRequiredu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ParticipantRequiredFormat extends scalaxb.ElemNameParser[ParticipantRequired] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ParticipantRequired")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ParticipantRequired] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ParticipantRequired(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ParticipantRequiredu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ParticipantRequired, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ParticipantRequired, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AppointmentStatusu45listFormat = new DefaultComionkinmrshl7fhir_AppointmentStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AppointmentStatusu45listFormat extends scalaxb.XMLFormat[AppointmentStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AppointmentStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => ProposedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pending")) => Pending
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("booked")) => Booked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("arrived")) => ArrivedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fulfilled")) => Fulfilled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noshow")) => Noshow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue14

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AppointmentStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AppointmentStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AppointmentStatusFormat extends scalaxb.ElemNameParser[AppointmentStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AppointmentStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AppointmentStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AppointmentStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AppointmentStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AppointmentStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AppointmentStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ParticipationStatusu45listFormat = new DefaultComionkinmrshl7fhir_ParticipationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ParticipationStatusu45listFormat extends scalaxb.XMLFormat[ParticipationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ParticipationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accepted")) => AcceptedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("declined")) => Declined
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tentative")) => Tentative
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("needs-action")) => Needsu45action

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ParticipationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ParticipationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ParticipationStatusFormat extends scalaxb.ElemNameParser[ParticipationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ParticipationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ParticipationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ParticipationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ParticipationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ParticipationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ParticipationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AppointmentResponseTypeFormat extends scalaxb.ElemNameParser[AppointmentResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AppointmentResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AppointmentResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "appointment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participantType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "participantStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      AppointmentResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ParticipationStatus](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AppointmentResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.appointment, Some(fhirUrl), Some("appointment"), __scope, false),
        __obj.start map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil},
        __obj.participantType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("participantType"), __scope, false) },
        __obj.actor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("actor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ParticipationStatus](__obj.participantStatus, Some(fhirUrl), Some("participantStatus"), __scope, false),
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_AuditEventTypeFormat extends scalaxb.ElemNameParser[AuditEventType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subtype")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "recorded")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcomeDesc")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "purposeOfEvent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "entity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      AuditEventType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p9, scalaxb.ElemName(node) :: stack),
        p10 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[AuditEventAction](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[InstantType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[AuditEventOutcome](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[AuditEventu46Agent](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[AuditEventu46Source](p17, scalaxb.ElemName(node) :: stack),
        p18 map { scalaxb.fromXML[AuditEventu46Entity](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AuditEventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.subtype flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("subtype"), __scope, false) },
        __obj.action map { scalaxb.toXML[AuditEventAction](_, Some(fhirUrl), Some("action"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[InstantType](__obj.recorded, Some(fhirUrl), Some("recorded"), __scope, false),
        __obj.outcome map { scalaxb.toXML[AuditEventOutcome](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.outcomeDesc map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("outcomeDesc"), __scope, false) } getOrElse {Nil},
        __obj.purposeOfEvent flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("purposeOfEvent"), __scope, false) },
        __obj.agent flatMap { scalaxb.toXML[AuditEventu46Agent](_, Some(fhirUrl), Some("agent"), __scope, false) },
        scalaxb.toXML[AuditEventu46Source](__obj.source, Some(fhirUrl), Some("source"), __scope, false),
        __obj.entity flatMap { scalaxb.toXML[AuditEventu46Entity](_, Some(fhirUrl), Some("entity"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AuditEventu46AgentFormat extends scalaxb.ElemNameParser[AuditEventu46Agent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent.Agent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventu46Agent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "userId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "altId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "requestor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "policy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "media")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "network")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "purposeOfUse")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      AuditEventu46Agent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[AuditEventu46Network](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventu46Agent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventu46Agent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) },
        __obj.reference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.userId map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("userId"), __scope, false) } getOrElse {Nil},
        __obj.altId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("altId"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BooleanTypeType](__obj.requestor, Some(fhirUrl), Some("requestor"), __scope, false),
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.policy flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("policy"), __scope, false) },
        __obj.media map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("media"), __scope, false) } getOrElse {Nil},
        __obj.network map { scalaxb.toXML[AuditEventu46Network](_, Some(fhirUrl), Some("network"), __scope, false) } getOrElse {Nil},
        __obj.purposeOfUse flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("purposeOfUse"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AuditEventu46NetworkFormat extends scalaxb.ElemNameParser[AuditEventu46Network] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent.Network")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventu46Network] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      AuditEventu46Network(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[AuditEventAgentNetworkType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventu46Network, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventu46Network, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.address map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("address"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[AuditEventAgentNetworkType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_AuditEventu46SourceFormat extends scalaxb.ElemNameParser[AuditEventu46Source] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent.Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventu46Source] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "site")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      AuditEventu46Source(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdentifierType](p4, scalaxb.ElemName(node) :: stack),
        p5 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventu46Source, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventu46Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.site map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("site"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[IdentifierType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        __obj.typeValue flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AuditEventu46EntityFormat extends scalaxb.ElemNameParser[AuditEventu46Entity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent.Entity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventu46Entity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lifecycle")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "query")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      AuditEventu46Entity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[AuditEventu46Detail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventu46Entity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventu46Entity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.reference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.role map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.lifecycle map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("lifecycle"), __scope, false) } getOrElse {Nil},
        __obj.securityLabel flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.query map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("query"), __scope, false) } getOrElse {Nil},
        __obj.detail flatMap { scalaxb.toXML[AuditEventu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_AuditEventu46DetailFormat extends scalaxb.ElemNameParser[AuditEventu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEvent.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      AuditEventu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Base64BinaryTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[Base64BinaryTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  def buildComionkinmrshl7fhir_AuditEventOutcomeu45listFormat = new DefaultComionkinmrshl7fhir_AuditEventOutcomeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AuditEventOutcomeu45listFormat extends scalaxb.XMLFormat[AuditEventOutcomeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AuditEventOutcomeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("0")) => Number0
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("4")) => Number4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("8")) => Number8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("12")) => Number12

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AuditEventOutcomeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AuditEventOutcomeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AuditEventOutcomeFormat extends scalaxb.ElemNameParser[AuditEventOutcome] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEventOutcome")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventOutcome] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AuditEventOutcome(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AuditEventOutcomeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventOutcome, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventOutcome, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AuditEventActionu45listFormat = new DefaultComionkinmrshl7fhir_AuditEventActionu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AuditEventActionu45listFormat extends scalaxb.XMLFormat[AuditEventActionu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AuditEventActionu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C")) => CValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => R
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("U")) => U
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("D")) => DValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E")) => E

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AuditEventActionu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AuditEventActionu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AuditEventActionFormat extends scalaxb.ElemNameParser[AuditEventAction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEventAction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventAction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AuditEventAction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AuditEventActionu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AuditEventAgentNetworkTypeu45listFormat = new DefaultComionkinmrshl7fhir_AuditEventAgentNetworkTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AuditEventAgentNetworkTypeu45listFormat extends scalaxb.XMLFormat[AuditEventAgentNetworkTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AuditEventAgentNetworkTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("1")) => Number1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("2")) => Number2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("3")) => Number3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("4")) => Number4Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("5")) => Number5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AuditEventAgentNetworkTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AuditEventAgentNetworkTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AuditEventAgentNetworkTypeFormat extends scalaxb.ElemNameParser[AuditEventAgentNetworkType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AuditEventAgentNetworkType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AuditEventAgentNetworkType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AuditEventAgentNetworkType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AuditEventAgentNetworkTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AuditEventAgentNetworkType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AuditEventAgentNetworkType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_BasicTypeFormat extends scalaxb.ElemNameParser[BasicType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Basic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BasicType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      BasicType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: BasicType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_BinaryTypeFormat extends scalaxb.ElemNameParser[BinaryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Binary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BinaryType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "contentType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "securityContext")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "content")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      BinaryType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Base64BinaryTypeType](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: BinaryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeType](__obj.contentType, Some(fhirUrl), Some("contentType"), __scope, false),
        __obj.securityContext map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("securityContext"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Base64BinaryTypeType](__obj.content, Some(fhirUrl), Some("content"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_BodySiteTypeFormat extends scalaxb.ElemNameParser[BodySiteType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("BodySite")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BodySiteType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "qualifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "image")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      BodySiteType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p15, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: BodySiteType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.qualifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("qualifier"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.image flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("image"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_BundleTypeFormat extends scalaxb.ElemNameParser[BundleType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BundleType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "total")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "entry")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      BundleType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BundleTypeType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[Bundleu46Link](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[Bundleu46Entry](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: BundleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BundleTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.total map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("total"), __scope, false) } getOrElse {Nil},
        __obj.link flatMap { scalaxb.toXML[Bundleu46Link](_, Some(fhirUrl), Some("link"), __scope, false) },
        __obj.entry flatMap { scalaxb.toXML[Bundleu46Entry](_, Some(fhirUrl), Some("entry"), __scope, false) },
        __obj.signature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("signature"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Bundleu46LinkFormat extends scalaxb.ElemNameParser[Bundleu46Link] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle.Link")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bundleu46Link] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "relation")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Bundleu46Link(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UriType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bundleu46Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bundleu46Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.relation, Some(fhirUrl), Some("relation"), __scope, false),
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Bundleu46EntryFormat extends scalaxb.ElemNameParser[Bundleu46Entry] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle.Entry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bundleu46Entry] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fullUrl")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "search")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Bundleu46Entry(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[Bundleu46Link](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Bundleu46Search](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Bundleu46Request](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Bundleu46Response](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bundleu46Entry, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bundleu46Entry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.link flatMap { scalaxb.toXML[Bundleu46Link](_, Some(fhirUrl), Some("link"), __scope, false) },
        __obj.fullUrl map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("fullUrl"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil},
        __obj.search map { scalaxb.toXML[Bundleu46Search](_, Some(fhirUrl), Some("search"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[Bundleu46Request](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[Bundleu46Response](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Bundleu46SearchFormat extends scalaxb.ElemNameParser[Bundleu46Search] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle.Search")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bundleu46Search] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "score")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Bundleu46Search(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[SearchEntryMode](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bundleu46Search, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bundleu46Search, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.mode map { scalaxb.toXML[SearchEntryMode](_, Some(fhirUrl), Some("mode"), __scope, false) } getOrElse {Nil},
        __obj.score map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("score"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Bundleu46RequestFormat extends scalaxb.ElemNameParser[Bundleu46Request] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle.Request")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bundleu46Request] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ifNoneMatch")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ifModifiedSince")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ifMatch")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ifNoneExist")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Bundleu46Request(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[HTTPVerb](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UriType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bundleu46Request, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bundleu46Request, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[HTTPVerb](__obj.method, Some(fhirUrl), Some("method"), __scope, false),
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.ifNoneMatch map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("ifNoneMatch"), __scope, false) } getOrElse {Nil},
        __obj.ifModifiedSince map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("ifModifiedSince"), __scope, false) } getOrElse {Nil},
        __obj.ifMatch map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("ifMatch"), __scope, false) } getOrElse {Nil},
        __obj.ifNoneExist map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("ifNoneExist"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Bundleu46ResponseFormat extends scalaxb.ElemNameParser[Bundleu46Response] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Bundle.Response")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bundleu46Response] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "etag")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastModified")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Bundleu46Response(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bundleu46Response, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bundleu46Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.location map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.etag map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("etag"), __scope, false) } getOrElse {Nil},
        __obj.lastModified map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("lastModified"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_HTTPVerbu45listFormat = new DefaultComionkinmrshl7fhir_HTTPVerbu45listFormat {}
  trait DefaultComionkinmrshl7fhir_HTTPVerbu45listFormat extends scalaxb.XMLFormat[HTTPVerbu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): HTTPVerbu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GET")) => GETValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("POST")) => POSTValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PUT")) => PUTValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DELETE")) => DELETEValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, HTTPVerbu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: HTTPVerbu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_HTTPVerbFormat extends scalaxb.ElemNameParser[HTTPVerb] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("HTTPVerb")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[HTTPVerb] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      HTTPVerb(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[HTTPVerbu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: HTTPVerb, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: HTTPVerb, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_BundleTypeu45listFormat = new DefaultComionkinmrshl7fhir_BundleTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_BundleTypeu45listFormat extends scalaxb.XMLFormat[BundleTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): BundleTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("document")) => Document
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("message")) => MessageValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transaction")) => TransactionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transaction-response")) => Transactionu45response
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("batch")) => BatchValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("batch-response")) => Batchu45response
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("history")) => History
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("searchset")) => Searchset
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collection")) => Collection

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, BundleTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: BundleTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_BundleTypeTypeFormat extends scalaxb.ElemNameParser[BundleTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("BundleType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BundleTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      BundleTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BundleTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: BundleTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: BundleTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SearchEntryModeu45listFormat = new DefaultComionkinmrshl7fhir_SearchEntryModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SearchEntryModeu45listFormat extends scalaxb.XMLFormat[SearchEntryModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SearchEntryModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("match")) => Match
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("include")) => Include
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outcome")) => Outcome

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SearchEntryModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SearchEntryModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SearchEntryModeFormat extends scalaxb.ElemNameParser[SearchEntryMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchEntryMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchEntryMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SearchEntryMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SearchEntryModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SearchEntryMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SearchEntryMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementTypeFormat extends scalaxb.ElemNameParser[CapabilityStatementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "instantiates")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "software")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implementation")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "fhirVersion")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "acceptUnknown")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "format")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "patchFormat")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "implementationGuide")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rest")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "messaging")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "document")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 =>
      CapabilityStatementType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateTimeType](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CapabilityStatementKind](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CapabilityStatementu46Software](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CapabilityStatementu46Implementation](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p27, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UnknownContentCode](p28, scalaxb.ElemName(node) :: stack),
        p29 map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[CapabilityStatementu46Rest](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[CapabilityStatementu46Messaging](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[CapabilityStatementu46Document](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CapabilityStatementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DateTimeType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CapabilityStatementKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        __obj.instantiates flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("instantiates"), __scope, false) },
        __obj.software map { scalaxb.toXML[CapabilityStatementu46Software](_, Some(fhirUrl), Some("software"), __scope, false) } getOrElse {Nil},
        __obj.implementation map { scalaxb.toXML[CapabilityStatementu46Implementation](_, Some(fhirUrl), Some("implementation"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[IdType](__obj.fhirVersion, Some(fhirUrl), Some("fhirVersion"), __scope, false),
        scalaxb.toXML[UnknownContentCode](__obj.acceptUnknown, Some(fhirUrl), Some("acceptUnknown"), __scope, false),
        __obj.format flatMap { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("format"), __scope, false) },
        __obj.patchFormat flatMap { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("patchFormat"), __scope, false) },
        __obj.implementationGuide flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implementationGuide"), __scope, false) },
        __obj.profile flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) },
        __obj.rest flatMap { scalaxb.toXML[CapabilityStatementu46Rest](_, Some(fhirUrl), Some("rest"), __scope, false) },
        __obj.messaging flatMap { scalaxb.toXML[CapabilityStatementu46Messaging](_, Some(fhirUrl), Some("messaging"), __scope, false) },
        __obj.document flatMap { scalaxb.toXML[CapabilityStatementu46Document](_, Some(fhirUrl), Some("document"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46SoftwareFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Software] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Software")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Software] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "releaseDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      CapabilityStatementu46Software(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Software, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Software, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.releaseDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("releaseDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46ImplementationFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Implementation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Implementation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Implementation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Implementation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Implementation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Implementation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46RestFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Rest] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Rest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Rest] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "security")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "interaction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "searchParam")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "operation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "compartment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      CapabilityStatementu46Rest(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RestfulCapabilityMode](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CapabilityStatementu46Security](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CapabilityStatementu46Resource](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CapabilityStatementu46Interaction1](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CapabilityStatementu46SearchParam](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CapabilityStatementu46Operation](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Rest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Rest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[RestfulCapabilityMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.security map { scalaxb.toXML[CapabilityStatementu46Security](_, Some(fhirUrl), Some("security"), __scope, false) } getOrElse {Nil},
        __obj.resource flatMap { scalaxb.toXML[CapabilityStatementu46Resource](_, Some(fhirUrl), Some("resource"), __scope, false) },
        __obj.interaction flatMap { scalaxb.toXML[CapabilityStatementu46Interaction1](_, Some(fhirUrl), Some("interaction"), __scope, false) },
        __obj.searchParam flatMap { scalaxb.toXML[CapabilityStatementu46SearchParam](_, Some(fhirUrl), Some("searchParam"), __scope, false) },
        __obj.operation flatMap { scalaxb.toXML[CapabilityStatementu46Operation](_, Some(fhirUrl), Some("operation"), __scope, false) },
        __obj.compartment flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("compartment"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46SecurityFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Security] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Security")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Security] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "cors")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "certificate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CapabilityStatementu46Security(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CapabilityStatementu46Certificate](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Security, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Security, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.cors map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("cors"), __scope, false) } getOrElse {Nil},
        __obj.service flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.certificate flatMap { scalaxb.toXML[CapabilityStatementu46Certificate](_, Some(fhirUrl), Some("certificate"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46CertificateFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Certificate] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Certificate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Certificate] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "blob")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Certificate(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Certificate, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Certificate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.blob map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("blob"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46ResourceFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Resource] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Resource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Resource] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "interaction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "versioning")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "readHistory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "updateCreate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "conditionalCreate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "conditionalRead")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "conditionalUpdate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "conditionalDelete")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referencePolicy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "searchInclude")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "searchRevInclude")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "searchParam")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      CapabilityStatementu46Resource(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CapabilityStatementu46Interaction](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ResourceVersionPolicy](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ConditionalReadStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ConditionalDeleteStatus](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceHandlingPolicy](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CapabilityStatementu46SearchParam](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Resource, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Resource, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ResourceTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.profile map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.documentation map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.interaction flatMap { scalaxb.toXML[CapabilityStatementu46Interaction](_, Some(fhirUrl), Some("interaction"), __scope, false) },
        __obj.versioning map { scalaxb.toXML[ResourceVersionPolicy](_, Some(fhirUrl), Some("versioning"), __scope, false) } getOrElse {Nil},
        __obj.readHistory map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("readHistory"), __scope, false) } getOrElse {Nil},
        __obj.updateCreate map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("updateCreate"), __scope, false) } getOrElse {Nil},
        __obj.conditionalCreate map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("conditionalCreate"), __scope, false) } getOrElse {Nil},
        __obj.conditionalRead map { scalaxb.toXML[ConditionalReadStatus](_, Some(fhirUrl), Some("conditionalRead"), __scope, false) } getOrElse {Nil},
        __obj.conditionalUpdate map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("conditionalUpdate"), __scope, false) } getOrElse {Nil},
        __obj.conditionalDelete map { scalaxb.toXML[ConditionalDeleteStatus](_, Some(fhirUrl), Some("conditionalDelete"), __scope, false) } getOrElse {Nil},
        __obj.referencePolicy flatMap { scalaxb.toXML[ReferenceHandlingPolicy](_, Some(fhirUrl), Some("referencePolicy"), __scope, false) },
        __obj.searchInclude flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("searchInclude"), __scope, false) },
        __obj.searchRevInclude flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("searchRevInclude"), __scope, false) },
        __obj.searchParam flatMap { scalaxb.toXML[CapabilityStatementu46SearchParam](_, Some(fhirUrl), Some("searchParam"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46InteractionFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Interaction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Interaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Interaction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Interaction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TypeRestfulInteraction](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Interaction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Interaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TypeRestfulInteraction](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46SearchParamFormat extends scalaxb.ElemNameParser[CapabilityStatementu46SearchParam] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.SearchParam")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46SearchParam] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CapabilityStatementu46SearchParam(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SearchParamType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46SearchParam, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46SearchParam, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.definition map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[SearchParamType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46Interaction1Format extends scalaxb.ElemNameParser[CapabilityStatementu46Interaction1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Interaction1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Interaction1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Interaction1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SystemRestfulInteraction](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Interaction1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Interaction1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[SystemRestfulInteraction](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46OperationFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Operation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Operation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Operation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "definition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Operation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Operation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Operation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.definition, Some(fhirUrl), Some("definition"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46MessagingFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Messaging] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Messaging")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Messaging] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reliableCache")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportedMessage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "event")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      CapabilityStatementu46Messaging(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CapabilityStatementu46Endpoint](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CapabilityStatementu46SupportedMessage](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CapabilityStatementu46Event](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Messaging, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Messaging, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.endpoint flatMap { scalaxb.toXML[CapabilityStatementu46Endpoint](_, Some(fhirUrl), Some("endpoint"), __scope, false) },
        __obj.reliableCache map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("reliableCache"), __scope, false) } getOrElse {Nil},
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.supportedMessage flatMap { scalaxb.toXML[CapabilityStatementu46SupportedMessage](_, Some(fhirUrl), Some("supportedMessage"), __scope, false) },
        __obj.event flatMap { scalaxb.toXML[CapabilityStatementu46Event](_, Some(fhirUrl), Some("event"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46EndpointFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Endpoint] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Endpoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Endpoint] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "protocol")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46Endpoint(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UriType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Endpoint, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Endpoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.protocol, Some(fhirUrl), Some("protocol"), __scope, false),
        scalaxb.toXML[UriType](__obj.address, Some(fhirUrl), Some("address"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46SupportedMessageFormat extends scalaxb.ElemNameParser[CapabilityStatementu46SupportedMessage] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.SupportedMessage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46SupportedMessage] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "definition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CapabilityStatementu46SupportedMessage(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EventCapabilityMode](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46SupportedMessage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46SupportedMessage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[EventCapabilityMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.definition, Some(fhirUrl), Some("definition"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46EventFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Event] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Event")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Event] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "focus")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      CapabilityStatementu46Event(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[MessageSignificanceCategory](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EventCapabilityMode](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ResourceTypeType](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Event, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Event, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.category map { scalaxb.toXML[MessageSignificanceCategory](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[EventCapabilityMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        scalaxb.toXML[ResourceTypeType](__obj.focus, Some(fhirUrl), Some("focus"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.request, Some(fhirUrl), Some("request"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.response, Some(fhirUrl), Some("response"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementu46DocumentFormat extends scalaxb.ElemNameParser[CapabilityStatementu46Document] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatement.Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementu46Document] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "profile")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      CapabilityStatementu46Document(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DocumentMode](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementu46Document, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementu46Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DocumentMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.profile, Some(fhirUrl), Some("profile"), __scope, false))

  }

  def buildComionkinmrshl7fhir_CapabilityStatementKindu45listFormat = new DefaultComionkinmrshl7fhir_CapabilityStatementKindu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CapabilityStatementKindu45listFormat extends scalaxb.XMLFormat[CapabilityStatementKindu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CapabilityStatementKindu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instance")) => InstanceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("capability")) => Capability
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requirements")) => Requirements

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CapabilityStatementKindu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CapabilityStatementKindu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CapabilityStatementKindFormat extends scalaxb.ElemNameParser[CapabilityStatementKind] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CapabilityStatementKind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CapabilityStatementKind] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CapabilityStatementKind(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CapabilityStatementKindu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CapabilityStatementKind, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CapabilityStatementKind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_EventCapabilityModeu45listFormat = new DefaultComionkinmrshl7fhir_EventCapabilityModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EventCapabilityModeu45listFormat extends scalaxb.XMLFormat[EventCapabilityModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EventCapabilityModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sender")) => Sender
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("receiver")) => Receiver

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EventCapabilityModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EventCapabilityModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EventCapabilityModeFormat extends scalaxb.ElemNameParser[EventCapabilityMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EventCapabilityMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EventCapabilityMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EventCapabilityMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EventCapabilityModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EventCapabilityMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EventCapabilityMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ResourceVersionPolicyu45listFormat = new DefaultComionkinmrshl7fhir_ResourceVersionPolicyu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ResourceVersionPolicyu45listFormat extends scalaxb.XMLFormat[ResourceVersionPolicyu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ResourceVersionPolicyu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("no-version")) => Nou45version
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("versioned")) => Versioned
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("versioned-update")) => Versionedu45update

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ResourceVersionPolicyu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ResourceVersionPolicyu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ResourceVersionPolicyFormat extends scalaxb.ElemNameParser[ResourceVersionPolicy] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResourceVersionPolicy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResourceVersionPolicy] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ResourceVersionPolicy(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ResourceVersionPolicyu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResourceVersionPolicy, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResourceVersionPolicy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MessageSignificanceCategoryu45listFormat = new DefaultComionkinmrshl7fhir_MessageSignificanceCategoryu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MessageSignificanceCategoryu45listFormat extends scalaxb.XMLFormat[MessageSignificanceCategoryu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MessageSignificanceCategoryu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Consequence")) => Consequence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Currency")) => Currency
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Notification")) => Notification

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MessageSignificanceCategoryu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MessageSignificanceCategoryu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MessageSignificanceCategoryFormat extends scalaxb.ElemNameParser[MessageSignificanceCategory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageSignificanceCategory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageSignificanceCategory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MessageSignificanceCategory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MessageSignificanceCategoryu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageSignificanceCategory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageSignificanceCategory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DocumentModeu45listFormat = new DefaultComionkinmrshl7fhir_DocumentModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DocumentModeu45listFormat extends scalaxb.XMLFormat[DocumentModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DocumentModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("producer")) => Producer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("consumer")) => Consumer

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DocumentModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DocumentModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DocumentModeFormat extends scalaxb.ElemNameParser[DocumentMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DocumentMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DocumentModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_RestfulCapabilityModeu45listFormat = new DefaultComionkinmrshl7fhir_RestfulCapabilityModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RestfulCapabilityModeu45listFormat extends scalaxb.XMLFormat[RestfulCapabilityModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RestfulCapabilityModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("client")) => Client
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("server")) => Server

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RestfulCapabilityModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RestfulCapabilityModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RestfulCapabilityModeFormat extends scalaxb.ElemNameParser[RestfulCapabilityMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RestfulCapabilityMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RestfulCapabilityMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RestfulCapabilityMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RestfulCapabilityModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RestfulCapabilityMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RestfulCapabilityMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_UnknownContentCodeu45listFormat = new DefaultComionkinmrshl7fhir_UnknownContentCodeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_UnknownContentCodeu45listFormat extends scalaxb.XMLFormat[UnknownContentCodeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): UnknownContentCodeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("no")) => No
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extensions")) => Extensions
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("elements")) => Elements
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => Both

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UnknownContentCodeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: UnknownContentCodeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_UnknownContentCodeFormat extends scalaxb.ElemNameParser[UnknownContentCode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("UnknownContentCode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UnknownContentCode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UnknownContentCode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[UnknownContentCodeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UnknownContentCode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UnknownContentCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TypeRestfulInteractionu45listFormat = new DefaultComionkinmrshl7fhir_TypeRestfulInteractionu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TypeRestfulInteractionu45listFormat extends scalaxb.XMLFormat[TypeRestfulInteractionu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TypeRestfulInteractionu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("read")) => Read
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vread")) => Vread
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("update")) => Update
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patch")) => PatchValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delete")) => DeleteValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("history-instance")) => Historyu45instance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("history-type")) => Historyu45type
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("create")) => CreateValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("search-type")) => Searchu45type

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TypeRestfulInteractionu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TypeRestfulInteractionu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TypeRestfulInteractionFormat extends scalaxb.ElemNameParser[TypeRestfulInteraction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TypeRestfulInteraction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TypeRestfulInteraction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TypeRestfulInteraction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TypeRestfulInteractionu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TypeRestfulInteraction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TypeRestfulInteraction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SystemRestfulInteractionu45listFormat = new DefaultComionkinmrshl7fhir_SystemRestfulInteractionu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SystemRestfulInteractionu45listFormat extends scalaxb.XMLFormat[SystemRestfulInteractionu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SystemRestfulInteractionu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transaction")) => Transaction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("batch")) => Batch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("search-system")) => Searchu45system
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("history-system")) => Historyu45system

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SystemRestfulInteractionu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SystemRestfulInteractionu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SystemRestfulInteractionFormat extends scalaxb.ElemNameParser[SystemRestfulInteraction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SystemRestfulInteraction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SystemRestfulInteraction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SystemRestfulInteraction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SystemRestfulInteractionu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SystemRestfulInteraction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SystemRestfulInteraction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConditionalReadStatusu45listFormat = new DefaultComionkinmrshl7fhir_ConditionalReadStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConditionalReadStatusu45listFormat extends scalaxb.XMLFormat[ConditionalReadStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConditionalReadStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-supported")) => Notu45supportedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("modified-since")) => Modifiedu45since
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-match")) => Notu45match
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("full-support")) => Fullu45support

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConditionalReadStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConditionalReadStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConditionalReadStatusFormat extends scalaxb.ElemNameParser[ConditionalReadStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConditionalReadStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConditionalReadStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConditionalReadStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConditionalReadStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConditionalReadStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConditionalReadStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ReferenceHandlingPolicyu45listFormat = new DefaultComionkinmrshl7fhir_ReferenceHandlingPolicyu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ReferenceHandlingPolicyu45listFormat extends scalaxb.XMLFormat[ReferenceHandlingPolicyu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ReferenceHandlingPolicyu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("literal")) => Literal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("logical")) => Logical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resolves")) => Resolves
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("enforced")) => Enforced
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("local")) => Local

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReferenceHandlingPolicyu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ReferenceHandlingPolicyu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ReferenceHandlingPolicyFormat extends scalaxb.ElemNameParser[ReferenceHandlingPolicy] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ReferenceHandlingPolicy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReferenceHandlingPolicy] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ReferenceHandlingPolicy(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ReferenceHandlingPolicyu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ReferenceHandlingPolicy, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReferenceHandlingPolicy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConditionalDeleteStatusu45listFormat = new DefaultComionkinmrshl7fhir_ConditionalDeleteStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConditionalDeleteStatusu45listFormat extends scalaxb.XMLFormat[ConditionalDeleteStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConditionalDeleteStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-supported")) => Notu45supportedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("single")) => Single
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiple")) => Multiple

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConditionalDeleteStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConditionalDeleteStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConditionalDeleteStatusFormat extends scalaxb.ElemNameParser[ConditionalDeleteStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConditionalDeleteStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConditionalDeleteStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConditionalDeleteStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConditionalDeleteStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConditionalDeleteStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConditionalDeleteStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CarePlanTypeFormat extends scalaxb.ElemNameParser[CarePlanType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlan")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "careTeam")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "addresses")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInfo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "goal")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "activity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      CarePlanType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CarePlanStatus](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CarePlanIntent](p15, scalaxb.ElemName(node) :: stack),
        p16 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p19, scalaxb.ElemName(node) :: stack),
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CarePlanu46Activity](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CarePlanType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[CarePlanStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[CarePlanIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.author flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) },
        __obj.careTeam flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("careTeam"), __scope, false) },
        __obj.addresses flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("addresses"), __scope, false) },
        __obj.supportingInfo flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInfo"), __scope, false) },
        __obj.goal flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("goal"), __scope, false) },
        __obj.activity flatMap { scalaxb.toXML[CarePlanu46Activity](_, Some(fhirUrl), Some("activity"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CarePlanu46ActivityFormat extends scalaxb.ElemNameParser[CarePlanu46Activity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlan.Activity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanu46Activity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "outcomeCodeableConcept")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "outcomeReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "progress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      CarePlanu46Activity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CarePlanu46Detail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CarePlanu46Activity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CarePlanu46Activity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.outcomeCodeableConcept flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcomeCodeableConcept"), __scope, false) },
        __obj.outcomeReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("outcomeReference"), __scope, false) },
        __obj.progress flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("progress"), __scope, false) },
        __obj.reference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[CarePlanu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CarePlanu46DetailFormat extends scalaxb.ElemNameParser[CarePlanu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlan.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "goal")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "statusReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prohibited")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "scheduledTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "scheduledPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "scheduledString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dailyAmount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      CarePlanu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CarePlanActivityStatus](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CarePlanu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CarePlanu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.definition map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.goal flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("goal"), __scope, false) },
        scalaxb.toXML[CarePlanActivityStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.statusReason map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("statusReason"), __scope, false) } getOrElse {Nil},
        __obj.prohibited map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("prohibited"), __scope, false) } getOrElse {Nil},
        __obj.scheduledTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("scheduledTiming"), __scope, false) } getOrElse {Nil},
        __obj.scheduledPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("scheduledPeriod"), __scope, false) } getOrElse {Nil},
        __obj.scheduledString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("scheduledString"), __scope, false) } getOrElse {Nil},
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.productCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("productCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.productReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("productReference"), __scope, false) } getOrElse {Nil},
        __obj.dailyAmount map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("dailyAmount"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_CarePlanStatusu45listFormat = new DefaultComionkinmrshl7fhir_CarePlanStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CarePlanStatusu45listFormat extends scalaxb.XMLFormat[CarePlanStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CarePlanStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue14
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue18
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue8

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CarePlanStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CarePlanStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CarePlanStatusFormat extends scalaxb.ElemNameParser[CarePlanStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlanStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CarePlanStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CarePlanStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CarePlanStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CarePlanStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CarePlanActivityStatusu45listFormat = new DefaultComionkinmrshl7fhir_CarePlanActivityStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CarePlanActivityStatusu45listFormat extends scalaxb.XMLFormat[CarePlanActivityStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CarePlanActivityStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-started")) => Notu45started
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("scheduled")) => Scheduled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue9

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CarePlanActivityStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CarePlanActivityStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CarePlanActivityStatusFormat extends scalaxb.ElemNameParser[CarePlanActivityStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlanActivityStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanActivityStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CarePlanActivityStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CarePlanActivityStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CarePlanActivityStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CarePlanActivityStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CarePlanIntentu45listFormat = new DefaultComionkinmrshl7fhir_CarePlanIntentu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CarePlanIntentu45listFormat extends scalaxb.XMLFormat[CarePlanIntentu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CarePlanIntentu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposal")) => Proposal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("plan")) => Plan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("order")) => Order
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("option")) => OptionType

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CarePlanIntentu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CarePlanIntentu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CarePlanIntentFormat extends scalaxb.ElemNameParser[CarePlanIntent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CarePlanIntent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CarePlanIntent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CarePlanIntent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CarePlanIntentu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CarePlanIntent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CarePlanIntent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CareTeamTypeFormat extends scalaxb.ElemNameParser[CareTeamType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CareTeam")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CareTeamType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      CareTeamType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CareTeamStatus](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[CareTeamu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CareTeamType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[CareTeamStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[CareTeamu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.managingOrganization flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CareTeamu46ParticipantFormat extends scalaxb.ElemNameParser[CareTeamu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CareTeam.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CareTeamu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "member")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CareTeamu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CareTeamu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CareTeamu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.member map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("member"), __scope, false) } getOrElse {Nil},
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_CareTeamStatusu45listFormat = new DefaultComionkinmrshl7fhir_CareTeamStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CareTeamStatusu45listFormat extends scalaxb.XMLFormat[CareTeamStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CareTeamStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => ProposedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue15
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue19

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CareTeamStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CareTeamStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CareTeamStatusFormat extends scalaxb.ElemNameParser[CareTeamStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CareTeamStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CareTeamStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CareTeamStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CareTeamStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CareTeamStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CareTeamStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ChargeItemTypeFormat extends scalaxb.ElemNameParser[ChargeItemType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ChargeItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ChargeItemType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceTiming")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performingOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestingOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "bodysite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factorOverride")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priceOverride")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "overrideReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enterer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enteredDate")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "account")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInformation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 =>
      ChargeItemType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ChargeItemStatus](p11, scalaxb.ElemName(node) :: stack),
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p13, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ChargeItemu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ChargeItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.definition flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        scalaxb.toXML[ChargeItemStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("occurrenceTiming"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[ChargeItemu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.performingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.requestingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.bodysite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodysite"), __scope, false) },
        __obj.factorOverride map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factorOverride"), __scope, false) } getOrElse {Nil},
        __obj.priceOverride map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("priceOverride"), __scope, false) } getOrElse {Nil},
        __obj.overrideReason map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("overrideReason"), __scope, false) } getOrElse {Nil},
        __obj.enterer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enterer"), __scope, false) } getOrElse {Nil},
        __obj.enteredDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("enteredDate"), __scope, false) } getOrElse {Nil},
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.service flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("service"), __scope, false) },
        __obj.account flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("account"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.supportingInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInformation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ChargeItemu46ParticipantFormat extends scalaxb.ElemNameParser[ChargeItemu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ChargeItem.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ChargeItemu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ChargeItemu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ChargeItemu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ChargeItemu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false))

  }

  def buildComionkinmrshl7fhir_ChargeItemStatusu45listFormat = new DefaultComionkinmrshl7fhir_ChargeItemStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ChargeItemStatusu45listFormat extends scalaxb.XMLFormat[ChargeItemStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ChargeItemStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => PlannedValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("billable")) => Billable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-billable")) => Notu45billable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aborted")) => Aborted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("billed")) => Billed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue20
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue10

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ChargeItemStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ChargeItemStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ChargeItemStatusFormat extends scalaxb.ElemNameParser[ChargeItemStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ChargeItemStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ChargeItemStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ChargeItemStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ChargeItemStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ChargeItemStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ChargeItemStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimTypeFormat extends scalaxb.ElemNameParser[ClaimType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "billablePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enterer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fundsReserve")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "related")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "originalPrescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payee")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referral")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "facility")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "careTeam")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "information")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosis")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedure")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "insurance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "accident")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "employmentImpacted")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hospitalization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "total")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 =>
      ClaimType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Use](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[Claimu46Related](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Claimu46Payee](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[Claimu46CareTeam](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[Claimu46Information](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[Claimu46Diagnosis](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[Claimu46Procedure](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[Claimu46Insurance](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[Claimu46Accident](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p37 map { scalaxb.fromXML[Claimu46Item](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ClaimType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subType"), __scope, false) },
        __obj.use map { scalaxb.toXML[Use](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.billablePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("billablePeriod"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.enterer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enterer"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.priority map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.fundsReserve map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("fundsReserve"), __scope, false) } getOrElse {Nil},
        __obj.related flatMap { scalaxb.toXML[Claimu46Related](_, Some(fhirUrl), Some("related"), __scope, false) },
        __obj.prescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("prescription"), __scope, false) } getOrElse {Nil},
        __obj.originalPrescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("originalPrescription"), __scope, false) } getOrElse {Nil},
        __obj.payee map { scalaxb.toXML[Claimu46Payee](_, Some(fhirUrl), Some("payee"), __scope, false) } getOrElse {Nil},
        __obj.referral map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referral"), __scope, false) } getOrElse {Nil},
        __obj.facility map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("facility"), __scope, false) } getOrElse {Nil},
        __obj.careTeam flatMap { scalaxb.toXML[Claimu46CareTeam](_, Some(fhirUrl), Some("careTeam"), __scope, false) },
        __obj.information flatMap { scalaxb.toXML[Claimu46Information](_, Some(fhirUrl), Some("information"), __scope, false) },
        __obj.diagnosis flatMap { scalaxb.toXML[Claimu46Diagnosis](_, Some(fhirUrl), Some("diagnosis"), __scope, false) },
        __obj.procedure flatMap { scalaxb.toXML[Claimu46Procedure](_, Some(fhirUrl), Some("procedure"), __scope, false) },
        __obj.insurance flatMap { scalaxb.toXML[Claimu46Insurance](_, Some(fhirUrl), Some("insurance"), __scope, false) },
        __obj.accident map { scalaxb.toXML[Claimu46Accident](_, Some(fhirUrl), Some("accident"), __scope, false) } getOrElse {Nil},
        __obj.employmentImpacted map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("employmentImpacted"), __scope, false) } getOrElse {Nil},
        __obj.hospitalization map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("hospitalization"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[Claimu46Item](_, Some(fhirUrl), Some("item"), __scope, false) },
        __obj.total map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("total"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46RelatedFormat extends scalaxb.ElemNameParser[Claimu46Related] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Related")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Related] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claim")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Claimu46Related(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Related, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Related, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.claim map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claim"), __scope, false) } getOrElse {Nil},
        __obj.relationship map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relationship"), __scope, false) } getOrElse {Nil},
        __obj.reference map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46PayeeFormat extends scalaxb.ElemNameParser[Claimu46Payee] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Payee")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Payee] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resourceType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "party")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Claimu46Payee(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Payee, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Payee, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.resourceType map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("resourceType"), __scope, false) } getOrElse {Nil},
        __obj.party map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("party"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46CareTeamFormat extends scalaxb.ElemNameParser[Claimu46CareTeam] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.CareTeam")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46CareTeam] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responsible")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "qualification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Claimu46CareTeam(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46CareTeam, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46CareTeam, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.provider, Some(fhirUrl), Some("provider"), __scope, false),
        __obj.responsible map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("responsible"), __scope, false) } getOrElse {Nil},
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.qualification map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("qualification"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46InformationFormat extends scalaxb.ElemNameParser[Claimu46Information] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Information")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Information] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      Claimu46Information(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Information, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Information, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.timingDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("timingDate"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46DiagnosisFormat extends scalaxb.ElemNameParser[Claimu46Diagnosis] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Diagnosis")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Diagnosis] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diagnosisCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diagnosisReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "packageCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Claimu46Diagnosis(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Diagnosis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Diagnosis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.diagnosisCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("diagnosisCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.diagnosisReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("diagnosisReference"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.packageCode map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("packageCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46ProcedureFormat extends scalaxb.ElemNameParser[Claimu46Procedure] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Procedure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Procedure] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "procedureCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "procedureReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Claimu46Procedure(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Procedure, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Procedure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.procedureCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("procedureCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.procedureReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("procedureReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46InsuranceFormat extends scalaxb.ElemNameParser[Claimu46Insurance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Insurance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Insurance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "focal")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "businessArrangement")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "preAuthRef")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claimResponse")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Claimu46Insurance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Insurance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Insurance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.focal, Some(fhirUrl), Some("focal"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.coverage, Some(fhirUrl), Some("coverage"), __scope, false),
        __obj.businessArrangement map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("businessArrangement"), __scope, false) } getOrElse {Nil},
        __obj.preAuthRef flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("preAuthRef"), __scope, false) },
        __obj.claimResponse map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claimResponse"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46AccidentFormat extends scalaxb.ElemNameParser[Claimu46Accident] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Accident")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Accident] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Claimu46Accident(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Accident, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Accident, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DateType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.locationAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("locationAddress"), __scope, false) } getOrElse {Nil},
        __obj.locationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("locationReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Claimu46ItemFormat extends scalaxb.ElemNameParser[Claimu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "careTeamLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosisLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedureLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "informationLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subSite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      Claimu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[Claimu46Detail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.careTeamLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("careTeamLinkId"), __scope, false) },
        __obj.diagnosisLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("diagnosisLinkId"), __scope, false) },
        __obj.procedureLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("procedureLinkId"), __scope, false) },
        __obj.informationLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("informationLinkId"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.servicedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("servicedDate"), __scope, false) } getOrElse {Nil},
        __obj.servicedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("servicedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.locationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("locationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.locationAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("locationAddress"), __scope, false) } getOrElse {Nil},
        __obj.locationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("locationReference"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) },
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.subSite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subSite"), __scope, false) },
        __obj.encounter flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[Claimu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Claimu46DetailFormat extends scalaxb.ElemNameParser[Claimu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      Claimu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[Claimu46SubDetail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) },
        __obj.subDetail flatMap { scalaxb.toXML[Claimu46SubDetail](_, Some(fhirUrl), Some("subDetail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Claimu46SubDetailFormat extends scalaxb.ElemNameParser[Claimu46SubDetail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Claim.SubDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Claimu46SubDetail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      Claimu46SubDetail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Claimu46SubDetail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Claimu46SubDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_Useu45listFormat = new DefaultComionkinmrshl7fhir_Useu45listFormat {}
  trait DefaultComionkinmrshl7fhir_Useu45listFormat extends scalaxb.XMLFormat[Useu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): Useu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("complete")) => CompleteValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => ProposedValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exploratory")) => Exploratory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Useu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: Useu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_UseFormat extends scalaxb.ElemNameParser[Use] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Use")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Use] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      Use(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Useu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Use, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Use, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_FinancialResourceStatusCodesu45listFormat = new DefaultComionkinmrshl7fhir_FinancialResourceStatusCodesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FinancialResourceStatusCodesu45listFormat extends scalaxb.XMLFormat[FinancialResourceStatusCodesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FinancialResourceStatusCodesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue16
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue21

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FinancialResourceStatusCodesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FinancialResourceStatusCodesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FinancialResourceStatusCodesFormat extends scalaxb.ElemNameParser[FinancialResourceStatusCodes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FinancialResourceStatusCodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FinancialResourceStatusCodes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FinancialResourceStatusCodes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FinancialResourceStatusCodesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FinancialResourceStatusCodes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FinancialResourceStatusCodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseTypeFormat extends scalaxb.ElemNameParser[ClaimResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payeeType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "addItem")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "error")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "totalCost")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unallocDeductable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "totalBenefit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reserved")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "processNote")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "communicationRequest")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "insurance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      ClaimResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ClaimResponseu46Item](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ClaimResponseu46AddItem](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ClaimResponseu46Error](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ClaimResponseu46Payment](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[ClaimResponseu46ProcessNote](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[ClaimResponseu46Insurance](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ClaimResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.requestProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestProvider"), __scope, false) } getOrElse {Nil},
        __obj.requestOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestOrganization"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.payeeType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("payeeType"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[ClaimResponseu46Item](_, Some(fhirUrl), Some("item"), __scope, false) },
        __obj.addItem flatMap { scalaxb.toXML[ClaimResponseu46AddItem](_, Some(fhirUrl), Some("addItem"), __scope, false) },
        __obj.error flatMap { scalaxb.toXML[ClaimResponseu46Error](_, Some(fhirUrl), Some("error"), __scope, false) },
        __obj.totalCost map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("totalCost"), __scope, false) } getOrElse {Nil},
        __obj.unallocDeductable map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unallocDeductable"), __scope, false) } getOrElse {Nil},
        __obj.totalBenefit map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("totalBenefit"), __scope, false) } getOrElse {Nil},
        __obj.payment map { scalaxb.toXML[ClaimResponseu46Payment](_, Some(fhirUrl), Some("payment"), __scope, false) } getOrElse {Nil},
        __obj.reserved map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("reserved"), __scope, false) } getOrElse {Nil},
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.processNote flatMap { scalaxb.toXML[ClaimResponseu46ProcessNote](_, Some(fhirUrl), Some("processNote"), __scope, false) },
        __obj.communicationRequest flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("communicationRequest"), __scope, false) },
        __obj.insurance flatMap { scalaxb.toXML[ClaimResponseu46Insurance](_, Some(fhirUrl), Some("insurance"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46ItemFormat extends scalaxb.ElemNameParser[ClaimResponseu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ClaimResponseu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ClaimResponseu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ClaimResponseu46Detail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequenceLinkId, Some(fhirUrl), Some("sequenceLinkId"), __scope, false),
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ClaimResponseu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[ClaimResponseu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46AdjudicationFormat extends scalaxb.ElemNameParser[ClaimResponseu46Adjudication] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Adjudication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Adjudication] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ClaimResponseu46Adjudication(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Adjudication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Adjudication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46DetailFormat extends scalaxb.ElemNameParser[ClaimResponseu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ClaimResponseu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ClaimResponseu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ClaimResponseu46SubDetail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequenceLinkId, Some(fhirUrl), Some("sequenceLinkId"), __scope, false),
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ClaimResponseu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.subDetail flatMap { scalaxb.toXML[ClaimResponseu46SubDetail](_, Some(fhirUrl), Some("subDetail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46SubDetailFormat extends scalaxb.ElemNameParser[ClaimResponseu46SubDetail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.SubDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46SubDetail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ClaimResponseu46SubDetail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ClaimResponseu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46SubDetail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46SubDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequenceLinkId, Some(fhirUrl), Some("sequenceLinkId"), __scope, false),
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ClaimResponseu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46AddItemFormat extends scalaxb.ElemNameParser[ClaimResponseu46AddItem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.AddItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46AddItem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fee")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      ClaimResponseu46AddItem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ClaimResponseu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ClaimResponseu46Detail1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46AddItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46AddItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.sequenceLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("sequenceLinkId"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.fee map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("fee"), __scope, false) } getOrElse {Nil},
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ClaimResponseu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[ClaimResponseu46Detail1](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46Detail1Format extends scalaxb.ElemNameParser[ClaimResponseu46Detail1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Detail1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Detail1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fee")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ClaimResponseu46Detail1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ClaimResponseu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Detail1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Detail1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.fee map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("fee"), __scope, false) } getOrElse {Nil},
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ClaimResponseu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46ErrorFormat extends scalaxb.ElemNameParser[ClaimResponseu46Error] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Error")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Error] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailSequenceLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subdetailSequenceLinkId")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ClaimResponseu46Error(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Error, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Error, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.sequenceLinkId map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("sequenceLinkId"), __scope, false) } getOrElse {Nil},
        __obj.detailSequenceLinkId map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("detailSequenceLinkId"), __scope, false) } getOrElse {Nil},
        __obj.subdetailSequenceLinkId map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("subdetailSequenceLinkId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46PaymentFormat extends scalaxb.ElemNameParser[ClaimResponseu46Payment] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Payment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Payment] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "adjustment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "adjustmentReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ClaimResponseu46Payment(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Payment, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Payment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.adjustment map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("adjustment"), __scope, false) } getOrElse {Nil},
        __obj.adjustmentReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("adjustmentReason"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46ProcessNoteFormat extends scalaxb.ElemNameParser[ClaimResponseu46ProcessNote] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.ProcessNote")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46ProcessNote] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "number")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ClaimResponseu46ProcessNote(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46ProcessNote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46ProcessNote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.number map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("number"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ClaimResponseu46InsuranceFormat extends scalaxb.ElemNameParser[ClaimResponseu46Insurance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClaimResponse.Insurance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClaimResponseu46Insurance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "focal")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "businessArrangement")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "preAuthRef")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claimResponse")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ClaimResponseu46Insurance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClaimResponseu46Insurance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClaimResponseu46Insurance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.focal, Some(fhirUrl), Some("focal"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.coverage, Some(fhirUrl), Some("coverage"), __scope, false),
        __obj.businessArrangement map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("businessArrangement"), __scope, false) } getOrElse {Nil},
        __obj.preAuthRef flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("preAuthRef"), __scope, false) },
        __obj.claimResponse map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claimResponse"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ClinicalImpressionTypeFormat extends scalaxb.ElemNameParser[ClinicalImpressionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClinicalImpression")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClinicalImpressionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assessor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "previous")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "problem")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "investigation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "protocol")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "summary")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "finding")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "prognosisCodeableConcept")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "prognosisReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      ClinicalImpressionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ClinicalImpressionStatus](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ClinicalImpressionu46Investigation](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ClinicalImpressionu46Finding](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ClinicalImpressionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[ClinicalImpressionStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.effectiveDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveDateTime"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.assessor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("assessor"), __scope, false) } getOrElse {Nil},
        __obj.previous map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("previous"), __scope, false) } getOrElse {Nil},
        __obj.problem flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("problem"), __scope, false) },
        __obj.investigation flatMap { scalaxb.toXML[ClinicalImpressionu46Investigation](_, Some(fhirUrl), Some("investigation"), __scope, false) },
        __obj.protocol flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("protocol"), __scope, false) },
        __obj.summary map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("summary"), __scope, false) } getOrElse {Nil},
        __obj.finding flatMap { scalaxb.toXML[ClinicalImpressionu46Finding](_, Some(fhirUrl), Some("finding"), __scope, false) },
        __obj.prognosisCodeableConcept flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("prognosisCodeableConcept"), __scope, false) },
        __obj.prognosisReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("prognosisReference"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("action"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClinicalImpressionu46InvestigationFormat extends scalaxb.ElemNameParser[ClinicalImpressionu46Investigation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClinicalImpression.Investigation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClinicalImpressionu46Investigation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ClinicalImpressionu46Investigation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClinicalImpressionu46Investigation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClinicalImpressionu46Investigation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.item flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ClinicalImpressionu46FindingFormat extends scalaxb.ElemNameParser[ClinicalImpressionu46Finding] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClinicalImpression.Finding")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClinicalImpressionu46Finding] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "basis")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ClinicalImpressionu46Finding(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClinicalImpressionu46Finding, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClinicalImpressionu46Finding, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.itemCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("itemCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.itemReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("itemReference"), __scope, false) } getOrElse {Nil},
        __obj.basis map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("basis"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ClinicalImpressionStatusu45listFormat = new DefaultComionkinmrshl7fhir_ClinicalImpressionStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ClinicalImpressionStatusu45listFormat extends scalaxb.XMLFormat[ClinicalImpressionStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ClinicalImpressionStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue22

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ClinicalImpressionStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ClinicalImpressionStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ClinicalImpressionStatusFormat extends scalaxb.ElemNameParser[ClinicalImpressionStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ClinicalImpressionStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ClinicalImpressionStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ClinicalImpressionStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ClinicalImpressionStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ClinicalImpressionStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ClinicalImpressionStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemTypeFormat extends scalaxb.ElemNameParser[CodeSystemType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "caseSensitive")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSet")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hierarchyMeaning")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compositional")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "versionNeeded")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "content")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "count")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "filter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "property")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "concept")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 =>
      CodeSystemType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CodeSystemHierarchyMeaning](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeSystemContentMode](p29, scalaxb.ElemName(node) :: stack),
        p30.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[CodeSystemu46Filter](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[CodeSystemu46Property](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[CodeSystemu46Concept](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CodeSystemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.caseSensitive map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("caseSensitive"), __scope, false) } getOrElse {Nil},
        __obj.valueSet map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueSet"), __scope, false) } getOrElse {Nil},
        __obj.hierarchyMeaning map { scalaxb.toXML[CodeSystemHierarchyMeaning](_, Some(fhirUrl), Some("hierarchyMeaning"), __scope, false) } getOrElse {Nil},
        __obj.compositional map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("compositional"), __scope, false) } getOrElse {Nil},
        __obj.versionNeeded map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("versionNeeded"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeSystemContentMode](__obj.content, Some(fhirUrl), Some("content"), __scope, false),
        __obj.count map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("count"), __scope, false) } getOrElse {Nil},
        __obj.filter flatMap { scalaxb.toXML[CodeSystemu46Filter](_, Some(fhirUrl), Some("filter"), __scope, false) },
        __obj.property flatMap { scalaxb.toXML[CodeSystemu46Property](_, Some(fhirUrl), Some("property"), __scope, false) },
        __obj.concept flatMap { scalaxb.toXML[CodeSystemu46Concept](_, Some(fhirUrl), Some("concept"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemu46FilterFormat extends scalaxb.ElemNameParser[CodeSystemu46Filter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem.Filter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemu46Filter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "operator")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CodeSystemu46Filter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[FilterOperator](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemu46Filter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemu46Filter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.operator flatMap { scalaxb.toXML[FilterOperator](_, Some(fhirUrl), Some("operator"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemu46PropertyFormat extends scalaxb.ElemNameParser[CodeSystemu46Property] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem.Property")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemu46Property] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "uri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      CodeSystemu46Property(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PropertyType](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemu46Property, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemu46Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.uri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("uri"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PropertyType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemu46ConceptFormat extends scalaxb.ElemNameParser[CodeSystemu46Concept] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem.Concept")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemu46Concept] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "designation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "property")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "concept")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      CodeSystemu46Concept(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeSystemu46Designation](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeSystemu46Property1](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeSystemu46Concept](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemu46Concept, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemu46Concept, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.definition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.designation flatMap { scalaxb.toXML[CodeSystemu46Designation](_, Some(fhirUrl), Some("designation"), __scope, false) },
        __obj.property flatMap { scalaxb.toXML[CodeSystemu46Property1](_, Some(fhirUrl), Some("property"), __scope, false) },
        __obj.concept flatMap { scalaxb.toXML[CodeSystemu46Concept](_, Some(fhirUrl), Some("concept"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemu46DesignationFormat extends scalaxb.ElemNameParser[CodeSystemu46Designation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem.Designation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemu46Designation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      CodeSystemu46Designation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemu46Designation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemu46Designation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.use map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_CodeSystemu46Property1Format extends scalaxb.ElemNameParser[CodeSystemu46Property1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystem.Property1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemu46Property1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      CodeSystemu46Property1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemu46Property1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemu46Property1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_FilterOperatoru45listFormat = new DefaultComionkinmrshl7fhir_FilterOperatoru45listFormat {}
  trait DefaultComionkinmrshl7fhir_FilterOperatoru45listFormat extends scalaxb.XMLFormat[FilterOperatoru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FilterOperatoru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("=")) => U61
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("is-a")) => Isu45a
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("descendent-of")) => Descendentu45of
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("is-not-a")) => Isu45notu45a
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regex")) => Regex
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in")) => InValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-in")) => Notu45inValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("generalizes")) => Generalizes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exists")) => ExistsValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FilterOperatoru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FilterOperatoru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FilterOperatorFormat extends scalaxb.ElemNameParser[FilterOperator] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FilterOperator")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FilterOperator] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FilterOperator(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FilterOperatoru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FilterOperator, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FilterOperator, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_PropertyTypeu45listFormat = new DefaultComionkinmrshl7fhir_PropertyTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_PropertyTypeu45listFormat extends scalaxb.XMLFormat[PropertyTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): PropertyTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("code")) => CodeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coding")) => CodingValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("string")) => StringTypeValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("integer")) => IntegerValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boolean")) => BooleanTypeValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateTime")) => DateTimeValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, PropertyTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: PropertyTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_PropertyTypeFormat extends scalaxb.ElemNameParser[PropertyType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PropertyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PropertyType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      PropertyType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[PropertyTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PropertyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PropertyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CodeSystemHierarchyMeaningu45listFormat = new DefaultComionkinmrshl7fhir_CodeSystemHierarchyMeaningu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CodeSystemHierarchyMeaningu45listFormat extends scalaxb.XMLFormat[CodeSystemHierarchyMeaningu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CodeSystemHierarchyMeaningu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("grouped-by")) => Groupedu45by
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("is-a")) => Isu45aValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("part-of")) => Partu45of
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("classified-with")) => Classifiedu45with

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CodeSystemHierarchyMeaningu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CodeSystemHierarchyMeaningu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CodeSystemHierarchyMeaningFormat extends scalaxb.ElemNameParser[CodeSystemHierarchyMeaning] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystemHierarchyMeaning")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemHierarchyMeaning] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CodeSystemHierarchyMeaning(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CodeSystemHierarchyMeaningu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemHierarchyMeaning, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemHierarchyMeaning, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CodeSystemContentModeu45listFormat = new DefaultComionkinmrshl7fhir_CodeSystemContentModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CodeSystemContentModeu45listFormat extends scalaxb.XMLFormat[CodeSystemContentModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CodeSystemContentModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-present")) => Notu45present
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("example")) => ExampleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fragment")) => Fragment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("complete")) => CompleteValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CodeSystemContentModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CodeSystemContentModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CodeSystemContentModeFormat extends scalaxb.ElemNameParser[CodeSystemContentMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CodeSystemContentMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeSystemContentMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CodeSystemContentMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CodeSystemContentModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CodeSystemContentMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CodeSystemContentMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CommunicationTypeFormat extends scalaxb.ElemNameParser[CommunicationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Communication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CommunicationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDone")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDoneReason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "medium")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recipient")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "received")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sender")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "payload")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      CommunicationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EventStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Communicationu46Payload](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CommunicationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[EventStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.notDone map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("notDone"), __scope, false) } getOrElse {Nil},
        __obj.notDoneReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("notDoneReason"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.medium flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medium"), __scope, false) },
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.recipient flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recipient"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.sent map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("sent"), __scope, false) } getOrElse {Nil},
        __obj.received map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("received"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sender"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.payload flatMap { scalaxb.toXML[Communicationu46Payload](_, Some(fhirUrl), Some("payload"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Communicationu46PayloadFormat extends scalaxb.ElemNameParser[Communicationu46Payload] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Communication.Payload")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Communicationu46Payload] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Communicationu46Payload(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Communicationu46Payload, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Communicationu46Payload, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.contentString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("contentString"), __scope, false) } getOrElse {Nil},
        __obj.contentAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("contentAttachment"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_EventStatusu45listFormat = new DefaultComionkinmrshl7fhir_EventStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EventStatusu45listFormat extends scalaxb.XMLFormat[EventStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EventStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preparation")) => Preparation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aborted")) => AbortedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue23
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue11

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EventStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EventStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EventStatusFormat extends scalaxb.ElemNameParser[EventStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EventStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EventStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EventStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EventStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EventStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EventStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CommunicationRequestTypeFormat extends scalaxb.ElemNameParser[CommunicationRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CommunicationRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CommunicationRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "medium")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recipient")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "payload")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 =>
      CommunicationRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RequestStatus](p13, scalaxb.ElemName(node) :: stack),
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CommunicationRequestu46Payload](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CommunicationRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CommunicationRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[RequestStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.medium flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medium"), __scope, false) },
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.recipient flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recipient"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.payload flatMap { scalaxb.toXML[CommunicationRequestu46Payload](_, Some(fhirUrl), Some("payload"), __scope, false) },
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sender"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[CommunicationRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CommunicationRequestu46PayloadFormat extends scalaxb.ElemNameParser[CommunicationRequestu46Payload] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CommunicationRequest.Payload")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CommunicationRequestu46Payload] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      CommunicationRequestu46Payload(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CommunicationRequestu46Payload, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CommunicationRequestu46Payload, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.contentString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("contentString"), __scope, false) } getOrElse {Nil},
        __obj.contentAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("contentAttachment"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_CommunicationRequestu46RequesterFormat extends scalaxb.ElemNameParser[CommunicationRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CommunicationRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CommunicationRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      CommunicationRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CommunicationRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CommunicationRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_RequestStatusu45listFormat = new DefaultComionkinmrshl7fhir_RequestStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RequestStatusu45listFormat extends scalaxb.XMLFormat[RequestStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RequestStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue13
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RequestStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RequestStatusFormat extends scalaxb.ElemNameParser[RequestStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RequestStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RequestStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_RequestPriorityu45listFormat = new DefaultComionkinmrshl7fhir_RequestPriorityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RequestPriorityu45listFormat extends scalaxb.XMLFormat[RequestPriorityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RequestPriorityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("routine")) => Routine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("urgent")) => Urgent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("asap")) => Asap
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stat")) => Stat

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestPriorityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RequestPriorityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RequestPriorityFormat extends scalaxb.ElemNameParser[RequestPriority] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestPriority")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestPriority] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RequestPriority(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RequestPriorityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestPriority, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestPriority, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CompartmentDefinitionTypeFormat extends scalaxb.ElemNameParser[CompartmentDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CompartmentDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompartmentDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "search")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "resource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      CompartmentDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CompartmentType](p21, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p22, scalaxb.ElemName(node) :: stack),
        p23 map { scalaxb.fromXML[CompartmentDefinitionu46Resource](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CompartmentDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        scalaxb.toXML[CompartmentType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.search, Some(fhirUrl), Some("search"), __scope, false),
        __obj.resource flatMap { scalaxb.toXML[CompartmentDefinitionu46Resource](_, Some(fhirUrl), Some("resource"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CompartmentDefinitionu46ResourceFormat extends scalaxb.ElemNameParser[CompartmentDefinitionu46Resource] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CompartmentDefinition.Resource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompartmentDefinitionu46Resource] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "param")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      CompartmentDefinitionu46Resource(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CompartmentDefinitionu46Resource, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CompartmentDefinitionu46Resource, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ResourceTypeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.param flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("param"), __scope, false) },
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_CompartmentTypeu45listFormat = new DefaultComionkinmrshl7fhir_CompartmentTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CompartmentTypeu45listFormat extends scalaxb.XMLFormat[CompartmentTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CompartmentTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Patient")) => PatientValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Encounter")) => EncounterValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedPerson")) => RelatedPersonValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Practitioner")) => PractitionerValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Device")) => DeviceValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CompartmentTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CompartmentTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CompartmentTypeFormat extends scalaxb.ElemNameParser[CompartmentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CompartmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompartmentType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CompartmentType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CompartmentTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CompartmentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CompartmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CompositionTypeFormat extends scalaxb.ElemNameParser[CompositionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Composition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompositionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "confidentiality")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "attester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "custodian")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatesTo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "event")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "section")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      CompositionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CompositionStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateTimeType](p15, scalaxb.ElemName(node) :: stack),
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p17, scalaxb.ElemName(node) :: stack),
        p18.headOption map { scalaxb.fromXML[ConfidentialityClassification](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[Compositionu46Attester](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[Compositionu46RelatesTo](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Compositionu46Event](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[Compositionu46Section](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CompositionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CompositionStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.classValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("class"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DateTimeType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.author flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.title, Some(fhirUrl), Some("title"), __scope, false),
        __obj.confidentiality map { scalaxb.toXML[ConfidentialityClassification](_, Some(fhirUrl), Some("confidentiality"), __scope, false) } getOrElse {Nil},
        __obj.attester flatMap { scalaxb.toXML[Compositionu46Attester](_, Some(fhirUrl), Some("attester"), __scope, false) },
        __obj.custodian map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("custodian"), __scope, false) } getOrElse {Nil},
        __obj.relatesTo flatMap { scalaxb.toXML[Compositionu46RelatesTo](_, Some(fhirUrl), Some("relatesTo"), __scope, false) },
        __obj.event flatMap { scalaxb.toXML[Compositionu46Event](_, Some(fhirUrl), Some("event"), __scope, false) },
        __obj.section flatMap { scalaxb.toXML[Compositionu46Section](_, Some(fhirUrl), Some("section"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Compositionu46AttesterFormat extends scalaxb.ElemNameParser[Compositionu46Attester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Composition.Attester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Compositionu46Attester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "time")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "party")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Compositionu46Attester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CompositionAttestationMode](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Compositionu46Attester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Compositionu46Attester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.mode flatMap { scalaxb.toXML[CompositionAttestationMode](_, Some(fhirUrl), Some("mode"), __scope, false) },
        __obj.time map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("time"), __scope, false) } getOrElse {Nil},
        __obj.party map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("party"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Compositionu46RelatesToFormat extends scalaxb.ElemNameParser[Compositionu46RelatesTo] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Composition.RelatesTo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Compositionu46RelatesTo] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Compositionu46RelatesTo(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DocumentRelationshipType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Compositionu46RelatesTo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Compositionu46RelatesTo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DocumentRelationshipType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.targetIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("targetIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.targetReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("targetReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Compositionu46EventFormat extends scalaxb.ElemNameParser[Compositionu46Event] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Composition.Event")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Compositionu46Event] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Compositionu46Event(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Compositionu46Event, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Compositionu46Event, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.code flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.detail flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Compositionu46SectionFormat extends scalaxb.ElemNameParser[Compositionu46Section] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Composition.Section")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Compositionu46Section] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "orderedBy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "entry")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "emptyReason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "section")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      Compositionu46Section(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ListMode](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[Compositionu46Section](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Compositionu46Section, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Compositionu46Section, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.mode map { scalaxb.toXML[ListMode](_, Some(fhirUrl), Some("mode"), __scope, false) } getOrElse {Nil},
        __obj.orderedBy map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("orderedBy"), __scope, false) } getOrElse {Nil},
        __obj.entry flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("entry"), __scope, false) },
        __obj.emptyReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("emptyReason"), __scope, false) } getOrElse {Nil},
        __obj.section flatMap { scalaxb.toXML[Compositionu46Section](_, Some(fhirUrl), Some("section"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CompositionStatusu45listFormat = new DefaultComionkinmrshl7fhir_CompositionStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CompositionStatusu45listFormat extends scalaxb.XMLFormat[CompositionStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CompositionStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preliminary")) => Preliminary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("final")) => Final
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amended")) => Amended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue24

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CompositionStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CompositionStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CompositionStatusFormat extends scalaxb.ElemNameParser[CompositionStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CompositionStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompositionStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CompositionStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CompositionStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CompositionStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CompositionStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConfidentialityClassificationu45listFormat = new DefaultComionkinmrshl7fhir_ConfidentialityClassificationu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConfidentialityClassificationu45listFormat extends scalaxb.XMLFormat[ConfidentialityClassificationu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConfidentialityClassificationu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("U")) => UValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => L
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("M")) => M
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("N")) => NValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => RValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("V")) => V

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConfidentialityClassificationu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConfidentialityClassificationu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConfidentialityClassificationFormat extends scalaxb.ElemNameParser[ConfidentialityClassification] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConfidentialityClassification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConfidentialityClassification] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConfidentialityClassification(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConfidentialityClassificationu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConfidentialityClassification, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConfidentialityClassification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DocumentRelationshipTypeu45listFormat = new DefaultComionkinmrshl7fhir_DocumentRelationshipTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DocumentRelationshipTypeu45listFormat extends scalaxb.XMLFormat[DocumentRelationshipTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DocumentRelationshipTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("replaces")) => ReplacesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transforms")) => Transforms
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("signs")) => Signs
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("appends")) => Appends

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DocumentRelationshipTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DocumentRelationshipTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DocumentRelationshipTypeFormat extends scalaxb.ElemNameParser[DocumentRelationshipType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentRelationshipType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentRelationshipType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DocumentRelationshipType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DocumentRelationshipTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentRelationshipType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentRelationshipType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_CompositionAttestationModeu45listFormat = new DefaultComionkinmrshl7fhir_CompositionAttestationModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_CompositionAttestationModeu45listFormat extends scalaxb.XMLFormat[CompositionAttestationModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CompositionAttestationModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("personal")) => Personal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("professional")) => Professional
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("legal")) => Legal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("official")) => OfficialValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CompositionAttestationModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CompositionAttestationModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_CompositionAttestationModeFormat extends scalaxb.ElemNameParser[CompositionAttestationMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("CompositionAttestationMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompositionAttestationMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      CompositionAttestationMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[CompositionAttestationModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: CompositionAttestationMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: CompositionAttestationMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ListModeu45listFormat = new DefaultComionkinmrshl7fhir_ListModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ListModeu45listFormat extends scalaxb.XMLFormat[ListModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ListModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("working")) => Working
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snapshot")) => Snapshot
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("changes")) => Changes

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ListModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ListModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ListModeFormat extends scalaxb.ElemNameParser[ListMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ListMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ListMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ListMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ListModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ListMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ListMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapTypeFormat extends scalaxb.ElemNameParser[ConceptMapType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "group")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      ConceptMapType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ConceptMapu46Group](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ConceptMapType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.sourceUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("sourceUri"), __scope, false) } getOrElse {Nil},
        __obj.sourceReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sourceReference"), __scope, false) } getOrElse {Nil},
        __obj.targetUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("targetUri"), __scope, false) } getOrElse {Nil},
        __obj.targetReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("targetReference"), __scope, false) } getOrElse {Nil},
        __obj.group flatMap { scalaxb.toXML[ConceptMapu46Group](_, Some(fhirUrl), Some("group"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapu46GroupFormat extends scalaxb.ElemNameParser[ConceptMapu46Group] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap.Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapu46Group] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceVersion")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetVersion")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "element")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unmapped")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ConceptMapu46Group(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ConceptMapu46Element](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ConceptMapu46Unmapped](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapu46Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapu46Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.source map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.sourceVersion map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("sourceVersion"), __scope, false) } getOrElse {Nil},
        __obj.target map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("target"), __scope, false) } getOrElse {Nil},
        __obj.targetVersion map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("targetVersion"), __scope, false) } getOrElse {Nil},
        __obj.element flatMap { scalaxb.toXML[ConceptMapu46Element](_, Some(fhirUrl), Some("element"), __scope, false) },
        __obj.unmapped map { scalaxb.toXML[ConceptMapu46Unmapped](_, Some(fhirUrl), Some("unmapped"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapu46ElementFormat extends scalaxb.ElemNameParser[ConceptMapu46Element] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap.Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapu46Element] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ConceptMapu46Element(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ConceptMapu46Target](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapu46Element, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapu46Element, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.target flatMap { scalaxb.toXML[ConceptMapu46Target](_, Some(fhirUrl), Some("target"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapu46TargetFormat extends scalaxb.ElemNameParser[ConceptMapu46Target] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap.Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapu46Target] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "equivalence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dependsOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "product")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ConceptMapu46Target(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ConceptMapEquivalence](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ConceptMapu46DependsOn](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ConceptMapu46DependsOn](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapu46Target, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapu46Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.equivalence map { scalaxb.toXML[ConceptMapEquivalence](_, Some(fhirUrl), Some("equivalence"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.dependsOn flatMap { scalaxb.toXML[ConceptMapu46DependsOn](_, Some(fhirUrl), Some("dependsOn"), __scope, false) },
        __obj.product flatMap { scalaxb.toXML[ConceptMapu46DependsOn](_, Some(fhirUrl), Some("product"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapu46DependsOnFormat extends scalaxb.ElemNameParser[ConceptMapu46DependsOn] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap.DependsOn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapu46DependsOn] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "property")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ConceptMapu46DependsOn(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapu46DependsOn, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapu46DependsOn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.property, Some(fhirUrl), Some("property"), __scope, false),
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ConceptMapu46UnmappedFormat extends scalaxb.ElemNameParser[ConceptMapu46Unmapped] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMap.Unmapped")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapu46Unmapped] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ConceptMapu46Unmapped(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConceptMapGroupUnmappedMode](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapu46Unmapped, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapu46Unmapped, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ConceptMapGroupUnmappedMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ConceptMapGroupUnmappedModeu45listFormat = new DefaultComionkinmrshl7fhir_ConceptMapGroupUnmappedModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConceptMapGroupUnmappedModeu45listFormat extends scalaxb.XMLFormat[ConceptMapGroupUnmappedModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConceptMapGroupUnmappedModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("provided")) => Provided
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fixed")) => Fixed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other-map")) => Otheru45map

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConceptMapGroupUnmappedModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConceptMapGroupUnmappedModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConceptMapGroupUnmappedModeFormat extends scalaxb.ElemNameParser[ConceptMapGroupUnmappedMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConceptMapGroupUnmappedMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConceptMapGroupUnmappedMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConceptMapGroupUnmappedMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConceptMapGroupUnmappedModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConceptMapGroupUnmappedMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConceptMapGroupUnmappedMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConditionTypeFormat extends scalaxb.ElemNameParser[ConditionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Condition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConditionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "clinicalStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "verificationStatus")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "severity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abatementString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assertedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asserter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "stage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "evidence")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 =>
      ConditionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ConditionClinicalStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ConditionVerificationStatus](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[Conditionu46Stage](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[Conditionu46Evidence](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ConditionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.clinicalStatus map { scalaxb.toXML[ConditionClinicalStatusCodes](_, Some(fhirUrl), Some("clinicalStatus"), __scope, false) } getOrElse {Nil},
        __obj.verificationStatus map { scalaxb.toXML[ConditionVerificationStatus](_, Some(fhirUrl), Some("verificationStatus"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.severity map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.bodySite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.onsetDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("onsetDateTime"), __scope, false) } getOrElse {Nil},
        __obj.onsetAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("onsetAge"), __scope, false) } getOrElse {Nil},
        __obj.onsetPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("onsetPeriod"), __scope, false) } getOrElse {Nil},
        __obj.onsetRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("onsetRange"), __scope, false) } getOrElse {Nil},
        __obj.onsetString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("onsetString"), __scope, false) } getOrElse {Nil},
        __obj.abatementDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("abatementDateTime"), __scope, false) } getOrElse {Nil},
        __obj.abatementAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("abatementAge"), __scope, false) } getOrElse {Nil},
        __obj.abatementBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("abatementBoolean"), __scope, false) } getOrElse {Nil},
        __obj.abatementPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("abatementPeriod"), __scope, false) } getOrElse {Nil},
        __obj.abatementRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("abatementRange"), __scope, false) } getOrElse {Nil},
        __obj.abatementString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("abatementString"), __scope, false) } getOrElse {Nil},
        __obj.assertedDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("assertedDate"), __scope, false) } getOrElse {Nil},
        __obj.asserter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("asserter"), __scope, false) } getOrElse {Nil},
        __obj.stage map { scalaxb.toXML[Conditionu46Stage](_, Some(fhirUrl), Some("stage"), __scope, false) } getOrElse {Nil},
        __obj.evidence flatMap { scalaxb.toXML[Conditionu46Evidence](_, Some(fhirUrl), Some("evidence"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Conditionu46StageFormat extends scalaxb.ElemNameParser[Conditionu46Stage] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Condition.Stage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Conditionu46Stage] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "summary")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "assessment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Conditionu46Stage(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Conditionu46Stage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Conditionu46Stage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.summary map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("summary"), __scope, false) } getOrElse {Nil},
        __obj.assessment flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("assessment"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Conditionu46EvidenceFormat extends scalaxb.ElemNameParser[Conditionu46Evidence] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Condition.Evidence")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Conditionu46Evidence] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Conditionu46Evidence(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Conditionu46Evidence, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Conditionu46Evidence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.code flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConditionVerificationStatusu45listFormat = new DefaultComionkinmrshl7fhir_ConditionVerificationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConditionVerificationStatusu45listFormat extends scalaxb.XMLFormat[ConditionVerificationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConditionVerificationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("provisional")) => Provisional
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("differential")) => Differential
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("confirmed")) => Confirmed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refuted")) => Refuted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue12
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConditionVerificationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConditionVerificationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConditionVerificationStatusFormat extends scalaxb.ElemNameParser[ConditionVerificationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConditionVerificationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConditionVerificationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConditionVerificationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConditionVerificationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConditionVerificationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConditionVerificationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConditionClinicalStatusCodesu45listFormat = new DefaultComionkinmrshl7fhir_ConditionClinicalStatusCodesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConditionClinicalStatusCodesu45listFormat extends scalaxb.XMLFormat[ConditionClinicalStatusCodesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConditionClinicalStatusCodesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("recurrence")) => Recurrence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("remission")) => Remission
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resolved")) => Resolved

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConditionClinicalStatusCodesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConditionClinicalStatusCodesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConditionClinicalStatusCodesFormat extends scalaxb.ElemNameParser[ConditionClinicalStatusCodes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConditionClinicalStatusCodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConditionClinicalStatusCodes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConditionClinicalStatusCodes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConditionClinicalStatusCodesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConditionClinicalStatusCodes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConditionClinicalStatusCodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ConsentTypeFormat extends scalaxb.ElemNameParser[ConsentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConsentType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dateTime")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "consentingParty")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "policy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "policyRule")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dataPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "data")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "except")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      ConsentType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConsentState](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[Consentu46Actor](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Consentu46Policy](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Consentu46Data](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[Consentu46Except](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ConsentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ConsentState](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.dateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("dateTime"), __scope, false) } getOrElse {Nil},
        __obj.consentingParty flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("consentingParty"), __scope, false) },
        __obj.actor flatMap { scalaxb.toXML[Consentu46Actor](_, Some(fhirUrl), Some("actor"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("action"), __scope, false) },
        __obj.organization flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) },
        __obj.sourceAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("sourceAttachment"), __scope, false) } getOrElse {Nil},
        __obj.sourceIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("sourceIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.sourceReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sourceReference"), __scope, false) } getOrElse {Nil},
        __obj.policy flatMap { scalaxb.toXML[Consentu46Policy](_, Some(fhirUrl), Some("policy"), __scope, false) },
        __obj.policyRule map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("policyRule"), __scope, false) } getOrElse {Nil},
        __obj.securityLabel flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.purpose flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("purpose"), __scope, false) },
        __obj.dataPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("dataPeriod"), __scope, false) } getOrElse {Nil},
        __obj.data flatMap { scalaxb.toXML[Consentu46Data](_, Some(fhirUrl), Some("data"), __scope, false) },
        __obj.except flatMap { scalaxb.toXML[Consentu46Except](_, Some(fhirUrl), Some("except"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Consentu46ActorFormat extends scalaxb.ElemNameParser[Consentu46Actor] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Actor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Actor] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Consentu46Actor(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Actor, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Actor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.role, Some(fhirUrl), Some("role"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.reference, Some(fhirUrl), Some("reference"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Consentu46PolicyFormat extends scalaxb.ElemNameParser[Consentu46Policy] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Policy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Policy] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "uri")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Consentu46Policy(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Policy, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Policy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.authority map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("authority"), __scope, false) } getOrElse {Nil},
        __obj.uri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("uri"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Consentu46DataFormat extends scalaxb.ElemNameParser[Consentu46Data] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Data")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Data] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "meaning")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Consentu46Data(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConsentDataMeaning](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Data, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Data, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ConsentDataMeaning](__obj.meaning, Some(fhirUrl), Some("meaning"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.reference, Some(fhirUrl), Some("reference"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Consentu46ExceptFormat extends scalaxb.ElemNameParser[Consentu46Except] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Except")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Except] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dataPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      Consentu46Except(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConsentExceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[Consentu46Actor1](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[Consentu46Data1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Except, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Except, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ConsentExceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.actor flatMap { scalaxb.toXML[Consentu46Actor1](_, Some(fhirUrl), Some("actor"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("action"), __scope, false) },
        __obj.securityLabel flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.purpose flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("purpose"), __scope, false) },
        __obj.classValue flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("class"), __scope, false) },
        __obj.code flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.dataPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("dataPeriod"), __scope, false) } getOrElse {Nil},
        __obj.data flatMap { scalaxb.toXML[Consentu46Data1](_, Some(fhirUrl), Some("data"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Consentu46Actor1Format extends scalaxb.ElemNameParser[Consentu46Actor1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Actor1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Actor1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Consentu46Actor1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Actor1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Actor1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.role, Some(fhirUrl), Some("role"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.reference, Some(fhirUrl), Some("reference"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Consentu46Data1Format extends scalaxb.ElemNameParser[Consentu46Data1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Consent.Data1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Consentu46Data1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "meaning")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Consentu46Data1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ConsentDataMeaning](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Consentu46Data1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Consentu46Data1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ConsentDataMeaning](__obj.meaning, Some(fhirUrl), Some("meaning"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.reference, Some(fhirUrl), Some("reference"), __scope, false))

  }

  def buildComionkinmrshl7fhir_ConsentDataMeaningu45listFormat = new DefaultComionkinmrshl7fhir_ConsentDataMeaningu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConsentDataMeaningu45listFormat extends scalaxb.XMLFormat[ConsentDataMeaningu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConsentDataMeaningu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instance")) => InstanceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("related")) => Related
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dependents")) => Dependents
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("authoredby")) => Authoredby

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConsentDataMeaningu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConsentDataMeaningu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConsentDataMeaningFormat extends scalaxb.ElemNameParser[ConsentDataMeaning] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConsentDataMeaning")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConsentDataMeaning] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConsentDataMeaning(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConsentDataMeaningu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConsentDataMeaning, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConsentDataMeaning, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConsentStateu45listFormat = new DefaultComionkinmrshl7fhir_ConsentStateu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConsentStateu45listFormat extends scalaxb.XMLFormat[ConsentStateu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConsentStateu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => ProposedValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue17
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rejected")) => RejectedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue25

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConsentStateu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConsentStateu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConsentStateFormat extends scalaxb.ElemNameParser[ConsentState] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConsentState")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConsentState] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConsentState(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConsentStateu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConsentState, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConsentState, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ConsentExceptTypeu45listFormat = new DefaultComionkinmrshl7fhir_ConsentExceptTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ConsentExceptTypeu45listFormat extends scalaxb.XMLFormat[ConsentExceptTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConsentExceptTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("deny")) => Deny
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("permit")) => Permit

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConsentExceptTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConsentExceptTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ConsentExceptTypeFormat extends scalaxb.ElemNameParser[ConsentExceptType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ConsentExceptType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConsentExceptType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ConsentExceptType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConsentExceptTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConsentExceptType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConsentExceptType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ContractTypeFormat extends scalaxb.ElemNameParser[ContractType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContractType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issued")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "applies")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "authority")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "domain")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "actionReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "decisionType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentDerivative")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "signer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valuedItem")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "term")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bindingAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bindingReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "friendly")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "legal")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      ContractType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ContractResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[Contractu46Agent](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[Contractu46Signer](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[Contractu46ValuedItem](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Contractu46Term](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[Contractu46Friendly](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[Contractu46Legal](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[Contractu46Rule](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ContractType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[ContractResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.issued map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("issued"), __scope, false) } getOrElse {Nil},
        __obj.applies map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("applies"), __scope, false) } getOrElse {Nil},
        __obj.subject flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.authority flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authority"), __scope, false) },
        __obj.domain flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("domain"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subType"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("action"), __scope, false) },
        __obj.actionReason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("actionReason"), __scope, false) },
        __obj.decisionType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("decisionType"), __scope, false) } getOrElse {Nil},
        __obj.contentDerivative map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("contentDerivative"), __scope, false) } getOrElse {Nil},
        __obj.securityLabel flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.agent flatMap { scalaxb.toXML[Contractu46Agent](_, Some(fhirUrl), Some("agent"), __scope, false) },
        __obj.signer flatMap { scalaxb.toXML[Contractu46Signer](_, Some(fhirUrl), Some("signer"), __scope, false) },
        __obj.valuedItem flatMap { scalaxb.toXML[Contractu46ValuedItem](_, Some(fhirUrl), Some("valuedItem"), __scope, false) },
        __obj.term flatMap { scalaxb.toXML[Contractu46Term](_, Some(fhirUrl), Some("term"), __scope, false) },
        __obj.bindingAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("bindingAttachment"), __scope, false) } getOrElse {Nil},
        __obj.bindingReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("bindingReference"), __scope, false) } getOrElse {Nil},
        __obj.friendly flatMap { scalaxb.toXML[Contractu46Friendly](_, Some(fhirUrl), Some("friendly"), __scope, false) },
        __obj.legal flatMap { scalaxb.toXML[Contractu46Legal](_, Some(fhirUrl), Some("legal"), __scope, false) },
        __obj.rule flatMap { scalaxb.toXML[Contractu46Rule](_, Some(fhirUrl), Some("rule"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Contractu46AgentFormat extends scalaxb.ElemNameParser[Contractu46Agent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Agent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Agent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "role")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Contractu46Agent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Agent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Agent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false),
        __obj.role flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Contractu46SignerFormat extends scalaxb.ElemNameParser[Contractu46Signer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Signer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Signer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "party")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Contractu46Signer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        p5 map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Signer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Signer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.party, Some(fhirUrl), Some("party"), __scope, false),
        __obj.signature flatMap { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("signature"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Contractu46ValuedItemFormat extends scalaxb.ElemNameParser[Contractu46ValuedItem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.ValuedItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46ValuedItem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "entityCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "entityReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "points")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      Contractu46ValuedItem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46ValuedItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46ValuedItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.entityCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("entityCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.entityReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("entityReference"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.effectiveTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveTime"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.points map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("points"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Contractu46TermFormat extends scalaxb.ElemNameParser[Contractu46Term] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Term")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Term] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issued")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "applies")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "actionReason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valuedItem")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "group")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      Contractu46Term(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[Contractu46Agent1](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[Contractu46ValuedItem1](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[Contractu46Term](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Term, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Term, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.issued map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("issued"), __scope, false) } getOrElse {Nil},
        __obj.applies map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("applies"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subType"), __scope, false) } getOrElse {Nil},
        __obj.topic flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("action"), __scope, false) },
        __obj.actionReason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("actionReason"), __scope, false) },
        __obj.securityLabel flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.agent flatMap { scalaxb.toXML[Contractu46Agent1](_, Some(fhirUrl), Some("agent"), __scope, false) },
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.valuedItem flatMap { scalaxb.toXML[Contractu46ValuedItem1](_, Some(fhirUrl), Some("valuedItem"), __scope, false) },
        __obj.group flatMap { scalaxb.toXML[Contractu46Term](_, Some(fhirUrl), Some("group"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Contractu46Agent1Format extends scalaxb.ElemNameParser[Contractu46Agent1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Agent1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Agent1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "role")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Contractu46Agent1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Agent1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Agent1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false),
        __obj.role flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Contractu46ValuedItem1Format extends scalaxb.ElemNameParser[Contractu46ValuedItem1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.ValuedItem1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46ValuedItem1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "entityCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "entityReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "points")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      Contractu46ValuedItem1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46ValuedItem1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46ValuedItem1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.entityCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("entityCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.entityReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("entityReference"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.effectiveTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveTime"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.points map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("points"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Contractu46FriendlyFormat extends scalaxb.ElemNameParser[Contractu46Friendly] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Friendly")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Friendly] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Contractu46Friendly(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Friendly, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Friendly, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.contentAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("contentAttachment"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Contractu46LegalFormat extends scalaxb.ElemNameParser[Contractu46Legal] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Legal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Legal] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Contractu46Legal(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Legal, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Legal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.contentAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("contentAttachment"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Contractu46RuleFormat extends scalaxb.ElemNameParser[Contractu46Rule] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Contract.Rule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Contractu46Rule] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Contractu46Rule(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Contractu46Rule, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Contractu46Rule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.contentAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("contentAttachment"), __scope, false) } getOrElse {Nil},
        __obj.contentReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contentReference"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ContractResourceStatusCodesu45listFormat = new DefaultComionkinmrshl7fhir_ContractResourceStatusCodesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ContractResourceStatusCodesu45listFormat extends scalaxb.XMLFormat[ContractResourceStatusCodesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ContractResourceStatusCodesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amended")) => AmendedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("appended")) => Appended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("disputed")) => Disputed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue26
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("executable")) => Executable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("executed")) => Executed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("negotiable")) => Negotiable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("offered")) => Offered
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policy")) => Policy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rejected")) => RejectedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("renewed")) => Renewed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("revoked")) => Revoked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resolved")) => ResolvedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("terminated")) => Terminated

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContractResourceStatusCodesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ContractResourceStatusCodesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ContractResourceStatusCodesFormat extends scalaxb.ElemNameParser[ContractResourceStatusCodes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContractResourceStatusCodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContractResourceStatusCodes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ContractResourceStatusCodes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ContractResourceStatusCodesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContractResourceStatusCodes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContractResourceStatusCodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_CoverageTypeFormat extends scalaxb.ElemNameParser[CoverageType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Coverage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CoverageType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "policyHolder")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subscriber")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subscriberId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "beneficiary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "payor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "grouping")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dependent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "order")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "network")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contract")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      CoverageType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Coverageu46Grouping](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CoverageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.policyHolder map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("policyHolder"), __scope, false) } getOrElse {Nil},
        __obj.subscriber map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subscriber"), __scope, false) } getOrElse {Nil},
        __obj.subscriberId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subscriberId"), __scope, false) } getOrElse {Nil},
        __obj.beneficiary map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("beneficiary"), __scope, false) } getOrElse {Nil},
        __obj.relationship map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relationship"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.payor flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("payor"), __scope, false) },
        __obj.grouping map { scalaxb.toXML[Coverageu46Grouping](_, Some(fhirUrl), Some("grouping"), __scope, false) } getOrElse {Nil},
        __obj.dependent map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("dependent"), __scope, false) } getOrElse {Nil},
        __obj.sequence map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("sequence"), __scope, false) } getOrElse {Nil},
        __obj.order map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("order"), __scope, false) } getOrElse {Nil},
        __obj.network map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("network"), __scope, false) } getOrElse {Nil},
        __obj.contract flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contract"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Coverageu46GroupingFormat extends scalaxb.ElemNameParser[Coverageu46Grouping] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Coverage.Grouping")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Coverageu46Grouping] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "group")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupDisplay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subGroup")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subGroupDisplay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "plan")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "planDisplay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subPlan")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subPlanDisplay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "classDisplay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subClass")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subClassDisplay")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      Coverageu46Grouping(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Coverageu46Grouping, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Coverageu46Grouping, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.group map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("group"), __scope, false) } getOrElse {Nil},
        __obj.groupDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("groupDisplay"), __scope, false) } getOrElse {Nil},
        __obj.subGroup map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subGroup"), __scope, false) } getOrElse {Nil},
        __obj.subGroupDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subGroupDisplay"), __scope, false) } getOrElse {Nil},
        __obj.plan map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("plan"), __scope, false) } getOrElse {Nil},
        __obj.planDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("planDisplay"), __scope, false) } getOrElse {Nil},
        __obj.subPlan map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subPlan"), __scope, false) } getOrElse {Nil},
        __obj.subPlanDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subPlanDisplay"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.classDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("classDisplay"), __scope, false) } getOrElse {Nil},
        __obj.subClass map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subClass"), __scope, false) } getOrElse {Nil},
        __obj.subClassDisplay map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("subClassDisplay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DataElementTypeFormat extends scalaxb.ElemNameParser[DataElementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataElementType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "stringency")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mapping")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "element")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      DataElementType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DataElementStringency](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[DataElementu46Mapping](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ElementDefinitionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DataElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.stringency map { scalaxb.toXML[DataElementStringency](_, Some(fhirUrl), Some("stringency"), __scope, false) } getOrElse {Nil},
        __obj.mapping flatMap { scalaxb.toXML[DataElementu46Mapping](_, Some(fhirUrl), Some("mapping"), __scope, false) },
        __obj.element flatMap { scalaxb.toXML[ElementDefinitionType](_, Some(fhirUrl), Some("element"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DataElementu46MappingFormat extends scalaxb.ElemNameParser[DataElementu46Mapping] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataElement.Mapping")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataElementu46Mapping] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "uri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      DataElementu46Mapping(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DataElementu46Mapping, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DataElementu46Mapping, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.identity, Some(fhirUrl), Some("identity"), __scope, false),
        __obj.uri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("uri"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_DataElementStringencyu45listFormat = new DefaultComionkinmrshl7fhir_DataElementStringencyu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DataElementStringencyu45listFormat extends scalaxb.XMLFormat[DataElementStringencyu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DataElementStringencyu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("comparable")) => Comparable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fully-specified")) => Fullyu45specified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equivalent")) => EquivalentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("convertable")) => Convertable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("scaleable")) => Scaleable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flexible")) => Flexible

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DataElementStringencyu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DataElementStringencyu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DataElementStringencyFormat extends scalaxb.ElemNameParser[DataElementStringency] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DataElementStringency")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DataElementStringency] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DataElementStringency(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DataElementStringencyu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DataElementStringency, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DataElementStringency, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DetectedIssueTypeFormat extends scalaxb.ElemNameParser[DetectedIssueType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DetectedIssue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DetectedIssueType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "severity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "implicated")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detail")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mitigation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      DetectedIssueType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ObservationStatus](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DetectedIssueSeverity](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[DetectedIssueu46Mitigation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DetectedIssueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ObservationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.severity map { scalaxb.toXML[DetectedIssueSeverity](_, Some(fhirUrl), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        __obj.implicated flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("implicated"), __scope, false) },
        __obj.detail map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("detail"), __scope, false) } getOrElse {Nil},
        __obj.reference map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.mitigation flatMap { scalaxb.toXML[DetectedIssueu46Mitigation](_, Some(fhirUrl), Some("mitigation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DetectedIssueu46MitigationFormat extends scalaxb.ElemNameParser[DetectedIssueu46Mitigation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DetectedIssue.Mitigation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DetectedIssueu46Mitigation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      DetectedIssueu46Mitigation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DetectedIssueu46Mitigation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DetectedIssueu46Mitigation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.action, Some(fhirUrl), Some("action"), __scope, false),
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ObservationStatusu45listFormat = new DefaultComionkinmrshl7fhir_ObservationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ObservationStatusu45listFormat extends scalaxb.XMLFormat[ObservationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ObservationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("registered")) => Registered
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preliminary")) => PreliminaryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("final")) => FinalValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amended")) => AmendedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("corrected")) => Corrected
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue27
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue12

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ObservationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ObservationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ObservationStatusFormat extends scalaxb.ElemNameParser[ObservationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ObservationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObservationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ObservationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ObservationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ObservationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ObservationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DetectedIssueSeverityu45listFormat = new DefaultComionkinmrshl7fhir_DetectedIssueSeverityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DetectedIssueSeverityu45listFormat extends scalaxb.XMLFormat[DetectedIssueSeverityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DetectedIssueSeverityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("high")) => HighValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("moderate")) => ModerateValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("low")) => LowValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DetectedIssueSeverityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DetectedIssueSeverityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DetectedIssueSeverityFormat extends scalaxb.ElemNameParser[DetectedIssueSeverity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DetectedIssueSeverity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DetectedIssueSeverity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DetectedIssueSeverity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DetectedIssueSeverityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DetectedIssueSeverity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DetectedIssueSeverity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceTypeFormat extends scalaxb.ElemNameParser[DeviceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Device")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lotNumber")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "manufacturer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "manufactureDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expirationDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "model")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "owner")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "safety")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      DeviceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Deviceu46Udi](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[FHIRDeviceStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DeviceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.udi map { scalaxb.toXML[Deviceu46Udi](_, Some(fhirUrl), Some("udi"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[FHIRDeviceStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.lotNumber map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("lotNumber"), __scope, false) } getOrElse {Nil},
        __obj.manufacturer map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("manufacturer"), __scope, false) } getOrElse {Nil},
        __obj.manufactureDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("manufactureDate"), __scope, false) } getOrElse {Nil},
        __obj.expirationDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("expirationDate"), __scope, false) } getOrElse {Nil},
        __obj.model map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("model"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.owner map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("owner"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.safety flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("safety"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Deviceu46UdiFormat extends scalaxb.ElemNameParser[Deviceu46Udi] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Device.Udi")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Deviceu46Udi] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deviceIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "carrierHRF")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "carrierAIDC")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issuer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "entryType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      Deviceu46Udi(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UDIEntryType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Deviceu46Udi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Deviceu46Udi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.deviceIdentifier map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("deviceIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.jurisdiction map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) } getOrElse {Nil},
        __obj.carrierHRF map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("carrierHRF"), __scope, false) } getOrElse {Nil},
        __obj.carrierAIDC map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("carrierAIDC"), __scope, false) } getOrElse {Nil},
        __obj.issuer map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("issuer"), __scope, false) } getOrElse {Nil},
        __obj.entryType map { scalaxb.toXML[UDIEntryType](_, Some(fhirUrl), Some("entryType"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_FHIRDeviceStatusu45listFormat = new DefaultComionkinmrshl7fhir_FHIRDeviceStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FHIRDeviceStatusu45listFormat extends scalaxb.XMLFormat[FHIRDeviceStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FHIRDeviceStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue18
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue28
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue13

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FHIRDeviceStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FHIRDeviceStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FHIRDeviceStatusFormat extends scalaxb.ElemNameParser[FHIRDeviceStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FHIRDeviceStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FHIRDeviceStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FHIRDeviceStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FHIRDeviceStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FHIRDeviceStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FHIRDeviceStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_UDIEntryTypeu45listFormat = new DefaultComionkinmrshl7fhir_UDIEntryTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_UDIEntryTypeu45listFormat extends scalaxb.XMLFormat[UDIEntryTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): UDIEntryTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barcode")) => Barcode
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rfid")) => Rfid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("manual")) => Manual
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("card")) => Card
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("self-reported")) => Selfu45reported
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue14

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UDIEntryTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: UDIEntryTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_UDIEntryTypeFormat extends scalaxb.ElemNameParser[UDIEntryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("UDIEntryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[UDIEntryType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      UDIEntryType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[UDIEntryTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: UDIEntryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: UDIEntryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceComponentTypeFormat extends scalaxb.ElemNameParser[DeviceComponentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceComponent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceComponentType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastSystemChange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "operationalStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "parameterGroup")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measurementPrinciple")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "productionSpecification")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "languageCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      DeviceComponentType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdentifierType](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[MeasmntPrinciple](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[DeviceComponentu46ProductionSpecification](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DeviceComponentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdentifierType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.lastSystemChange map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("lastSystemChange"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.parent map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) } getOrElse {Nil},
        __obj.operationalStatus flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("operationalStatus"), __scope, false) },
        __obj.parameterGroup map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("parameterGroup"), __scope, false) } getOrElse {Nil},
        __obj.measurementPrinciple map { scalaxb.toXML[MeasmntPrinciple](_, Some(fhirUrl), Some("measurementPrinciple"), __scope, false) } getOrElse {Nil},
        __obj.productionSpecification flatMap { scalaxb.toXML[DeviceComponentu46ProductionSpecification](_, Some(fhirUrl), Some("productionSpecification"), __scope, false) },
        __obj.languageCode map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("languageCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DeviceComponentu46ProductionSpecificationFormat extends scalaxb.ElemNameParser[DeviceComponentu46ProductionSpecification] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceComponent.ProductionSpecification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceComponentu46ProductionSpecification] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "specType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "componentId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productionSpec")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      DeviceComponentu46ProductionSpecification(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceComponentu46ProductionSpecification, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceComponentu46ProductionSpecification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.specType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specType"), __scope, false) } getOrElse {Nil},
        __obj.componentId map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("componentId"), __scope, false) } getOrElse {Nil},
        __obj.productionSpec map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("productionSpec"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_MeasmntPrincipleu45listFormat = new DefaultComionkinmrshl7fhir_MeasmntPrincipleu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MeasmntPrincipleu45listFormat extends scalaxb.XMLFormat[MeasmntPrincipleu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MeasmntPrincipleu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chemical")) => Chemical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electrical")) => Electrical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("impedance")) => Impedance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nuclear")) => Nuclear
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("optical")) => Optical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("thermal")) => Thermal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("biological")) => Biological
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mechanical")) => Mechanical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("acoustical")) => Acoustical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("manual")) => ManualValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MeasmntPrincipleu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MeasmntPrincipleu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MeasmntPrincipleFormat extends scalaxb.ElemNameParser[MeasmntPrinciple] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasmntPrinciple")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasmntPrinciple] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MeasmntPrinciple(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MeasmntPrincipleu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasmntPrinciple, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasmntPrinciple, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricTypeFormat extends scalaxb.ElemNameParser[DeviceMetricType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetric")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operationalStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "color")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measurementPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "calibration")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      DeviceMetricType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdentifierType](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DeviceMetricOperationalStatus](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DeviceMetricColor](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DeviceMetricCategory](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[DeviceMetricu46Calibration](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DeviceMetricType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdentifierType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.unit map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.parent map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) } getOrElse {Nil},
        __obj.operationalStatus map { scalaxb.toXML[DeviceMetricOperationalStatus](_, Some(fhirUrl), Some("operationalStatus"), __scope, false) } getOrElse {Nil},
        __obj.color map { scalaxb.toXML[DeviceMetricColor](_, Some(fhirUrl), Some("color"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DeviceMetricCategory](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.measurementPeriod map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("measurementPeriod"), __scope, false) } getOrElse {Nil},
        __obj.calibration flatMap { scalaxb.toXML[DeviceMetricu46Calibration](_, Some(fhirUrl), Some("calibration"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricu46CalibrationFormat extends scalaxb.ElemNameParser[DeviceMetricu46Calibration] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetric.Calibration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricu46Calibration] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "state")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "time")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      DeviceMetricu46Calibration(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[DeviceMetricCalibrationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DeviceMetricCalibrationState](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricu46Calibration, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricu46Calibration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[DeviceMetricCalibrationType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[DeviceMetricCalibrationState](_, Some(fhirUrl), Some("state"), __scope, false) } getOrElse {Nil},
        __obj.time map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("time"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_DeviceMetricCalibrationTypeu45listFormat = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceMetricCalibrationTypeu45listFormat extends scalaxb.XMLFormat[DeviceMetricCalibrationTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceMetricCalibrationTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => Unspecified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("offset")) => Offset
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gain")) => Gain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("two-point")) => Twou45point

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceMetricCalibrationTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceMetricCalibrationTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricCalibrationTypeFormat extends scalaxb.ElemNameParser[DeviceMetricCalibrationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetricCalibrationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricCalibrationType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceMetricCalibrationType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceMetricCalibrationTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricCalibrationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricCalibrationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DeviceMetricColoru45listFormat = new DefaultComionkinmrshl7fhir_DeviceMetricColoru45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceMetricColoru45listFormat extends scalaxb.XMLFormat[DeviceMetricColoru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceMetricColoru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("black")) => Black
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("red")) => Red
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("green")) => Green
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("yellow")) => Yellow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blue")) => Blue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("magenta")) => Magenta
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cyan")) => Cyan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("white")) => White

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceMetricColoru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceMetricColoru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricColorFormat extends scalaxb.ElemNameParser[DeviceMetricColor] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetricColor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricColor] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceMetricColor(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceMetricColoru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricColor, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricColor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DeviceMetricCalibrationStateu45listFormat = new DefaultComionkinmrshl7fhir_DeviceMetricCalibrationStateu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceMetricCalibrationStateu45listFormat extends scalaxb.XMLFormat[DeviceMetricCalibrationStateu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceMetricCalibrationStateu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-calibrated")) => Notu45calibrated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("calibration-required")) => Calibrationu45required
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("calibrated")) => Calibrated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => UnspecifiedValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceMetricCalibrationStateu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceMetricCalibrationStateu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricCalibrationStateFormat extends scalaxb.ElemNameParser[DeviceMetricCalibrationState] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetricCalibrationState")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricCalibrationState] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceMetricCalibrationState(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceMetricCalibrationStateu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricCalibrationState, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricCalibrationState, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DeviceMetricOperationalStatusu45listFormat = new DefaultComionkinmrshl7fhir_DeviceMetricOperationalStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceMetricOperationalStatusu45listFormat extends scalaxb.XMLFormat[DeviceMetricOperationalStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceMetricOperationalStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on")) => On
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("off")) => OffValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("standby")) => Standby
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue29

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceMetricOperationalStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceMetricOperationalStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricOperationalStatusFormat extends scalaxb.ElemNameParser[DeviceMetricOperationalStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetricOperationalStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricOperationalStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceMetricOperationalStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceMetricOperationalStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricOperationalStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricOperationalStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DeviceMetricCategoryu45listFormat = new DefaultComionkinmrshl7fhir_DeviceMetricCategoryu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceMetricCategoryu45listFormat extends scalaxb.XMLFormat[DeviceMetricCategoryu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceMetricCategoryu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("measurement")) => Measurement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("setting")) => Setting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("calculation")) => Calculation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => UnspecifiedValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceMetricCategoryu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceMetricCategoryu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceMetricCategoryFormat extends scalaxb.ElemNameParser[DeviceMetricCategory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceMetricCategory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceMetricCategory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceMetricCategory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceMetricCategoryu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceMetricCategory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceMetricCategory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceRequestTypeFormat extends scalaxb.ElemNameParser[DeviceRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "priorRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "codeReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "codeCodeableConcept")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performerType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInfo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relevantHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      DeviceRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[RequestStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p19, scalaxb.ElemName(node) :: stack),
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[DeviceRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DeviceRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.priorRequest flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("priorRequest"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[RequestStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.codeReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("codeReference"), __scope, false) } getOrElse {Nil},
        __obj.codeCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("codeCodeableConcept"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("occurrenceTiming"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[DeviceRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.performerType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("performerType"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.supportingInfo flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInfo"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.relevantHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("relevantHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DeviceRequestu46RequesterFormat extends scalaxb.ElemNameParser[DeviceRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DeviceRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DeviceUseStatementTypeFormat extends scalaxb.ElemNameParser[DeviceUseStatementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceUseStatement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceUseStatementType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whenUsed")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "recordedOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "device")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "indication")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      DeviceUseStatementType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DeviceUseStatementStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DeviceUseStatementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[DeviceUseStatementStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.whenUsed map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("whenUsed"), __scope, false) } getOrElse {Nil},
        __obj.timingTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("timingTiming"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.timingDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("timingDateTime"), __scope, false) } getOrElse {Nil},
        __obj.recordedOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("recordedOn"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.device, Some(fhirUrl), Some("device"), __scope, false),
        __obj.indication flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("indication"), __scope, false) },
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DeviceUseStatementStatusu45listFormat = new DefaultComionkinmrshl7fhir_DeviceUseStatementStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DeviceUseStatementStatusu45listFormat extends scalaxb.XMLFormat[DeviceUseStatementStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DeviceUseStatementStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intended")) => IntendedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeviceUseStatementStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeviceUseStatementStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DeviceUseStatementStatusFormat extends scalaxb.ElemNameParser[DeviceUseStatementStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DeviceUseStatementStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeviceUseStatementStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DeviceUseStatementStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DeviceUseStatementStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DeviceUseStatementStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DeviceUseStatementStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DiagnosticReportTypeFormat extends scalaxb.ElemNameParser[DiagnosticReportType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DiagnosticReport")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DiagnosticReportType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issued")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specimen")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "result")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "imagingStudy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "image")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "conclusion")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "codedDiagnosis")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "presentedForm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      DiagnosticReportType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DiagnosticReportStatus](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[DiagnosticReportu46Performer](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[DiagnosticReportu46Image](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DiagnosticReportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        scalaxb.toXML[DiagnosticReportStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.effectiveDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveDateTime"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.issued map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("issued"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[DiagnosticReportu46Performer](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.specimen flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("specimen"), __scope, false) },
        __obj.result flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("result"), __scope, false) },
        __obj.imagingStudy flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("imagingStudy"), __scope, false) },
        __obj.image flatMap { scalaxb.toXML[DiagnosticReportu46Image](_, Some(fhirUrl), Some("image"), __scope, false) },
        __obj.conclusion map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("conclusion"), __scope, false) } getOrElse {Nil},
        __obj.codedDiagnosis flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("codedDiagnosis"), __scope, false) },
        __obj.presentedForm flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("presentedForm"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DiagnosticReportu46PerformerFormat extends scalaxb.ElemNameParser[DiagnosticReportu46Performer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DiagnosticReport.Performer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DiagnosticReportu46Performer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DiagnosticReportu46Performer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DiagnosticReportu46Performer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DiagnosticReportu46Performer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_DiagnosticReportu46ImageFormat extends scalaxb.ElemNameParser[DiagnosticReportu46Image] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DiagnosticReport.Image")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DiagnosticReportu46Image] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "link")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DiagnosticReportu46Image(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DiagnosticReportu46Image, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DiagnosticReportu46Image, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.link, Some(fhirUrl), Some("link"), __scope, false))

  }

  def buildComionkinmrshl7fhir_DiagnosticReportStatusu45listFormat = new DefaultComionkinmrshl7fhir_DiagnosticReportStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DiagnosticReportStatusu45listFormat extends scalaxb.XMLFormat[DiagnosticReportStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DiagnosticReportStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("registered")) => RegisteredValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("partial")) => PartialValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preliminary")) => PreliminaryValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("final")) => FinalValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amended")) => AmendedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("corrected")) => CorrectedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("appended")) => AppendedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue12
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue30
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue15

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DiagnosticReportStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DiagnosticReportStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DiagnosticReportStatusFormat extends scalaxb.ElemNameParser[DiagnosticReportStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DiagnosticReportStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DiagnosticReportStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DiagnosticReportStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DiagnosticReportStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DiagnosticReportStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DiagnosticReportStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DocumentManifestTypeFormat extends scalaxb.ElemNameParser[DocumentManifestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentManifest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentManifestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "masterIdentifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recipient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "content")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "related")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      DocumentManifestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DocumentReferenceStatus](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[DocumentManifestu46Content](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[DocumentManifestu46Related](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DocumentManifestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.masterIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("masterIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[DocumentReferenceStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.author flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) },
        __obj.recipient flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recipient"), __scope, false) },
        __obj.source map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.content flatMap { scalaxb.toXML[DocumentManifestu46Content](_, Some(fhirUrl), Some("content"), __scope, false) },
        __obj.related flatMap { scalaxb.toXML[DocumentManifestu46Related](_, Some(fhirUrl), Some("related"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DocumentManifestu46ContentFormat extends scalaxb.ElemNameParser[DocumentManifestu46Content] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentManifest.Content")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentManifestu46Content] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "pAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "pReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DocumentManifestu46Content(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentManifestu46Content, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentManifestu46Content, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.pAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("pAttachment"), __scope, false) } getOrElse {Nil},
        __obj.pReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("pReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DocumentManifestu46RelatedFormat extends scalaxb.ElemNameParser[DocumentManifestu46Related] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentManifest.Related")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentManifestu46Related] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ref")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DocumentManifestu46Related(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentManifestu46Related, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentManifestu46Related, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.ref map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceTypeFormat extends scalaxb.ElemNameParser[DocumentReferenceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "masterIdentifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "docStatus")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "indexed")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authenticator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "custodian")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatesTo")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "securityLabel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "content")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      DocumentReferenceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DocumentReferenceStatus](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CompositionStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[InstantType](p17, scalaxb.ElemName(node) :: stack),
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[DocumentReferenceu46RelatesTo](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[DocumentReferenceu46Content](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[DocumentReferenceu46Context](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DocumentReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.masterIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("masterIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[DocumentReferenceStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.docStatus map { scalaxb.toXML[CompositionStatus](_, Some(fhirUrl), Some("docStatus"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.classValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[InstantType](__obj.indexed, Some(fhirUrl), Some("indexed"), __scope, false),
        __obj.author flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) },
        __obj.authenticator map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authenticator"), __scope, false) } getOrElse {Nil},
        __obj.custodian map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("custodian"), __scope, false) } getOrElse {Nil},
        __obj.relatesTo flatMap { scalaxb.toXML[DocumentReferenceu46RelatesTo](_, Some(fhirUrl), Some("relatesTo"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.securityLabel flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("securityLabel"), __scope, false) },
        __obj.content flatMap { scalaxb.toXML[DocumentReferenceu46Content](_, Some(fhirUrl), Some("content"), __scope, false) },
        __obj.context map { scalaxb.toXML[DocumentReferenceu46Context](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceu46RelatesToFormat extends scalaxb.ElemNameParser[DocumentReferenceu46RelatesTo] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReference.RelatesTo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceu46RelatesTo] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "target")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DocumentReferenceu46RelatesTo(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DocumentRelationshipType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentReferenceu46RelatesTo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentReferenceu46RelatesTo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DocumentRelationshipType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.target, Some(fhirUrl), Some("target"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceu46ContentFormat extends scalaxb.ElemNameParser[DocumentReferenceu46Content] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReference.Content")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceu46Content] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "attachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "format")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DocumentReferenceu46Content(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[AttachmentType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentReferenceu46Content, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentReferenceu46Content, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[AttachmentType](__obj.attachment, Some(fhirUrl), Some("attachment"), __scope, false),
        __obj.format map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("format"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceu46ContextFormat extends scalaxb.ElemNameParser[DocumentReferenceu46Context] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReference.Context")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceu46Context] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "event")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "facilityType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "practiceSetting")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourcePatientInfo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "related")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      DocumentReferenceu46Context(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[DocumentReferenceu46Related](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentReferenceu46Context, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentReferenceu46Context, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        __obj.event flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("event"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.facilityType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("facilityType"), __scope, false) } getOrElse {Nil},
        __obj.practiceSetting map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("practiceSetting"), __scope, false) } getOrElse {Nil},
        __obj.sourcePatientInfo map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sourcePatientInfo"), __scope, false) } getOrElse {Nil},
        __obj.related flatMap { scalaxb.toXML[DocumentReferenceu46Related](_, Some(fhirUrl), Some("related"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_DocumentReferenceu46RelatedFormat extends scalaxb.ElemNameParser[DocumentReferenceu46Related] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DocumentReference.Related")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DocumentReferenceu46Related] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ref")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      DocumentReferenceu46Related(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DocumentReferenceu46Related, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DocumentReferenceu46Related, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.ref map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_EligibilityRequestTypeFormat extends scalaxb.ElemNameParser[EligibilityRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enterer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "facility")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "businessArrangement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "benefitCategory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "benefitSubCategory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      EligibilityRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EligibilityRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.priority map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.servicedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("servicedDate"), __scope, false) } getOrElse {Nil},
        __obj.servicedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("servicedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.enterer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enterer"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.facility map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("facility"), __scope, false) } getOrElse {Nil},
        __obj.coverage map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("coverage"), __scope, false) } getOrElse {Nil},
        __obj.businessArrangement map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("businessArrangement"), __scope, false) } getOrElse {Nil},
        __obj.benefitCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("benefitCategory"), __scope, false) } getOrElse {Nil},
        __obj.benefitSubCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("benefitSubCategory"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_EligibilityResponseTypeFormat extends scalaxb.ElemNameParser[EligibilityResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "inforce")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "insurance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "error")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      EligibilityResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[EligibilityResponseu46Insurance](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[EligibilityResponseu46Error](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EligibilityResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.requestProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestProvider"), __scope, false) } getOrElse {Nil},
        __obj.requestOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestOrganization"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.inforce map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("inforce"), __scope, false) } getOrElse {Nil},
        __obj.insurance flatMap { scalaxb.toXML[EligibilityResponseu46Insurance](_, Some(fhirUrl), Some("insurance"), __scope, false) },
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.error flatMap { scalaxb.toXML[EligibilityResponseu46Error](_, Some(fhirUrl), Some("error"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EligibilityResponseu46InsuranceFormat extends scalaxb.ElemNameParser[EligibilityResponseu46Insurance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityResponse.Insurance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityResponseu46Insurance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contract")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "benefitBalance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      EligibilityResponseu46Insurance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[EligibilityResponseu46BenefitBalance](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EligibilityResponseu46Insurance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EligibilityResponseu46Insurance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.coverage map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("coverage"), __scope, false) } getOrElse {Nil},
        __obj.contract map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("contract"), __scope, false) } getOrElse {Nil},
        __obj.benefitBalance flatMap { scalaxb.toXML[EligibilityResponseu46BenefitBalance](_, Some(fhirUrl), Some("benefitBalance"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EligibilityResponseu46BenefitBalanceFormat extends scalaxb.ElemNameParser[EligibilityResponseu46BenefitBalance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityResponse.BenefitBalance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityResponseu46BenefitBalance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subCategory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excluded")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "network")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "term")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "financial")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      EligibilityResponseu46BenefitBalance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[EligibilityResponseu46Financial](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EligibilityResponseu46BenefitBalance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EligibilityResponseu46BenefitBalance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.subCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subCategory"), __scope, false) } getOrElse {Nil},
        __obj.excluded map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("excluded"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.network map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("network"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.term map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("term"), __scope, false) } getOrElse {Nil},
        __obj.financial flatMap { scalaxb.toXML[EligibilityResponseu46Financial](_, Some(fhirUrl), Some("financial"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EligibilityResponseu46FinancialFormat extends scalaxb.ElemNameParser[EligibilityResponseu46Financial] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityResponse.Financial")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityResponseu46Financial] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usedUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usedMoney")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      EligibilityResponseu46Financial(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EligibilityResponseu46Financial, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EligibilityResponseu46Financial, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.allowedUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("allowedUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.allowedString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("allowedString"), __scope, false) } getOrElse {Nil},
        __obj.allowedMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("allowedMoney"), __scope, false) } getOrElse {Nil},
        __obj.usedUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("usedUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.usedMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("usedMoney"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_EligibilityResponseu46ErrorFormat extends scalaxb.ElemNameParser[EligibilityResponseu46Error] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EligibilityResponse.Error")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EligibilityResponseu46Error] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ^^
      { case p1 ~ p2 ~ p3 =>
      EligibilityResponseu46Error(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EligibilityResponseu46Error, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EligibilityResponseu46Error, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_EncounterTypeFormat extends scalaxb.ElemNameParser[EncounterType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EncounterType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "statusHistory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "classHistory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "episodeOfCare")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "incomingReferral")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "appointment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "length")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosis")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "account")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hospitalization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "serviceProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "partOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 =>
      EncounterType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EncounterStatus](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[Encounteru46StatusHistory](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[Encounteru46ClassHistory](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[Encounteru46Participant](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[Encounteru46Diagnosis](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Encounteru46Hospitalization](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Encounteru46Location](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EncounterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[EncounterStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.statusHistory flatMap { scalaxb.toXML[Encounteru46StatusHistory](_, Some(fhirUrl), Some("statusHistory"), __scope, false) },
        __obj.classValue map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.classHistory flatMap { scalaxb.toXML[Encounteru46ClassHistory](_, Some(fhirUrl), Some("classHistory"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.priority map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.episodeOfCare flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("episodeOfCare"), __scope, false) },
        __obj.incomingReferral flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("incomingReferral"), __scope, false) },
        __obj.participant flatMap { scalaxb.toXML[Encounteru46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.appointment map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("appointment"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.length map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("length"), __scope, false) } getOrElse {Nil},
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.diagnosis flatMap { scalaxb.toXML[Encounteru46Diagnosis](_, Some(fhirUrl), Some("diagnosis"), __scope, false) },
        __obj.account flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("account"), __scope, false) },
        __obj.hospitalization map { scalaxb.toXML[Encounteru46Hospitalization](_, Some(fhirUrl), Some("hospitalization"), __scope, false) } getOrElse {Nil},
        __obj.location flatMap { scalaxb.toXML[Encounteru46Location](_, Some(fhirUrl), Some("location"), __scope, false) },
        __obj.serviceProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("serviceProvider"), __scope, false) } getOrElse {Nil},
        __obj.partOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46StatusHistoryFormat extends scalaxb.ElemNameParser[Encounteru46StatusHistory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.StatusHistory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46StatusHistory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Encounteru46StatusHistory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EncounterStatus](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PeriodType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46StatusHistory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46StatusHistory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[EncounterStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[PeriodType](__obj.period, Some(fhirUrl), Some("period"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46ClassHistoryFormat extends scalaxb.ElemNameParser[Encounteru46ClassHistory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.ClassHistory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46ClassHistory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "class")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Encounteru46ClassHistory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PeriodType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46ClassHistory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46ClassHistory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.classValue, Some(fhirUrl), Some("class"), __scope, false),
        scalaxb.toXML[PeriodType](__obj.period, Some(fhirUrl), Some("period"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46ParticipantFormat extends scalaxb.ElemNameParser[Encounteru46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "individual")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Encounteru46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.individual map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("individual"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46DiagnosisFormat extends scalaxb.ElemNameParser[Encounteru46Diagnosis] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.Diagnosis")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46Diagnosis] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rank")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Encounteru46Diagnosis(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46Diagnosis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46Diagnosis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.condition, Some(fhirUrl), Some("condition"), __scope, false),
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.rank map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("rank"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46HospitalizationFormat extends scalaxb.ElemNameParser[Encounteru46Hospitalization] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.Hospitalization")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46Hospitalization] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "preAdmissionIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "origin")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "admitSource")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reAdmission")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dietPreference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialCourtesy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialArrangement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dischargeDisposition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      Encounteru46Hospitalization(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46Hospitalization, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46Hospitalization, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.preAdmissionIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("preAdmissionIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.origin map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("origin"), __scope, false) } getOrElse {Nil},
        __obj.admitSource map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("admitSource"), __scope, false) } getOrElse {Nil},
        __obj.reAdmission map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reAdmission"), __scope, false) } getOrElse {Nil},
        __obj.dietPreference flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("dietPreference"), __scope, false) },
        __obj.specialCourtesy flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialCourtesy"), __scope, false) },
        __obj.specialArrangement flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialArrangement"), __scope, false) },
        __obj.destination map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.dischargeDisposition map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("dischargeDisposition"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Encounteru46LocationFormat extends scalaxb.ElemNameParser[Encounteru46Location] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Encounter.Location")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Encounteru46Location] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Encounteru46Location(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[EncounterLocationStatus](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Encounteru46Location, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Encounteru46Location, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.location, Some(fhirUrl), Some("location"), __scope, false),
        __obj.status map { scalaxb.toXML[EncounterLocationStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_EncounterLocationStatusu45listFormat = new DefaultComionkinmrshl7fhir_EncounterLocationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EncounterLocationStatusu45listFormat extends scalaxb.XMLFormat[EncounterLocationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EncounterLocationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => PlannedValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reserved")) => Reserved
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EncounterLocationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EncounterLocationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EncounterLocationStatusFormat extends scalaxb.ElemNameParser[EncounterLocationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EncounterLocationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EncounterLocationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EncounterLocationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EncounterLocationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EncounterLocationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EncounterLocationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_EncounterStatusu45listFormat = new DefaultComionkinmrshl7fhir_EncounterStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EncounterStatusu45listFormat extends scalaxb.XMLFormat[EncounterStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EncounterStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => PlannedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("arrived")) => Arrived
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("triaged")) => Triaged
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onleave")) => Onleave
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("finished")) => FinishedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EncounterStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EncounterStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EncounterStatusFormat extends scalaxb.ElemNameParser[EncounterStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EncounterStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EncounterStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EncounterStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EncounterStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EncounterStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EncounterStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EndpointTypeFormat extends scalaxb.ElemNameParser[EndpointType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Endpoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EndpointType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "connectionType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "payloadType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "payloadMimeType")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "header")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      EndpointType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EndpointStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodingType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EndpointType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[EndpointStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[CodingType](__obj.connectionType, Some(fhirUrl), Some("connectionType"), __scope, false),
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.managingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.payloadType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("payloadType"), __scope, false) },
        __obj.payloadMimeType flatMap { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("payloadMimeType"), __scope, false) },
        scalaxb.toXML[UriType](__obj.address, Some(fhirUrl), Some("address"), __scope, false),
        __obj.header flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("header"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_EndpointStatusu45listFormat = new DefaultComionkinmrshl7fhir_EndpointStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EndpointStatusu45listFormat extends scalaxb.XMLFormat[EndpointStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EndpointStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue19
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("off")) => OffValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue31
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("test")) => Test

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EndpointStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EndpointStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EndpointStatusFormat extends scalaxb.ElemNameParser[EndpointStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EndpointStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EndpointStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EndpointStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EndpointStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EndpointStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EndpointStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EnrollmentRequestTypeFormat extends scalaxb.ElemNameParser[EnrollmentRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EnrollmentRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EnrollmentRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "coverage")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      EnrollmentRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EnrollmentRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.coverage map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("coverage"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_EnrollmentResponseTypeFormat extends scalaxb.ElemNameParser[EnrollmentResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EnrollmentResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EnrollmentResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestOrganization")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      EnrollmentResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EnrollmentResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.requestProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestProvider"), __scope, false) } getOrElse {Nil},
        __obj.requestOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestOrganization"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_EpisodeOfCareTypeFormat extends scalaxb.ElemNameParser[EpisodeOfCareType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EpisodeOfCare")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EpisodeOfCareType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "statusHistory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosis")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referralRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "careManager")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "team")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "account")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      EpisodeOfCareType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EpisodeOfCareStatus](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[EpisodeOfCareu46StatusHistory](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[EpisodeOfCareu46Diagnosis](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: EpisodeOfCareType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[EpisodeOfCareStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.statusHistory flatMap { scalaxb.toXML[EpisodeOfCareu46StatusHistory](_, Some(fhirUrl), Some("statusHistory"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.diagnosis flatMap { scalaxb.toXML[EpisodeOfCareu46Diagnosis](_, Some(fhirUrl), Some("diagnosis"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.managingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.referralRequest flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referralRequest"), __scope, false) },
        __obj.careManager map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("careManager"), __scope, false) } getOrElse {Nil},
        __obj.team flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("team"), __scope, false) },
        __obj.account flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("account"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_EpisodeOfCareu46StatusHistoryFormat extends scalaxb.ElemNameParser[EpisodeOfCareu46StatusHistory] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EpisodeOfCare.StatusHistory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EpisodeOfCareu46StatusHistory] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      EpisodeOfCareu46StatusHistory(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EpisodeOfCareStatus](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PeriodType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EpisodeOfCareu46StatusHistory, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EpisodeOfCareu46StatusHistory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[EpisodeOfCareStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[PeriodType](__obj.period, Some(fhirUrl), Some("period"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_EpisodeOfCareu46DiagnosisFormat extends scalaxb.ElemNameParser[EpisodeOfCareu46Diagnosis] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EpisodeOfCare.Diagnosis")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EpisodeOfCareu46Diagnosis] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rank")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      EpisodeOfCareu46Diagnosis(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EpisodeOfCareu46Diagnosis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EpisodeOfCareu46Diagnosis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.condition, Some(fhirUrl), Some("condition"), __scope, false),
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.rank map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("rank"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_EpisodeOfCareStatusu45listFormat = new DefaultComionkinmrshl7fhir_EpisodeOfCareStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_EpisodeOfCareStatusu45listFormat extends scalaxb.XMLFormat[EpisodeOfCareStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): EpisodeOfCareStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => PlannedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waitlist")) => Waitlist
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onhold")) => Onhold
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("finished")) => Finished
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue9

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EpisodeOfCareStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EpisodeOfCareStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_EpisodeOfCareStatusFormat extends scalaxb.ElemNameParser[EpisodeOfCareStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("EpisodeOfCareStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EpisodeOfCareStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      EpisodeOfCareStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[EpisodeOfCareStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: EpisodeOfCareStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: EpisodeOfCareStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileTypeFormat extends scalaxb.ElemNameParser[ExpansionProfileType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "fixedVersion")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excludedSystem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "includeDesignations")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "designation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "includeDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "activeOnly")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excludeNested")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excludeNotForUI")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excludePostCoordinated")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "displayLanguage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "limitedExpansion")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      ExpansionProfileType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ExpansionProfileu46FixedVersion](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ExpansionProfileu46ExcludedSystem](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ExpansionProfileu46Designation](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ExpansionProfileType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.fixedVersion flatMap { scalaxb.toXML[ExpansionProfileu46FixedVersion](_, Some(fhirUrl), Some("fixedVersion"), __scope, false) },
        __obj.excludedSystem map { scalaxb.toXML[ExpansionProfileu46ExcludedSystem](_, Some(fhirUrl), Some("excludedSystem"), __scope, false) } getOrElse {Nil},
        __obj.includeDesignations map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("includeDesignations"), __scope, false) } getOrElse {Nil},
        __obj.designation map { scalaxb.toXML[ExpansionProfileu46Designation](_, Some(fhirUrl), Some("designation"), __scope, false) } getOrElse {Nil},
        __obj.includeDefinition map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("includeDefinition"), __scope, false) } getOrElse {Nil},
        __obj.activeOnly map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("activeOnly"), __scope, false) } getOrElse {Nil},
        __obj.excludeNested map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("excludeNested"), __scope, false) } getOrElse {Nil},
        __obj.excludeNotForUI map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("excludeNotForUI"), __scope, false) } getOrElse {Nil},
        __obj.excludePostCoordinated map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("excludePostCoordinated"), __scope, false) } getOrElse {Nil},
        __obj.displayLanguage map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("displayLanguage"), __scope, false) } getOrElse {Nil},
        __obj.limitedExpansion map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("limitedExpansion"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46FixedVersionFormat extends scalaxb.ElemNameParser[ExpansionProfileu46FixedVersion] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.FixedVersion")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46FixedVersion] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ExpansionProfileu46FixedVersion(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[SystemVersionProcessingMode](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46FixedVersion, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46FixedVersion, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.system, Some(fhirUrl), Some("system"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.version, Some(fhirUrl), Some("version"), __scope, false),
        scalaxb.toXML[SystemVersionProcessingMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46ExcludedSystemFormat extends scalaxb.ElemNameParser[ExpansionProfileu46ExcludedSystem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.ExcludedSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46ExcludedSystem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ExpansionProfileu46ExcludedSystem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46ExcludedSystem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46ExcludedSystem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.system, Some(fhirUrl), Some("system"), __scope, false),
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46DesignationFormat extends scalaxb.ElemNameParser[ExpansionProfileu46Designation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.Designation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46Designation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "include")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "exclude")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ExpansionProfileu46Designation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ExpansionProfileu46Include](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ExpansionProfileu46Exclude](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46Designation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46Designation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.include map { scalaxb.toXML[ExpansionProfileu46Include](_, Some(fhirUrl), Some("include"), __scope, false) } getOrElse {Nil},
        __obj.exclude map { scalaxb.toXML[ExpansionProfileu46Exclude](_, Some(fhirUrl), Some("exclude"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46IncludeFormat extends scalaxb.ElemNameParser[ExpansionProfileu46Include] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.Include")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46Include] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "designation")) ^^
      { case p1 ~ p2 ~ p3 =>
      ExpansionProfileu46Include(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[ExpansionProfileu46Designation1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46Include, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46Include, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.designation flatMap { scalaxb.toXML[ExpansionProfileu46Designation1](_, Some(fhirUrl), Some("designation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46Designation1Format extends scalaxb.ElemNameParser[ExpansionProfileu46Designation1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.Designation1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46Designation1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ExpansionProfileu46Designation1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46Designation1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46Designation1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.use map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46ExcludeFormat extends scalaxb.ElemNameParser[ExpansionProfileu46Exclude] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.Exclude")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46Exclude] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "designation")) ^^
      { case p1 ~ p2 ~ p3 =>
      ExpansionProfileu46Exclude(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[ExpansionProfileu46Designation2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46Exclude, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46Exclude, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.designation flatMap { scalaxb.toXML[ExpansionProfileu46Designation2](_, Some(fhirUrl), Some("designation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExpansionProfileu46Designation2Format extends scalaxb.ElemNameParser[ExpansionProfileu46Designation2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExpansionProfile.Designation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExpansionProfileu46Designation2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ExpansionProfileu46Designation2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExpansionProfileu46Designation2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExpansionProfileu46Designation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.use map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_SystemVersionProcessingModeu45listFormat = new DefaultComionkinmrshl7fhir_SystemVersionProcessingModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SystemVersionProcessingModeu45listFormat extends scalaxb.XMLFormat[SystemVersionProcessingModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SystemVersionProcessingModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("default")) => Default
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("check")) => Check
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("override")) => Override

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SystemVersionProcessingModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SystemVersionProcessingModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SystemVersionProcessingModeFormat extends scalaxb.ElemNameParser[SystemVersionProcessingMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SystemVersionProcessingMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SystemVersionProcessingMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SystemVersionProcessingMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SystemVersionProcessingModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SystemVersionProcessingMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SystemVersionProcessingMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitTypeFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "billablePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enterer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referral")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "facility")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claim")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claimResponse")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "related")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "originalPrescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payee")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "information")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "careTeam")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosis")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "precedence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "insurance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "accident")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "employmentImpacted")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hospitalization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "addItem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "totalCost")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unallocDeductable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "totalBenefit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "processNote")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "benefitBalance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 =>
      ExplanationOfBenefitType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ExplanationOfBenefitStatus](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ExplanationOfBenefitu46Related](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[ExplanationOfBenefitu46Payee](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ExplanationOfBenefitu46Information](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[ExplanationOfBenefitu46CareTeam](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ExplanationOfBenefitu46Diagnosis](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[ExplanationOfBenefitu46Procedure](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[ExplanationOfBenefitu46Insurance](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[ExplanationOfBenefitu46Accident](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[ExplanationOfBenefitu46Item](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[ExplanationOfBenefitu46AddItem](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[ExplanationOfBenefitu46Payment](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p46 map { scalaxb.fromXML[ExplanationOfBenefitu46ProcessNote](_, scalaxb.ElemName(node) :: stack) },
        p47 map { scalaxb.fromXML[ExplanationOfBenefitu46BenefitBalance](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ExplanationOfBenefitType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[ExplanationOfBenefitStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.subType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subType"), __scope, false) },
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.billablePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("billablePeriod"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.enterer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enterer"), __scope, false) } getOrElse {Nil},
        __obj.insurer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("insurer"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.referral map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referral"), __scope, false) } getOrElse {Nil},
        __obj.facility map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("facility"), __scope, false) } getOrElse {Nil},
        __obj.claim map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claim"), __scope, false) } getOrElse {Nil},
        __obj.claimResponse map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claimResponse"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.related flatMap { scalaxb.toXML[ExplanationOfBenefitu46Related](_, Some(fhirUrl), Some("related"), __scope, false) },
        __obj.prescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("prescription"), __scope, false) } getOrElse {Nil},
        __obj.originalPrescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("originalPrescription"), __scope, false) } getOrElse {Nil},
        __obj.payee map { scalaxb.toXML[ExplanationOfBenefitu46Payee](_, Some(fhirUrl), Some("payee"), __scope, false) } getOrElse {Nil},
        __obj.information flatMap { scalaxb.toXML[ExplanationOfBenefitu46Information](_, Some(fhirUrl), Some("information"), __scope, false) },
        __obj.careTeam flatMap { scalaxb.toXML[ExplanationOfBenefitu46CareTeam](_, Some(fhirUrl), Some("careTeam"), __scope, false) },
        __obj.diagnosis flatMap { scalaxb.toXML[ExplanationOfBenefitu46Diagnosis](_, Some(fhirUrl), Some("diagnosis"), __scope, false) },
        __obj.procedure flatMap { scalaxb.toXML[ExplanationOfBenefitu46Procedure](_, Some(fhirUrl), Some("procedure"), __scope, false) },
        __obj.precedence map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("precedence"), __scope, false) } getOrElse {Nil},
        __obj.insurance map { scalaxb.toXML[ExplanationOfBenefitu46Insurance](_, Some(fhirUrl), Some("insurance"), __scope, false) } getOrElse {Nil},
        __obj.accident map { scalaxb.toXML[ExplanationOfBenefitu46Accident](_, Some(fhirUrl), Some("accident"), __scope, false) } getOrElse {Nil},
        __obj.employmentImpacted map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("employmentImpacted"), __scope, false) } getOrElse {Nil},
        __obj.hospitalization map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("hospitalization"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[ExplanationOfBenefitu46Item](_, Some(fhirUrl), Some("item"), __scope, false) },
        __obj.addItem flatMap { scalaxb.toXML[ExplanationOfBenefitu46AddItem](_, Some(fhirUrl), Some("addItem"), __scope, false) },
        __obj.totalCost map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("totalCost"), __scope, false) } getOrElse {Nil},
        __obj.unallocDeductable map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unallocDeductable"), __scope, false) } getOrElse {Nil},
        __obj.totalBenefit map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("totalBenefit"), __scope, false) } getOrElse {Nil},
        __obj.payment map { scalaxb.toXML[ExplanationOfBenefitu46Payment](_, Some(fhirUrl), Some("payment"), __scope, false) } getOrElse {Nil},
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.processNote flatMap { scalaxb.toXML[ExplanationOfBenefitu46ProcessNote](_, Some(fhirUrl), Some("processNote"), __scope, false) },
        __obj.benefitBalance flatMap { scalaxb.toXML[ExplanationOfBenefitu46BenefitBalance](_, Some(fhirUrl), Some("benefitBalance"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46RelatedFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Related] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Related")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Related] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "claim")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ExplanationOfBenefitu46Related(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Related, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Related, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.claim map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("claim"), __scope, false) } getOrElse {Nil},
        __obj.relationship map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relationship"), __scope, false) } getOrElse {Nil},
        __obj.reference map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46PayeeFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Payee] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Payee")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Payee] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resourceType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "party")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ExplanationOfBenefitu46Payee(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Payee, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Payee, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.resourceType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("resourceType"), __scope, false) } getOrElse {Nil},
        __obj.party map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("party"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46InformationFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Information] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Information")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Information] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      ExplanationOfBenefitu46Information(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Information, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Information, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.timingDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("timingDate"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.reason map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46CareTeamFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46CareTeam] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.CareTeam")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46CareTeam] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responsible")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "qualification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      ExplanationOfBenefitu46CareTeam(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46CareTeam, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46CareTeam, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.provider, Some(fhirUrl), Some("provider"), __scope, false),
        __obj.responsible map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("responsible"), __scope, false) } getOrElse {Nil},
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        __obj.qualification map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("qualification"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46DiagnosisFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Diagnosis] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Diagnosis")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Diagnosis] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diagnosisCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diagnosisReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "packageCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      ExplanationOfBenefitu46Diagnosis(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Diagnosis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Diagnosis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.diagnosisCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("diagnosisCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.diagnosisReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("diagnosisReference"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.packageCode map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("packageCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ProcedureFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Procedure] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Procedure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Procedure] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "procedureCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "procedureReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ExplanationOfBenefitu46Procedure(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Procedure, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Procedure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.procedureCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("procedureCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.procedureReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("procedureReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46InsuranceFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Insurance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Insurance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Insurance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "coverage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "preAuthRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ExplanationOfBenefitu46Insurance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Insurance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Insurance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.coverage map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("coverage"), __scope, false) } getOrElse {Nil},
        __obj.preAuthRef flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("preAuthRef"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AccidentFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Accident] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Accident")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Accident] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ExplanationOfBenefitu46Accident(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Accident, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Accident, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.date map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.locationAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("locationAddress"), __scope, false) } getOrElse {Nil},
        __obj.locationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("locationReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ItemFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "careTeamLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "diagnosisLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedureLinkId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "informationLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "servicedPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "locationReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subSite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      ExplanationOfBenefitu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ExplanationOfBenefitu46Detail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        __obj.careTeamLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("careTeamLinkId"), __scope, false) },
        __obj.diagnosisLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("diagnosisLinkId"), __scope, false) },
        __obj.procedureLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("procedureLinkId"), __scope, false) },
        __obj.informationLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("informationLinkId"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.servicedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("servicedDate"), __scope, false) } getOrElse {Nil},
        __obj.servicedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("servicedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.locationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("locationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.locationAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("locationAddress"), __scope, false) } getOrElse {Nil},
        __obj.locationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("locationReference"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) },
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.subSite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subSite"), __scope, false) },
        __obj.encounter flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) },
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ExplanationOfBenefitu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[ExplanationOfBenefitu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AdjudicationFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Adjudication] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Adjudication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Adjudication] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ExplanationOfBenefitu46Adjudication(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Adjudication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Adjudication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46DetailFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      ExplanationOfBenefitu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ExplanationOfBenefitu46SubDetail](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) },
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ExplanationOfBenefitu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.subDetail flatMap { scalaxb.toXML[ExplanationOfBenefitu46SubDetail](_, Some(fhirUrl), Some("subDetail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46SubDetailFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46SubDetail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.SubDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46SubDetail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequence")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unitPrice")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "factor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "net")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "udi")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      ExplanationOfBenefitu46SubDetail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PositiveIntType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46SubDetail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46SubDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[PositiveIntType](__obj.sequence, Some(fhirUrl), Some("sequence"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.programCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("programCode"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.unitPrice map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("unitPrice"), __scope, false) } getOrElse {Nil},
        __obj.factor map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("factor"), __scope, false) } getOrElse {Nil},
        __obj.net map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("net"), __scope, false) } getOrElse {Nil},
        __obj.udi flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("udi"), __scope, false) },
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ExplanationOfBenefitu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46AddItemFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46AddItem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.AddItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46AddItem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fee")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      ExplanationOfBenefitu46AddItem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ExplanationOfBenefitu46Detail1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46AddItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46AddItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.sequenceLinkId flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("sequenceLinkId"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.fee map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("fee"), __scope, false) } getOrElse {Nil},
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ExplanationOfBenefitu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) },
        __obj.detail flatMap { scalaxb.toXML[ExplanationOfBenefitu46Detail1](_, Some(fhirUrl), Some("detail"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46Detail1Format extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Detail1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Detail1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Detail1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "revenue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "service")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fee")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "noteNumber")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "adjudication")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ExplanationOfBenefitu46Detail1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ExplanationOfBenefitu46Adjudication](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Detail1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Detail1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.revenue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("revenue"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.service map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("service"), __scope, false) } getOrElse {Nil},
        __obj.modifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.fee map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("fee"), __scope, false) } getOrElse {Nil},
        __obj.noteNumber flatMap { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("noteNumber"), __scope, false) },
        __obj.adjudication flatMap { scalaxb.toXML[ExplanationOfBenefitu46Adjudication](_, Some(fhirUrl), Some("adjudication"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46PaymentFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Payment] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Payment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Payment] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "adjustment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "adjustmentReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ExplanationOfBenefitu46Payment(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Payment, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Payment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.adjustment map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("adjustment"), __scope, false) } getOrElse {Nil},
        __obj.adjustmentReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("adjustmentReason"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46ProcessNoteFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46ProcessNote] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.ProcessNote")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46ProcessNote] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "number")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ExplanationOfBenefitu46ProcessNote(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46ProcessNote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46ProcessNote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.number map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("number"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46BenefitBalanceFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46BenefitBalance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.BenefitBalance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46BenefitBalance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subCategory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "excluded")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "network")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "unit")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "term")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "financial")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      ExplanationOfBenefitu46BenefitBalance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ExplanationOfBenefitu46Financial](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46BenefitBalance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46BenefitBalance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.category, Some(fhirUrl), Some("category"), __scope, false),
        __obj.subCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subCategory"), __scope, false) } getOrElse {Nil},
        __obj.excluded map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("excluded"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.network map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("network"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.term map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("term"), __scope, false) } getOrElse {Nil},
        __obj.financial flatMap { scalaxb.toXML[ExplanationOfBenefitu46Financial](_, Some(fhirUrl), Some("financial"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitu46FinancialFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitu46Financial] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefit.Financial")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitu46Financial] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allowedMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usedUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usedMoney")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ExplanationOfBenefitu46Financial(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitu46Financial, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitu46Financial, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.allowedUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("allowedUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.allowedString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("allowedString"), __scope, false) } getOrElse {Nil},
        __obj.allowedMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("allowedMoney"), __scope, false) } getOrElse {Nil},
        __obj.usedUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("usedUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.usedMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("usedMoney"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ExplanationOfBenefitStatusu45listFormat = new DefaultComionkinmrshl7fhir_ExplanationOfBenefitStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitStatusu45listFormat extends scalaxb.XMLFormat[ExplanationOfBenefitStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ExplanationOfBenefitStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue20
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue13
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue32

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ExplanationOfBenefitStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ExplanationOfBenefitStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ExplanationOfBenefitStatusFormat extends scalaxb.ElemNameParser[ExplanationOfBenefitStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExplanationOfBenefitStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExplanationOfBenefitStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ExplanationOfBenefitStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ExplanationOfBenefitStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExplanationOfBenefitStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExplanationOfBenefitStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_FamilyMemberHistoryTypeFormat extends scalaxb.ElemNameParser[FamilyMemberHistoryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FamilyMemberHistory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FamilyMemberHistoryType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDone")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDoneReason")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bornPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bornDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bornString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ageAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ageRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ageString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "estimatedAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedString")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "condition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 =>
      FamilyMemberHistoryType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[FamilyHistoryStatus](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p17, scalaxb.ElemName(node) :: stack),
        p18.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[FamilyMemberHistoryu46Condition](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: FamilyMemberHistoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        scalaxb.toXML[FamilyHistoryStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.notDone map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("notDone"), __scope, false) } getOrElse {Nil},
        __obj.notDoneReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("notDoneReason"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.relationship, Some(fhirUrl), Some("relationship"), __scope, false),
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.bornPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("bornPeriod"), __scope, false) } getOrElse {Nil},
        __obj.bornDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("bornDate"), __scope, false) } getOrElse {Nil},
        __obj.bornString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("bornString"), __scope, false) } getOrElse {Nil},
        __obj.ageAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("ageAge"), __scope, false) } getOrElse {Nil},
        __obj.ageRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("ageRange"), __scope, false) } getOrElse {Nil},
        __obj.ageString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("ageString"), __scope, false) } getOrElse {Nil},
        __obj.estimatedAge map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("estimatedAge"), __scope, false) } getOrElse {Nil},
        __obj.deceasedBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("deceasedBoolean"), __scope, false) } getOrElse {Nil},
        __obj.deceasedAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("deceasedAge"), __scope, false) } getOrElse {Nil},
        __obj.deceasedRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("deceasedRange"), __scope, false) } getOrElse {Nil},
        __obj.deceasedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("deceasedDate"), __scope, false) } getOrElse {Nil},
        __obj.deceasedString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("deceasedString"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.condition flatMap { scalaxb.toXML[FamilyMemberHistoryu46Condition](_, Some(fhirUrl), Some("condition"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_FamilyMemberHistoryu46ConditionFormat extends scalaxb.ElemNameParser[FamilyMemberHistoryu46Condition] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FamilyMemberHistory.Condition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FamilyMemberHistoryu46Condition] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onsetString")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      FamilyMemberHistoryu46Condition(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FamilyMemberHistoryu46Condition, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FamilyMemberHistoryu46Condition, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.onsetAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("onsetAge"), __scope, false) } getOrElse {Nil},
        __obj.onsetRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("onsetRange"), __scope, false) } getOrElse {Nil},
        __obj.onsetPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("onsetPeriod"), __scope, false) } getOrElse {Nil},
        __obj.onsetString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("onsetString"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_FamilyHistoryStatusu45listFormat = new DefaultComionkinmrshl7fhir_FamilyHistoryStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FamilyHistoryStatusu45listFormat extends scalaxb.XMLFormat[FamilyHistoryStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FamilyHistoryStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("partial")) => PartialValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue12
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue33
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("health-unknown")) => Healthu45unknown

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FamilyHistoryStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FamilyHistoryStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FamilyHistoryStatusFormat extends scalaxb.ElemNameParser[FamilyHistoryStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FamilyHistoryStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FamilyHistoryStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FamilyHistoryStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FamilyHistoryStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FamilyHistoryStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FamilyHistoryStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_FlagTypeFormat extends scalaxb.ElemNameParser[FlagType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Flag")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlagType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      FlagType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[FlagStatus](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: FlagType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[FlagStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_FlagStatusu45listFormat = new DefaultComionkinmrshl7fhir_FlagStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FlagStatusu45listFormat extends scalaxb.XMLFormat[FlagStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FlagStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue8

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FlagStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FlagStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FlagStatusFormat extends scalaxb.ElemNameParser[FlagStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FlagStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlagStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FlagStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FlagStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FlagStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FlagStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GoalTypeFormat extends scalaxb.ElemNameParser[GoalType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Goal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GoalType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "startDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "startCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "statusDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "statusReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expressedBy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "addresses")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "outcomeCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "outcomeReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      GoalType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[GoalStatus](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Goalu46Target](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: GoalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[GoalStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.priority map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.startDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("startDate"), __scope, false) } getOrElse {Nil},
        __obj.startCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("startCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.target map { scalaxb.toXML[Goalu46Target](_, Some(fhirUrl), Some("target"), __scope, false) } getOrElse {Nil},
        __obj.statusDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("statusDate"), __scope, false) } getOrElse {Nil},
        __obj.statusReason map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("statusReason"), __scope, false) } getOrElse {Nil},
        __obj.expressedBy map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("expressedBy"), __scope, false) } getOrElse {Nil},
        __obj.addresses flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("addresses"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.outcomeCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcomeCode"), __scope, false) },
        __obj.outcomeReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("outcomeReference"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Goalu46TargetFormat extends scalaxb.ElemNameParser[Goalu46Target] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Goal.Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Goalu46Target] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dueDuration")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Goalu46Target(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Goalu46Target, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Goalu46Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.measure map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("measure"), __scope, false) } getOrElse {Nil},
        __obj.detailQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("detailQuantity"), __scope, false) } getOrElse {Nil},
        __obj.detailRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("detailRange"), __scope, false) } getOrElse {Nil},
        __obj.detailCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("detailCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.dueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("dueDate"), __scope, false) } getOrElse {Nil},
        __obj.dueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("dueDuration"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_GoalStatusu45listFormat = new DefaultComionkinmrshl7fhir_GoalStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GoalStatusu45listFormat extends scalaxb.XMLFormat[GoalStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GoalStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => ProposedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accepted")) => Accepted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => PlannedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-target")) => Onu45target
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ahead-of-target")) => Aheadu45ofu45target
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("behind-target")) => Behindu45target
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sustaining")) => Sustaining
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("achieved")) => Achieved
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rejected")) => Rejected

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GoalStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GoalStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GoalStatusFormat extends scalaxb.ElemNameParser[GoalStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GoalStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GoalStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GoalStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GoalStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GoalStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GoalStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GraphDefinitionTypeFormat extends scalaxb.ElemNameParser[GraphDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GraphDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GraphDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      GraphDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p21, scalaxb.ElemName(node) :: stack),
        p22.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[GraphDefinitionu46Link](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: GraphDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ResourceTypeType](__obj.start, Some(fhirUrl), Some("start"), __scope, false),
        __obj.profile map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.link flatMap { scalaxb.toXML[GraphDefinitionu46Link](_, Some(fhirUrl), Some("link"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GraphDefinitionu46LinkFormat extends scalaxb.ElemNameParser[GraphDefinitionu46Link] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GraphDefinition.Link")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GraphDefinitionu46Link] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sliceName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "max")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      GraphDefinitionu46Link(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[GraphDefinitionu46Target](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GraphDefinitionu46Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GraphDefinitionu46Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.path, Some(fhirUrl), Some("path"), __scope, false),
        __obj.sliceName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("sliceName"), __scope, false) } getOrElse {Nil},
        __obj.min map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("min"), __scope, false) } getOrElse {Nil},
        __obj.max map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("max"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.target flatMap { scalaxb.toXML[GraphDefinitionu46Target](_, Some(fhirUrl), Some("target"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GraphDefinitionu46TargetFormat extends scalaxb.ElemNameParser[GraphDefinitionu46Target] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GraphDefinition.Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GraphDefinitionu46Target] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "compartment")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      GraphDefinitionu46Target(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[GraphDefinitionu46Compartment](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[GraphDefinitionu46Link](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GraphDefinitionu46Target, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GraphDefinitionu46Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ResourceTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.profile map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.compartment flatMap { scalaxb.toXML[GraphDefinitionu46Compartment](_, Some(fhirUrl), Some("compartment"), __scope, false) },
        __obj.link flatMap { scalaxb.toXML[GraphDefinitionu46Link](_, Some(fhirUrl), Some("link"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GraphDefinitionu46CompartmentFormat extends scalaxb.ElemNameParser[GraphDefinitionu46Compartment] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GraphDefinition.Compartment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GraphDefinitionu46Compartment] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "rule")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      GraphDefinitionu46Compartment(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CompartmentType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[GraphCompartmentRule](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GraphDefinitionu46Compartment, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GraphDefinitionu46Compartment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CompartmentType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[GraphCompartmentRule](__obj.rule, Some(fhirUrl), Some("rule"), __scope, false),
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_GraphCompartmentRuleu45listFormat = new DefaultComionkinmrshl7fhir_GraphCompartmentRuleu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GraphCompartmentRuleu45listFormat extends scalaxb.XMLFormat[GraphCompartmentRuleu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GraphCompartmentRuleu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("identical")) => Identical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("matching")) => Matching
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("different")) => Different
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("custom")) => Custom

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GraphCompartmentRuleu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GraphCompartmentRuleu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GraphCompartmentRuleFormat extends scalaxb.ElemNameParser[GraphCompartmentRule] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GraphCompartmentRule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GraphCompartmentRule] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GraphCompartmentRule(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GraphCompartmentRuleu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GraphCompartmentRule, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GraphCompartmentRule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GroupType2Format extends scalaxb.ElemNameParser[GroupType2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GroupType2] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actual")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "characteristic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "member")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      GroupType2(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[GroupType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[Groupu46Characteristic](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[Groupu46Member](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: GroupType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[GroupType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.actual, Some(fhirUrl), Some("actual"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.characteristic flatMap { scalaxb.toXML[Groupu46Characteristic](_, Some(fhirUrl), Some("characteristic"), __scope, false) },
        __obj.member flatMap { scalaxb.toXML[Groupu46Member](_, Some(fhirUrl), Some("member"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Groupu46CharacteristicFormat extends scalaxb.ElemNameParser[Groupu46Characteristic] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Group.Characteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Groupu46Characteristic] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "exclude")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      Groupu46Characteristic(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Groupu46Characteristic, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Groupu46Characteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BooleanTypeType](__obj.exclude, Some(fhirUrl), Some("exclude"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Groupu46MemberFormat extends scalaxb.ElemNameParser[Groupu46Member] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Group.Member")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Groupu46Member] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "entity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "inactive")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Groupu46Member(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Groupu46Member, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Groupu46Member, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.entity, Some(fhirUrl), Some("entity"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.inactive map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("inactive"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_GroupTypeu45listFormat = new DefaultComionkinmrshl7fhir_GroupTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GroupTypeu45listFormat extends scalaxb.XMLFormat[GroupTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GroupTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("person")) => PersonValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("animal")) => Animal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("practitioner")) => PractitionerValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("device")) => DeviceValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medication")) => MedicationValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("substance")) => SubstanceValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GroupTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GroupTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GroupTypeFormat extends scalaxb.ElemNameParser[GroupType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GroupType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GroupType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GroupTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GroupType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_GuidanceResponseTypeFormat extends scalaxb.ElemNameParser[GuidanceResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GuidanceResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GuidanceResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "module")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "evaluationMessage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outputParameters")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "result")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dataRequirement")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      GuidanceResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[GuidanceResponseStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: GuidanceResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.requestId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("requestId"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.module, Some(fhirUrl), Some("module"), __scope, false),
        scalaxb.toXML[GuidanceResponseStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil},
        __obj.reasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.reasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.evaluationMessage flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("evaluationMessage"), __scope, false) },
        __obj.outputParameters map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("outputParameters"), __scope, false) } getOrElse {Nil},
        __obj.result map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("result"), __scope, false) } getOrElse {Nil},
        __obj.dataRequirement flatMap { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("dataRequirement"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_GuidanceResponseStatusu45listFormat = new DefaultComionkinmrshl7fhir_GuidanceResponseStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GuidanceResponseStatusu45listFormat extends scalaxb.XMLFormat[GuidanceResponseStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GuidanceResponseStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("success")) => SuccessType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-requested")) => Datau45requested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("data-required")) => Datau45required
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("failure")) => FailureType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GuidanceResponseStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GuidanceResponseStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GuidanceResponseStatusFormat extends scalaxb.ElemNameParser[GuidanceResponseStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GuidanceResponseStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GuidanceResponseStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GuidanceResponseStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GuidanceResponseStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GuidanceResponseStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GuidanceResponseStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_HealthcareServiceTypeFormat extends scalaxb.ElemNameParser[HealthcareServiceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("HealthcareService")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[HealthcareServiceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "providedBy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "extraDetails")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "photo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "coverageArea")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "serviceProvisionCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eligibility")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eligibilityNote")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "programName")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "characteristic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referralMethod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "appointmentRequired")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "availableTime")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "notAvailable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availabilityExceptions")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      HealthcareServiceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[HealthcareServiceu46AvailableTime](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[HealthcareServiceu46NotAvailable](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: HealthcareServiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.providedBy map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("providedBy"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.specialty flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) },
        __obj.location flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.extraDetails map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("extraDetails"), __scope, false) } getOrElse {Nil},
        __obj.photo map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("photo"), __scope, false) } getOrElse {Nil},
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.coverageArea flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("coverageArea"), __scope, false) },
        __obj.serviceProvisionCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceProvisionCode"), __scope, false) },
        __obj.eligibility map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("eligibility"), __scope, false) } getOrElse {Nil},
        __obj.eligibilityNote map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("eligibilityNote"), __scope, false) } getOrElse {Nil},
        __obj.programName flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("programName"), __scope, false) },
        __obj.characteristic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("characteristic"), __scope, false) },
        __obj.referralMethod flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("referralMethod"), __scope, false) },
        __obj.appointmentRequired map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("appointmentRequired"), __scope, false) } getOrElse {Nil},
        __obj.availableTime flatMap { scalaxb.toXML[HealthcareServiceu46AvailableTime](_, Some(fhirUrl), Some("availableTime"), __scope, false) },
        __obj.notAvailable flatMap { scalaxb.toXML[HealthcareServiceu46NotAvailable](_, Some(fhirUrl), Some("notAvailable"), __scope, false) },
        __obj.availabilityExceptions map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("availabilityExceptions"), __scope, false) } getOrElse {Nil},
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_HealthcareServiceu46AvailableTimeFormat extends scalaxb.ElemNameParser[HealthcareServiceu46AvailableTime] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("HealthcareService.AvailableTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[HealthcareServiceu46AvailableTime] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "daysOfWeek")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allDay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availableStartTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availableEndTime")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      HealthcareServiceu46AvailableTime(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[DaysOfWeek](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: HealthcareServiceu46AvailableTime, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: HealthcareServiceu46AvailableTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.daysOfWeek flatMap { scalaxb.toXML[DaysOfWeek](_, Some(fhirUrl), Some("daysOfWeek"), __scope, false) },
        __obj.allDay map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("allDay"), __scope, false) } getOrElse {Nil},
        __obj.availableStartTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("availableStartTime"), __scope, false) } getOrElse {Nil},
        __obj.availableEndTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("availableEndTime"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_HealthcareServiceu46NotAvailableFormat extends scalaxb.ElemNameParser[HealthcareServiceu46NotAvailable] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("HealthcareService.NotAvailable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[HealthcareServiceu46NotAvailable] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "during")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      HealthcareServiceu46NotAvailable(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: HealthcareServiceu46NotAvailable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: HealthcareServiceu46NotAvailable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.during map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("during"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_DaysOfWeeku45listFormat = new DefaultComionkinmrshl7fhir_DaysOfWeeku45listFormat {}
  trait DefaultComionkinmrshl7fhir_DaysOfWeeku45listFormat extends scalaxb.XMLFormat[DaysOfWeeku45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DaysOfWeeku45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mon")) => Mon
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tue")) => Tue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wed")) => Wed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("thu")) => Thu
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fri")) => Fri
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sat")) => Sat
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sun")) => Sun

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DaysOfWeeku45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DaysOfWeeku45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DaysOfWeekFormat extends scalaxb.ElemNameParser[DaysOfWeek] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DaysOfWeek")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DaysOfWeek] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DaysOfWeek(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DaysOfWeeku45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DaysOfWeek, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DaysOfWeek, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingManifestTypeFormat extends scalaxb.ElemNameParser[ImagingManifestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingManifest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingManifestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoringTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "study")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      ImagingManifestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ImagingManifestu46Study](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ImagingManifestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.authoringTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoringTime"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.study flatMap { scalaxb.toXML[ImagingManifestu46Study](_, Some(fhirUrl), Some("study"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingManifestu46StudyFormat extends scalaxb.ElemNameParser[ImagingManifestu46Study] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingManifest.Study")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingManifestu46Study] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "imagingStudy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "series")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ImagingManifestu46Study(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ImagingManifestu46Series](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImagingManifestu46Study, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImagingManifestu46Study, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false),
        __obj.imagingStudy map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("imagingStudy"), __scope, false) } getOrElse {Nil},
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) },
        __obj.series flatMap { scalaxb.toXML[ImagingManifestu46Series](_, Some(fhirUrl), Some("series"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingManifestu46SeriesFormat extends scalaxb.ElemNameParser[ImagingManifestu46Series] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingManifest.Series")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingManifestu46Series] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "instance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ImagingManifestu46Series(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ImagingManifestu46Instance](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImagingManifestu46Series, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImagingManifestu46Series, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false),
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) },
        __obj.instance flatMap { scalaxb.toXML[ImagingManifestu46Instance](_, Some(fhirUrl), Some("instance"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingManifestu46InstanceFormat extends scalaxb.ElemNameParser[ImagingManifestu46Instance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingManifest.Instance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingManifestu46Instance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sopClass")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ImagingManifestu46Instance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[OidType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImagingManifestu46Instance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImagingManifestu46Instance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.sopClass, Some(fhirUrl), Some("sopClass"), __scope, false),
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ImagingStudyTypeFormat extends scalaxb.ElemNameParser[ImagingStudyType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingStudy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingStudyType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "accession")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availability")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modalityList")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "started")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referrer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "interpreter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "numberOfSeries")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "numberOfInstances")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedureReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "procedureCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "series")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      ImagingStudyType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[InstanceAvailability](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ImagingStudyu46Series](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ImagingStudyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false),
        __obj.accession map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("accession"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.availability map { scalaxb.toXML[InstanceAvailability](_, Some(fhirUrl), Some("availability"), __scope, false) } getOrElse {Nil},
        __obj.modalityList flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("modalityList"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.started map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("started"), __scope, false) } getOrElse {Nil},
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.referrer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referrer"), __scope, false) } getOrElse {Nil},
        __obj.interpreter flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("interpreter"), __scope, false) },
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) },
        __obj.numberOfSeries map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("numberOfSeries"), __scope, false) } getOrElse {Nil},
        __obj.numberOfInstances map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("numberOfInstances"), __scope, false) } getOrElse {Nil},
        __obj.procedureReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("procedureReference"), __scope, false) },
        __obj.procedureCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("procedureCode"), __scope, false) },
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.series flatMap { scalaxb.toXML[ImagingStudyu46Series](_, Some(fhirUrl), Some("series"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingStudyu46SeriesFormat extends scalaxb.ElemNameParser[ImagingStudyu46Series] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingStudy.Series")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingStudyu46Series] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "number")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "modality")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "numberOfInstances")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availability")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "laterality")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "started")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "instance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      ImagingStudyu46Series(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[InstanceAvailability](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ImagingStudyu46Instance](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImagingStudyu46Series, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImagingStudyu46Series, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false),
        __obj.number map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodingType](__obj.modality, Some(fhirUrl), Some("modality"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.numberOfInstances map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("numberOfInstances"), __scope, false) } getOrElse {Nil},
        __obj.availability map { scalaxb.toXML[InstanceAvailability](_, Some(fhirUrl), Some("availability"), __scope, false) } getOrElse {Nil},
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) },
        __obj.bodySite map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.laterality map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("laterality"), __scope, false) } getOrElse {Nil},
        __obj.started map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("started"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.instance flatMap { scalaxb.toXML[ImagingStudyu46Instance](_, Some(fhirUrl), Some("instance"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImagingStudyu46InstanceFormat extends scalaxb.ElemNameParser[ImagingStudyu46Instance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImagingStudy.Instance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImagingStudyu46Instance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "number")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sopClass")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ImagingStudyu46Instance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[OidType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImagingStudyu46Instance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImagingStudyu46Instance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[OidType](__obj.uid, Some(fhirUrl), Some("uid"), __scope, false),
        __obj.number map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[OidType](__obj.sopClass, Some(fhirUrl), Some("sopClass"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_InstanceAvailabilityu45listFormat = new DefaultComionkinmrshl7fhir_InstanceAvailabilityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_InstanceAvailabilityu45listFormat extends scalaxb.XMLFormat[InstanceAvailabilityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): InstanceAvailabilityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ONLINE")) => ONLINE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OFFLINE")) => OFFLINE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NEARLINE")) => NEARLINE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UNAVAILABLE")) => UNAVAILABLE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InstanceAvailabilityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: InstanceAvailabilityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_InstanceAvailabilityFormat extends scalaxb.ElemNameParser[InstanceAvailability] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("InstanceAvailability")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InstanceAvailability] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      InstanceAvailability(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[InstanceAvailabilityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: InstanceAvailability, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: InstanceAvailability, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImmunizationTypeFormat extends scalaxb.ElemNameParser[ImmunizationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Immunization")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "notGiven")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "vaccineCode")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "primarySource")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reportOrigin")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "manufacturer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lotNumber")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expirationDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "site")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "route")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseQuantity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "practitioner")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "explanation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reaction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "vaccinationProtocol")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 =>
      ImmunizationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ImmunizationStatusCodes](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeableConceptType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[Immunizationu46Practitioner](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Immunizationu46Explanation](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[Immunizationu46Reaction](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[Immunizationu46VaccinationProtocol](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ImmunizationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[ImmunizationStatusCodes](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.notGiven, Some(fhirUrl), Some("notGiven"), __scope, false),
        scalaxb.toXML[CodeableConceptType](__obj.vaccineCode, Some(fhirUrl), Some("vaccineCode"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BooleanTypeType](__obj.primarySource, Some(fhirUrl), Some("primarySource"), __scope, false),
        __obj.reportOrigin map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reportOrigin"), __scope, false) } getOrElse {Nil},
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.manufacturer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("manufacturer"), __scope, false) } getOrElse {Nil},
        __obj.lotNumber map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("lotNumber"), __scope, false) } getOrElse {Nil},
        __obj.expirationDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("expirationDate"), __scope, false) } getOrElse {Nil},
        __obj.site map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("site"), __scope, false) } getOrElse {Nil},
        __obj.route map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("route"), __scope, false) } getOrElse {Nil},
        __obj.doseQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("doseQuantity"), __scope, false) } getOrElse {Nil},
        __obj.practitioner flatMap { scalaxb.toXML[Immunizationu46Practitioner](_, Some(fhirUrl), Some("practitioner"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.explanation map { scalaxb.toXML[Immunizationu46Explanation](_, Some(fhirUrl), Some("explanation"), __scope, false) } getOrElse {Nil},
        __obj.reaction flatMap { scalaxb.toXML[Immunizationu46Reaction](_, Some(fhirUrl), Some("reaction"), __scope, false) },
        __obj.vaccinationProtocol flatMap { scalaxb.toXML[Immunizationu46VaccinationProtocol](_, Some(fhirUrl), Some("vaccinationProtocol"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Immunizationu46PractitionerFormat extends scalaxb.ElemNameParser[Immunizationu46Practitioner] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Immunization.Practitioner")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Immunizationu46Practitioner] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Immunizationu46Practitioner(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Immunizationu46Practitioner, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Immunizationu46Practitioner, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Immunizationu46ExplanationFormat extends scalaxb.ElemNameParser[Immunizationu46Explanation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Immunization.Explanation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Immunizationu46Explanation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonNotGiven")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Immunizationu46Explanation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Immunizationu46Explanation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Immunizationu46Explanation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.reasonNotGiven flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonNotGiven"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Immunizationu46ReactionFormat extends scalaxb.ElemNameParser[Immunizationu46Reaction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Immunization.Reaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Immunizationu46Reaction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detail")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reported")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Immunizationu46Reaction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Immunizationu46Reaction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Immunizationu46Reaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("detail"), __scope, false) } getOrElse {Nil},
        __obj.reported map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("reported"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Immunizationu46VaccinationProtocolFormat extends scalaxb.ElemNameParser[Immunizationu46VaccinationProtocol] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Immunization.VaccinationProtocol")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Immunizationu46VaccinationProtocol] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseSequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "series")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "seriesDoses")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "targetDisease")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "doseStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseStatusReason")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      Immunizationu46VaccinationProtocol(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Immunizationu46VaccinationProtocol, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Immunizationu46VaccinationProtocol, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.doseSequence map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("doseSequence"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.authority map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authority"), __scope, false) } getOrElse {Nil},
        __obj.series map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("series"), __scope, false) } getOrElse {Nil},
        __obj.seriesDoses map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("seriesDoses"), __scope, false) } getOrElse {Nil},
        __obj.targetDisease flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("targetDisease"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.doseStatus, Some(fhirUrl), Some("doseStatus"), __scope, false),
        __obj.doseStatusReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("doseStatusReason"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ImmunizationStatusCodesu45listFormat = new DefaultComionkinmrshl7fhir_ImmunizationStatusCodesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ImmunizationStatusCodesu45listFormat extends scalaxb.XMLFormat[ImmunizationStatusCodesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ImmunizationStatusCodesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue13
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue34

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ImmunizationStatusCodesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ImmunizationStatusCodesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ImmunizationStatusCodesFormat extends scalaxb.ElemNameParser[ImmunizationStatusCodes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImmunizationStatusCodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationStatusCodes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ImmunizationStatusCodes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ImmunizationStatusCodesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImmunizationStatusCodes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImmunizationStatusCodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImmunizationRecommendationTypeFormat extends scalaxb.ElemNameParser[ImmunizationRecommendationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImmunizationRecommendation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationRecommendationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recommendation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      ImmunizationRecommendationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[ImmunizationRecommendationu46Recommendation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ImmunizationRecommendationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.recommendation flatMap { scalaxb.toXML[ImmunizationRecommendationu46Recommendation](_, Some(fhirUrl), Some("recommendation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46RecommendationFormat extends scalaxb.ElemNameParser[ImmunizationRecommendationu46Recommendation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImmunizationRecommendation.Recommendation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationRecommendationu46Recommendation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "vaccineCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetDisease")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseNumber")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "forecastStatus")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dateCriterion")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "protocol")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingImmunization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingPatientInformation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      ImmunizationRecommendationu46Recommendation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateTimeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p7, scalaxb.ElemName(node) :: stack),
        p8 map { scalaxb.fromXML[ImmunizationRecommendationu46DateCriterion](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[ImmunizationRecommendationu46Protocol](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImmunizationRecommendationu46Recommendation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImmunizationRecommendationu46Recommendation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DateTimeType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.vaccineCode map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("vaccineCode"), __scope, false) } getOrElse {Nil},
        __obj.targetDisease map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("targetDisease"), __scope, false) } getOrElse {Nil},
        __obj.doseNumber map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("doseNumber"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.forecastStatus, Some(fhirUrl), Some("forecastStatus"), __scope, false),
        __obj.dateCriterion flatMap { scalaxb.toXML[ImmunizationRecommendationu46DateCriterion](_, Some(fhirUrl), Some("dateCriterion"), __scope, false) },
        __obj.protocol map { scalaxb.toXML[ImmunizationRecommendationu46Protocol](_, Some(fhirUrl), Some("protocol"), __scope, false) } getOrElse {Nil},
        __obj.supportingImmunization flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingImmunization"), __scope, false) },
        __obj.supportingPatientInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingPatientInformation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46DateCriterionFormat extends scalaxb.ElemNameParser[ImmunizationRecommendationu46DateCriterion] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImmunizationRecommendation.DateCriterion")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationRecommendationu46DateCriterion] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ImmunizationRecommendationu46DateCriterion(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DateTimeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImmunizationRecommendationu46DateCriterion, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImmunizationRecommendationu46DateCriterion, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[DateTimeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ImmunizationRecommendationu46ProtocolFormat extends scalaxb.ElemNameParser[ImmunizationRecommendationu46Protocol] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImmunizationRecommendation.Protocol")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImmunizationRecommendationu46Protocol] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doseSequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "series")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ImmunizationRecommendationu46Protocol(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImmunizationRecommendationu46Protocol, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImmunizationRecommendationu46Protocol, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.doseSequence map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("doseSequence"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.authority map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authority"), __scope, false) } getOrElse {Nil},
        __obj.series map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("series"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideTypeFormat extends scalaxb.ElemNameParser[ImplementationGuideType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fhirVersion")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dependency")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "package")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "global")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "page")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      ImplementationGuideType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ImplementationGuideu46Dependency](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ImplementationGuideu46Package](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[ImplementationGuideu46Global](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ImplementationGuideu46Page](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ImplementationGuideType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.fhirVersion map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("fhirVersion"), __scope, false) } getOrElse {Nil},
        __obj.dependency flatMap { scalaxb.toXML[ImplementationGuideu46Dependency](_, Some(fhirUrl), Some("dependency"), __scope, false) },
        __obj.packageValue flatMap { scalaxb.toXML[ImplementationGuideu46Package](_, Some(fhirUrl), Some("package"), __scope, false) },
        __obj.global flatMap { scalaxb.toXML[ImplementationGuideu46Global](_, Some(fhirUrl), Some("global"), __scope, false) },
        __obj.binary flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("binary"), __scope, false) },
        __obj.page map { scalaxb.toXML[ImplementationGuideu46Page](_, Some(fhirUrl), Some("page"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideu46DependencyFormat extends scalaxb.ElemNameParser[ImplementationGuideu46Dependency] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide.Dependency")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideu46Dependency] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uri")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ImplementationGuideu46Dependency(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[GuideDependencyType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UriType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImplementationGuideu46Dependency, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImplementationGuideu46Dependency, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[GuideDependencyType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[UriType](__obj.uri, Some(fhirUrl), Some("uri"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideu46PackageFormat extends scalaxb.ElemNameParser[ImplementationGuideu46Package] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide.Package")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideu46Package] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "resource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ImplementationGuideu46Package(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ImplementationGuideu46Resource](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImplementationGuideu46Package, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImplementationGuideu46Package, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.resource flatMap { scalaxb.toXML[ImplementationGuideu46Resource](_, Some(fhirUrl), Some("resource"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideu46ResourceFormat extends scalaxb.ElemNameParser[ImplementationGuideu46Resource] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide.Resource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideu46Resource] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "example")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "acronym")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "exampleFor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ImplementationGuideu46Resource(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImplementationGuideu46Resource, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImplementationGuideu46Resource, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[BooleanTypeType](__obj.example, Some(fhirUrl), Some("example"), __scope, false),
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.acronym map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("acronym"), __scope, false) } getOrElse {Nil},
        __obj.sourceUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("sourceUri"), __scope, false) } getOrElse {Nil},
        __obj.sourceReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sourceReference"), __scope, false) } getOrElse {Nil},
        __obj.exampleFor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("exampleFor"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideu46GlobalFormat extends scalaxb.ElemNameParser[ImplementationGuideu46Global] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide.Global")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideu46Global] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "profile")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ImplementationGuideu46Global(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImplementationGuideu46Global, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImplementationGuideu46Global, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ResourceTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.profile, Some(fhirUrl), Some("profile"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ImplementationGuideu46PageFormat extends scalaxb.ElemNameParser[ImplementationGuideu46Page] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ImplementationGuide.Page")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ImplementationGuideu46Page] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "package")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "format")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "page")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ImplementationGuideu46Page(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[GuidePageKind](p5, scalaxb.ElemName(node) :: stack),
        p6 map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ImplementationGuideu46Page](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ImplementationGuideu46Page, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ImplementationGuideu46Page, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.source, Some(fhirUrl), Some("source"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.title, Some(fhirUrl), Some("title"), __scope, false),
        scalaxb.toXML[GuidePageKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        __obj.typeValue flatMap { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.packageValue flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("package"), __scope, false) },
        __obj.format map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("format"), __scope, false) } getOrElse {Nil},
        __obj.page flatMap { scalaxb.toXML[ImplementationGuideu46Page](_, Some(fhirUrl), Some("page"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_GuideDependencyTypeu45listFormat = new DefaultComionkinmrshl7fhir_GuideDependencyTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GuideDependencyTypeu45listFormat extends scalaxb.XMLFormat[GuideDependencyTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GuideDependencyTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reference")) => ReferenceValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inclusion")) => Inclusion

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GuideDependencyTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GuideDependencyTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GuideDependencyTypeFormat extends scalaxb.ElemNameParser[GuideDependencyType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GuideDependencyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GuideDependencyType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GuideDependencyType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GuideDependencyTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GuideDependencyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GuideDependencyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_GuidePageKindu45listFormat = new DefaultComionkinmrshl7fhir_GuidePageKindu45listFormat {}
  trait DefaultComionkinmrshl7fhir_GuidePageKindu45listFormat extends scalaxb.XMLFormat[GuidePageKindu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): GuidePageKindu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("page")) => Page
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("example")) => ExampleValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("list")) => ListTypeValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("include")) => IncludeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("directory")) => Directory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dictionary")) => Dictionary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toc")) => Toc
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resource")) => ResourceValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GuidePageKindu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: GuidePageKindu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_GuidePageKindFormat extends scalaxb.ElemNameParser[GuidePageKind] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("GuidePageKind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[GuidePageKind] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      GuidePageKind(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[GuidePageKindu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: GuidePageKind, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GuidePageKind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_LibraryTypeFormat extends scalaxb.ElemNameParser[LibraryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Library")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LibraryType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contributor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dataRequirement")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "content")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 =>
      LibraryType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ContributorType2](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ParameterDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: LibraryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.contributor flatMap { scalaxb.toXML[ContributorType2](_, Some(fhirUrl), Some("contributor"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.parameter flatMap { scalaxb.toXML[ParameterDefinitionType](_, Some(fhirUrl), Some("parameter"), __scope, false) },
        __obj.dataRequirement flatMap { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("dataRequirement"), __scope, false) },
        __obj.content flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("content"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_LinkageTypeFormat extends scalaxb.ElemNameParser[LinkageType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Linkage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LinkageType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      LinkageType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[Linkageu46Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: LinkageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[Linkageu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Linkageu46ItemFormat extends scalaxb.ElemNameParser[Linkageu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Linkage.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Linkageu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "resource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Linkageu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[LinkageTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Linkageu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Linkageu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[LinkageTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.resource, Some(fhirUrl), Some("resource"), __scope, false))

  }

  def buildComionkinmrshl7fhir_LinkageTypeu45listFormat = new DefaultComionkinmrshl7fhir_LinkageTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_LinkageTypeu45listFormat extends scalaxb.XMLFormat[LinkageTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): LinkageTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("source")) => SourceValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("alternate")) => Alternate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("historical")) => Historical

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LinkageTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: LinkageTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_LinkageTypeTypeFormat extends scalaxb.ElemNameParser[LinkageTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("LinkageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LinkageTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      LinkageTypeType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[LinkageTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: LinkageTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LinkageTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ListTypeTypeFormat extends scalaxb.ElemNameParser[ListTypeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("List")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ListTypeType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "orderedBy")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "entry")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "emptyReason")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      ListTypeType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ListStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ListMode](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[Listu46Entry](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ListTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[ListStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[ListMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.orderedBy map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("orderedBy"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.entry flatMap { scalaxb.toXML[Listu46Entry](_, Some(fhirUrl), Some("entry"), __scope, false) },
        __obj.emptyReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("emptyReason"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Listu46EntryFormat extends scalaxb.ElemNameParser[Listu46Entry] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("List.Entry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Listu46Entry] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "flag")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deleted")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Listu46Entry(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Listu46Entry, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Listu46Entry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.flag map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("flag"), __scope, false) } getOrElse {Nil},
        __obj.deleted map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("deleted"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.item, Some(fhirUrl), Some("item"), __scope, false))

  }

  def buildComionkinmrshl7fhir_ListStatusu45listFormat = new DefaultComionkinmrshl7fhir_ListStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ListStatusu45listFormat extends scalaxb.XMLFormat[ListStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ListStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("current")) => Current
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("retired")) => Retired
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ListStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ListStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ListStatusFormat extends scalaxb.ElemNameParser[ListStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ListStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ListStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ListStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ListStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ListStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ListStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_LocationTypeFormat extends scalaxb.ElemNameParser[LocationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Location")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LocationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operationalStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "alias")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "physicalType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "position")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      LocationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[LocationStatus](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[LocationMode](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Locationu46Position](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: LocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[LocationStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.operationalStatus map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("operationalStatus"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.alias flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("alias"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.mode map { scalaxb.toXML[LocationMode](_, Some(fhirUrl), Some("mode"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.address map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) } getOrElse {Nil},
        __obj.physicalType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("physicalType"), __scope, false) } getOrElse {Nil},
        __obj.position map { scalaxb.toXML[Locationu46Position](_, Some(fhirUrl), Some("position"), __scope, false) } getOrElse {Nil},
        __obj.managingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.partOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) } getOrElse {Nil},
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Locationu46PositionFormat extends scalaxb.ElemNameParser[Locationu46Position] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Location.Position")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Locationu46Position] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "longitude")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "latitude")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "altitude")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Locationu46Position(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DecimalType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DecimalType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Locationu46Position, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Locationu46Position, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[DecimalType](__obj.longitude, Some(fhirUrl), Some("longitude"), __scope, false),
        scalaxb.toXML[DecimalType](__obj.latitude, Some(fhirUrl), Some("latitude"), __scope, false),
        __obj.altitude map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("altitude"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_LocationModeu45listFormat = new DefaultComionkinmrshl7fhir_LocationModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_LocationModeu45listFormat extends scalaxb.XMLFormat[LocationModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): LocationModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instance")) => Instance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("kind")) => Kind

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LocationModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: LocationModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_LocationModeFormat extends scalaxb.ElemNameParser[LocationMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("LocationMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LocationMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      LocationMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[LocationModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: LocationMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LocationMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_LocationStatusu45listFormat = new DefaultComionkinmrshl7fhir_LocationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_LocationStatusu45listFormat extends scalaxb.XMLFormat[LocationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): LocationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => Inactive

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LocationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: LocationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_LocationStatusFormat extends scalaxb.ElemNameParser[LocationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("LocationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LocationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      LocationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[LocationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: LocationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LocationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MeasureTypeFormat extends scalaxb.ElemNameParser[MeasureType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Measure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contributor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "library")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disclaimer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "scoring")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compositeScoring")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "riskAdjustment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateAggregation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rationale")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "clinicalRecommendationStatement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "improvementNotation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "guidance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "set")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "group")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supplementalData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 =>
      MeasureType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ContributorType2](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p41 map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p44 map { scalaxb.fromXML[Measureu46Group](_, scalaxb.ElemName(node) :: stack) },
        p45 map { scalaxb.fromXML[Measureu46SupplementalData](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MeasureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.contributor flatMap { scalaxb.toXML[ContributorType2](_, Some(fhirUrl), Some("contributor"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.library flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("library"), __scope, false) },
        __obj.disclaimer map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("disclaimer"), __scope, false) } getOrElse {Nil},
        __obj.scoring map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("scoring"), __scope, false) } getOrElse {Nil},
        __obj.compositeScoring map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("compositeScoring"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.riskAdjustment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("riskAdjustment"), __scope, false) } getOrElse {Nil},
        __obj.rateAggregation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("rateAggregation"), __scope, false) } getOrElse {Nil},
        __obj.rationale map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("rationale"), __scope, false) } getOrElse {Nil},
        __obj.clinicalRecommendationStatement map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("clinicalRecommendationStatement"), __scope, false) } getOrElse {Nil},
        __obj.improvementNotation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("improvementNotation"), __scope, false) } getOrElse {Nil},
        __obj.definition flatMap { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.guidance map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("guidance"), __scope, false) } getOrElse {Nil},
        __obj.set map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("set"), __scope, false) } getOrElse {Nil},
        __obj.group flatMap { scalaxb.toXML[Measureu46Group](_, Some(fhirUrl), Some("group"), __scope, false) },
        __obj.supplementalData flatMap { scalaxb.toXML[Measureu46SupplementalData](_, Some(fhirUrl), Some("supplementalData"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Measureu46GroupFormat extends scalaxb.ElemNameParser[Measureu46Group] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Measure.Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Measureu46Group] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "population")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "stratifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Measureu46Group(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdentifierType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[Measureu46Population](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[Measureu46Stratifier](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Measureu46Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Measureu46Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdentifierType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.population flatMap { scalaxb.toXML[Measureu46Population](_, Some(fhirUrl), Some("population"), __scope, false) },
        __obj.stratifier flatMap { scalaxb.toXML[Measureu46Stratifier](_, Some(fhirUrl), Some("stratifier"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Measureu46PopulationFormat extends scalaxb.ElemNameParser[Measureu46Population] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Measure.Population")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Measureu46Population] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "criteria")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Measureu46Population(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p7, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Measureu46Population, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Measureu46Population, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.criteria, Some(fhirUrl), Some("criteria"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Measureu46StratifierFormat extends scalaxb.ElemNameParser[Measureu46Stratifier] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Measure.Stratifier")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Measureu46Stratifier] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "criteria")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Measureu46Stratifier(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Measureu46Stratifier, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Measureu46Stratifier, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.criteria map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("criteria"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Measureu46SupplementalDataFormat extends scalaxb.ElemNameParser[Measureu46SupplementalData] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Measure.SupplementalData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Measureu46SupplementalData] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "criteria")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Measureu46SupplementalData(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Measureu46SupplementalData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Measureu46SupplementalData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.usage flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("usage"), __scope, false) },
        __obj.criteria map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("criteria"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportType2Format extends scalaxb.ElemNameParser[MeasureReportType2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportType2] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "measure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reportingOrganization")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "group")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "evaluatedResources")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      MeasureReportType2(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MeasureReportStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[MeasureReportType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PeriodType](p16, scalaxb.ElemName(node) :: stack),
        p17 map { scalaxb.fromXML[MeasureReportu46Group](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MeasureReportType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[MeasureReportStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[MeasureReportType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.measure, Some(fhirUrl), Some("measure"), __scope, false),
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.reportingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reportingOrganization"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PeriodType](__obj.period, Some(fhirUrl), Some("period"), __scope, false),
        __obj.group flatMap { scalaxb.toXML[MeasureReportu46Group](_, Some(fhirUrl), Some("group"), __scope, false) },
        __obj.evaluatedResources map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("evaluatedResources"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportu46GroupFormat extends scalaxb.ElemNameParser[MeasureReportu46Group] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport.Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportu46Group] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "population")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measureScore")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "stratifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MeasureReportu46Group(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdentifierType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[MeasureReportu46Population](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[MeasureReportu46Stratifier](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportu46Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportu46Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdentifierType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        __obj.population flatMap { scalaxb.toXML[MeasureReportu46Population](_, Some(fhirUrl), Some("population"), __scope, false) },
        __obj.measureScore map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("measureScore"), __scope, false) } getOrElse {Nil},
        __obj.stratifier flatMap { scalaxb.toXML[MeasureReportu46Stratifier](_, Some(fhirUrl), Some("stratifier"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportu46PopulationFormat extends scalaxb.ElemNameParser[MeasureReportu46Population] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport.Population")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportu46Population] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "count")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patients")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MeasureReportu46Population(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportu46Population, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportu46Population, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.count map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("count"), __scope, false) } getOrElse {Nil},
        __obj.patients map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patients"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportu46StratifierFormat extends scalaxb.ElemNameParser[MeasureReportu46Stratifier] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport.Stratifier")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportu46Stratifier] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "stratum")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MeasureReportu46Stratifier(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[MeasureReportu46Stratum](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportu46Stratifier, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportu46Stratifier, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.stratum flatMap { scalaxb.toXML[MeasureReportu46Stratum](_, Some(fhirUrl), Some("stratum"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportu46StratumFormat extends scalaxb.ElemNameParser[MeasureReportu46Stratum] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport.Stratum")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportu46Stratum] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "population")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measureScore")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      MeasureReportu46Stratum(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[MeasureReportu46Population1](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportu46Stratum, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportu46Stratum, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false),
        __obj.population flatMap { scalaxb.toXML[MeasureReportu46Population1](_, Some(fhirUrl), Some("population"), __scope, false) },
        __obj.measureScore map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("measureScore"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MeasureReportu46Population1Format extends scalaxb.ElemNameParser[MeasureReportu46Population1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReport.Population1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportu46Population1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "count")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patients")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MeasureReportu46Population1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportu46Population1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportu46Population1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.count map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("count"), __scope, false) } getOrElse {Nil},
        __obj.patients map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patients"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_MeasureReportStatusu45listFormat = new DefaultComionkinmrshl7fhir_MeasureReportStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MeasureReportStatusu45listFormat extends scalaxb.XMLFormat[MeasureReportStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MeasureReportStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("complete")) => CompleteValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pending")) => PendingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MeasureReportStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MeasureReportStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MeasureReportStatusFormat extends scalaxb.ElemNameParser[MeasureReportStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReportStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MeasureReportStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MeasureReportStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MeasureReportTypeu45listFormat = new DefaultComionkinmrshl7fhir_MeasureReportTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MeasureReportTypeu45listFormat extends scalaxb.XMLFormat[MeasureReportTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MeasureReportTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("individual")) => Individual
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patient-list")) => Patientu45list
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("summary")) => Summary

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MeasureReportTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MeasureReportTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MeasureReportTypeFormat extends scalaxb.ElemNameParser[MeasureReportType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MeasureReportType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MeasureReportType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MeasureReportType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MeasureReportTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MeasureReportType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MeasureReportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MediaTypeFormat extends scalaxb.ElemNameParser[MediaType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Media")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MediaType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subtype")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "view")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operator")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "device")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "height")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "width")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "frames")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "duration")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "content")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      MediaType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DigitalMediaType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[AttachmentType](p26, scalaxb.ElemName(node) :: stack),
        p27 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MediaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        scalaxb.toXML[DigitalMediaType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.subtype map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("subtype"), __scope, false) } getOrElse {Nil},
        __obj.view map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("view"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.operator map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("operator"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.device map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("device"), __scope, false) } getOrElse {Nil},
        __obj.height map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("height"), __scope, false) } getOrElse {Nil},
        __obj.width map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("width"), __scope, false) } getOrElse {Nil},
        __obj.frames map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("frames"), __scope, false) } getOrElse {Nil},
        __obj.duration map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("duration"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[AttachmentType](__obj.content, Some(fhirUrl), Some("content"), __scope, false),
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_DigitalMediaTypeu45listFormat = new DefaultComionkinmrshl7fhir_DigitalMediaTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_DigitalMediaTypeu45listFormat extends scalaxb.XMLFormat[DigitalMediaTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DigitalMediaTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("photo")) => Photo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("video")) => Video
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("audio")) => Audio

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DigitalMediaTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DigitalMediaTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_DigitalMediaTypeFormat extends scalaxb.ElemNameParser[DigitalMediaType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("DigitalMediaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DigitalMediaType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      DigitalMediaType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[DigitalMediaTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: DigitalMediaType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DigitalMediaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationTypeFormat extends scalaxb.ElemNameParser[MedicationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Medication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "isBrand")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "isOverTheCounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "manufacturer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "ingredient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "package")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "image")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      MedicationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[MedicationStatus](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[Medicationu46Ingredient](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Medicationu46Package](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MedicationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[MedicationStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.isBrand map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("isBrand"), __scope, false) } getOrElse {Nil},
        __obj.isOverTheCounter map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("isOverTheCounter"), __scope, false) } getOrElse {Nil},
        __obj.manufacturer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("manufacturer"), __scope, false) } getOrElse {Nil},
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.ingredient flatMap { scalaxb.toXML[Medicationu46Ingredient](_, Some(fhirUrl), Some("ingredient"), __scope, false) },
        __obj.packageValue map { scalaxb.toXML[Medicationu46Package](_, Some(fhirUrl), Some("package"), __scope, false) } getOrElse {Nil},
        __obj.image flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("image"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Medicationu46IngredientFormat extends scalaxb.ElemNameParser[Medicationu46Ingredient] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Medication.Ingredient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Medicationu46Ingredient] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "isActive")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Medicationu46Ingredient(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Medicationu46Ingredient, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Medicationu46Ingredient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.itemCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("itemCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.itemReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("itemReference"), __scope, false) } getOrElse {Nil},
        __obj.isActive map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("isActive"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Medicationu46PackageFormat extends scalaxb.ElemNameParser[Medicationu46Package] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Medication.Package")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Medicationu46Package] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "container")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "content")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "batch")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Medicationu46Package(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[Medicationu46Content](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[Medicationu46Batch](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Medicationu46Package, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Medicationu46Package, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.container map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("container"), __scope, false) } getOrElse {Nil},
        __obj.content flatMap { scalaxb.toXML[Medicationu46Content](_, Some(fhirUrl), Some("content"), __scope, false) },
        __obj.batch flatMap { scalaxb.toXML[Medicationu46Batch](_, Some(fhirUrl), Some("batch"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Medicationu46ContentFormat extends scalaxb.ElemNameParser[Medicationu46Content] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Medication.Content")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Medicationu46Content] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Medicationu46Content(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Medicationu46Content, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Medicationu46Content, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.itemCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("itemCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.itemReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("itemReference"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Medicationu46BatchFormat extends scalaxb.ElemNameParser[Medicationu46Batch] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Medication.Batch")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Medicationu46Batch] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lotNumber")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expirationDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Medicationu46Batch(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Medicationu46Batch, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Medicationu46Batch, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.lotNumber map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("lotNumber"), __scope, false) } getOrElse {Nil},
        __obj.expirationDate map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("expirationDate"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_MedicationStatusu45listFormat = new DefaultComionkinmrshl7fhir_MedicationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationStatusu45listFormat extends scalaxb.XMLFormat[MedicationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue21
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue35

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationStatusFormat extends scalaxb.ElemNameParser[MedicationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationAdministrationTypeFormat extends scalaxb.ElemNameParser[MedicationAdministrationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationAdministration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationAdministrationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationReference")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInformation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notGiven")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonNotGiven")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prescription")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "device")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dosage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "eventHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 =>
      MedicationAdministrationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MedicationAdministrationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[MedicationAdministrationu46Performer](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MedicationAdministrationu46Dosage](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MedicationAdministrationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[MedicationAdministrationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.medicationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medicationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.medicationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("medicationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.supportingInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInformation"), __scope, false) },
        __obj.effectiveDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveDateTime"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[MedicationAdministrationu46Performer](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.notGiven map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("notGiven"), __scope, false) } getOrElse {Nil},
        __obj.reasonNotGiven flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonNotGiven"), __scope, false) },
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.prescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("prescription"), __scope, false) } getOrElse {Nil},
        __obj.device flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("device"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.dosage map { scalaxb.toXML[MedicationAdministrationu46Dosage](_, Some(fhirUrl), Some("dosage"), __scope, false) } getOrElse {Nil},
        __obj.eventHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("eventHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationAdministrationu46PerformerFormat extends scalaxb.ElemNameParser[MedicationAdministrationu46Performer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationAdministration.Performer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationAdministrationu46Performer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MedicationAdministrationu46Performer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationAdministrationu46Performer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationAdministrationu46Performer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MedicationAdministrationu46DosageFormat extends scalaxb.ElemNameParser[MedicationAdministrationu46Dosage] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationAdministration.Dosage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationAdministrationu46Dosage] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "site")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "route")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateQuantity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      MedicationAdministrationu46Dosage(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationAdministrationu46Dosage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationAdministrationu46Dosage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.site map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("site"), __scope, false) } getOrElse {Nil},
        __obj.route map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("route"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.dose map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("dose"), __scope, false) } getOrElse {Nil},
        __obj.rateRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("rateRatio"), __scope, false) } getOrElse {Nil},
        __obj.rateQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("rateQuantity"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_MedicationAdministrationStatusu45listFormat = new DefaultComionkinmrshl7fhir_MedicationAdministrationStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationAdministrationStatusu45listFormat extends scalaxb.XMLFormat[MedicationAdministrationStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationAdministrationStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationAdministrationStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationAdministrationStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationAdministrationStatusFormat extends scalaxb.ElemNameParser[MedicationAdministrationStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationAdministrationStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationAdministrationStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationAdministrationStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationAdministrationStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationAdministrationStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationAdministrationStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationDispenseTypeFormat extends scalaxb.ElemNameParser[MedicationDispenseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationDispense")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationDispenseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInformation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "authorizingPrescription")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "daysSupply")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whenPrepared")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whenHandedOver")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "receiver")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dosageInstruction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "substitution")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detectedIssue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDone")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDoneReasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDoneReasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "eventHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 =>
      MedicationDispenseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MedicationDispenseStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[MedicationDispenseu46Performer](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[DosageType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MedicationDispenseu46Substitution](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MedicationDispenseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        __obj.status map { scalaxb.toXML[MedicationDispenseStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.medicationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medicationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.medicationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("medicationReference"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.supportingInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInformation"), __scope, false) },
        __obj.performer flatMap { scalaxb.toXML[MedicationDispenseu46Performer](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.authorizingPrescription flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("authorizingPrescription"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.daysSupply map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("daysSupply"), __scope, false) } getOrElse {Nil},
        __obj.whenPrepared map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("whenPrepared"), __scope, false) } getOrElse {Nil},
        __obj.whenHandedOver map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("whenHandedOver"), __scope, false) } getOrElse {Nil},
        __obj.destination map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.receiver flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("receiver"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.dosageInstruction flatMap { scalaxb.toXML[DosageType](_, Some(fhirUrl), Some("dosageInstruction"), __scope, false) },
        __obj.substitution map { scalaxb.toXML[MedicationDispenseu46Substitution](_, Some(fhirUrl), Some("substitution"), __scope, false) } getOrElse {Nil},
        __obj.detectedIssue flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("detectedIssue"), __scope, false) },
        __obj.notDone map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("notDone"), __scope, false) } getOrElse {Nil},
        __obj.notDoneReasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("notDoneReasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.notDoneReasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("notDoneReasonReference"), __scope, false) } getOrElse {Nil},
        __obj.eventHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("eventHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationDispenseu46PerformerFormat extends scalaxb.ElemNameParser[MedicationDispenseu46Performer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationDispense.Performer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationDispenseu46Performer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MedicationDispenseu46Performer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationDispenseu46Performer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationDispenseu46Performer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MedicationDispenseu46SubstitutionFormat extends scalaxb.ElemNameParser[MedicationDispenseu46Substitution] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationDispense.Substitution")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationDispenseu46Substitution] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "wasSubstituted")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "responsibleParty")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MedicationDispenseu46Substitution(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationDispenseu46Substitution, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationDispenseu46Substitution, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[BooleanTypeType](__obj.wasSubstituted, Some(fhirUrl), Some("wasSubstituted"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.responsibleParty flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("responsibleParty"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MedicationDispenseStatusu45listFormat = new DefaultComionkinmrshl7fhir_MedicationDispenseStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationDispenseStatusu45listFormat extends scalaxb.XMLFormat[MedicationDispenseStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationDispenseStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preparation")) => PreparationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue14
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue36
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationDispenseStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationDispenseStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationDispenseStatusFormat extends scalaxb.ElemNameParser[MedicationDispenseStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationDispenseStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationDispenseStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationDispenseStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationDispenseStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationDispenseStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationDispenseStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestTypeFormat extends scalaxb.ElemNameParser[MedicationRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationReference")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInformation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "recorder")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dosageInstruction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dispenseRequest")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "substitution")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priorPrescription")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detectedIssue")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "eventHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 =>
      MedicationRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MedicationRequestStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MedicationRequestIntent](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[MedicationRequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p19, scalaxb.ElemName(node) :: stack),
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MedicationRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[DosageType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MedicationRequestu46DispenseRequest](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[MedicationRequestu46Substitution](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MedicationRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[MedicationRequestStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[MedicationRequestIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.priority map { scalaxb.toXML[MedicationRequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.medicationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medicationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.medicationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("medicationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.supportingInformation flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInformation"), __scope, false) },
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[MedicationRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.recorder map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recorder"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.dosageInstruction flatMap { scalaxb.toXML[DosageType](_, Some(fhirUrl), Some("dosageInstruction"), __scope, false) },
        __obj.dispenseRequest map { scalaxb.toXML[MedicationRequestu46DispenseRequest](_, Some(fhirUrl), Some("dispenseRequest"), __scope, false) } getOrElse {Nil},
        __obj.substitution map { scalaxb.toXML[MedicationRequestu46Substitution](_, Some(fhirUrl), Some("substitution"), __scope, false) } getOrElse {Nil},
        __obj.priorPrescription map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("priorPrescription"), __scope, false) } getOrElse {Nil},
        __obj.detectedIssue flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("detectedIssue"), __scope, false) },
        __obj.eventHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("eventHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestu46RequesterFormat extends scalaxb.ElemNameParser[MedicationRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MedicationRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestu46DispenseRequestFormat extends scalaxb.ElemNameParser[MedicationRequestu46DispenseRequest] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequest.DispenseRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestu46DispenseRequest] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "validityPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "numberOfRepeatsAllowed")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expectedSupplyDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      MedicationRequestu46DispenseRequest(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestu46DispenseRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestu46DispenseRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.validityPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("validityPeriod"), __scope, false) } getOrElse {Nil},
        __obj.numberOfRepeatsAllowed map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("numberOfRepeatsAllowed"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.expectedSupplyDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("expectedSupplyDuration"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestu46SubstitutionFormat extends scalaxb.ElemNameParser[MedicationRequestu46Substitution] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequest.Substitution")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestu46Substitution] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "allowed")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MedicationRequestu46Substitution(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestu46Substitution, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestu46Substitution, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[BooleanTypeType](__obj.allowed, Some(fhirUrl), Some("allowed"), __scope, false),
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_MedicationRequestStatusu45listFormat = new DefaultComionkinmrshl7fhir_MedicationRequestStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationRequestStatusu45listFormat extends scalaxb.XMLFormat[MedicationRequestStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationRequestStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue22
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue14
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue15
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue37
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationRequestStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationRequestStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestStatusFormat extends scalaxb.ElemNameParser[MedicationRequestStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequestStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationRequestStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationRequestStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MedicationRequestPriorityu45listFormat = new DefaultComionkinmrshl7fhir_MedicationRequestPriorityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationRequestPriorityu45listFormat extends scalaxb.XMLFormat[MedicationRequestPriorityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationRequestPriorityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("routine")) => RoutineValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("urgent")) => UrgentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stat")) => StatValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("asap")) => AsapValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationRequestPriorityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationRequestPriorityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestPriorityFormat extends scalaxb.ElemNameParser[MedicationRequestPriority] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequestPriority")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestPriority] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationRequestPriority(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationRequestPriorityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestPriority, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestPriority, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MedicationRequestIntentu45listFormat = new DefaultComionkinmrshl7fhir_MedicationRequestIntentu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationRequestIntentu45listFormat extends scalaxb.XMLFormat[MedicationRequestIntentu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationRequestIntentu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposal")) => ProposalValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("plan")) => PlanValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("order")) => OrderValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instance-order")) => Instanceu45order

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationRequestIntentu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationRequestIntentu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationRequestIntentFormat extends scalaxb.ElemNameParser[MedicationRequestIntent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationRequestIntent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationRequestIntent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationRequestIntent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationRequestIntentu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationRequestIntent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationRequestIntent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MedicationStatementTypeFormat extends scalaxb.ElemNameParser[MedicationStatementType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationStatement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationStatementType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "medicationReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dateAsserted")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "informationSource")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "derivedFrom")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "taken")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonNotTaken")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dosage")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      MedicationStatementType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MedicationStatementStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p21, scalaxb.ElemName(node) :: stack),
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MedicationStatementTaken](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[DosageType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MedicationStatementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[MedicationStatementStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.medicationCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("medicationCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.medicationReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("medicationReference"), __scope, false) } getOrElse {Nil},
        __obj.effectiveDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveDateTime"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.dateAsserted map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("dateAsserted"), __scope, false) } getOrElse {Nil},
        __obj.informationSource map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("informationSource"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.derivedFrom flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("derivedFrom"), __scope, false) },
        scalaxb.toXML[MedicationStatementTaken](__obj.taken, Some(fhirUrl), Some("taken"), __scope, false),
        __obj.reasonNotTaken flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonNotTaken"), __scope, false) },
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.dosage flatMap { scalaxb.toXML[DosageType](_, Some(fhirUrl), Some("dosage"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MedicationStatementStatusu45listFormat = new DefaultComionkinmrshl7fhir_MedicationStatementStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationStatementStatusu45listFormat extends scalaxb.XMLFormat[MedicationStatementStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationStatementStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intended")) => Intended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationStatementStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationStatementStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationStatementStatusFormat extends scalaxb.ElemNameParser[MedicationStatementStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationStatementStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationStatementStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationStatementStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationStatementStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationStatementStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationStatementStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_MedicationStatementTakenu45listFormat = new DefaultComionkinmrshl7fhir_MedicationStatementTakenu45listFormat {}
  trait DefaultComionkinmrshl7fhir_MedicationStatementTakenu45listFormat extends scalaxb.XMLFormat[MedicationStatementTakenu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): MedicationStatementTakenu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("y")) => Y
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("n")) => N
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unk")) => Unk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("na")) => Na

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MedicationStatementTakenu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MedicationStatementTakenu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_MedicationStatementTakenFormat extends scalaxb.ElemNameParser[MedicationStatementTaken] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MedicationStatementTaken")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MedicationStatementTaken] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      MedicationStatementTaken(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[MedicationStatementTakenu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MedicationStatementTaken, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MedicationStatementTaken, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MessageDefinitionTypeFormat extends scalaxb.ElemNameParser[MessageDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "base")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "event")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "focus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responseRequired")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "allowedResponse")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      MessageDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateTimeType](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p27, scalaxb.ElemName(node) :: stack),
        p28.headOption map { scalaxb.fromXML[MessageSignificanceCategory](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[MessageDefinitionu46Focus](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[MessageDefinitionu46AllowedResponse](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MessageDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DateTimeType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.base map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("base"), __scope, false) } getOrElse {Nil},
        __obj.parent flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.event, Some(fhirUrl), Some("event"), __scope, false),
        __obj.category map { scalaxb.toXML[MessageSignificanceCategory](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.focus flatMap { scalaxb.toXML[MessageDefinitionu46Focus](_, Some(fhirUrl), Some("focus"), __scope, false) },
        __obj.responseRequired map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("responseRequired"), __scope, false) } getOrElse {Nil},
        __obj.allowedResponse flatMap { scalaxb.toXML[MessageDefinitionu46AllowedResponse](_, Some(fhirUrl), Some("allowedResponse"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MessageDefinitionu46FocusFormat extends scalaxb.ElemNameParser[MessageDefinitionu46Focus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageDefinition.Focus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageDefinitionu46Focus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "max")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      MessageDefinitionu46Focus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResourceTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageDefinitionu46Focus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageDefinitionu46Focus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ResourceTypeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.profile map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.min map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("min"), __scope, false) } getOrElse {Nil},
        __obj.max map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("max"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MessageDefinitionu46AllowedResponseFormat extends scalaxb.ElemNameParser[MessageDefinitionu46AllowedResponse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageDefinition.AllowedResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageDefinitionu46AllowedResponse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "message")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "situation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      MessageDefinitionu46AllowedResponse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageDefinitionu46AllowedResponse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageDefinitionu46AllowedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.message, Some(fhirUrl), Some("message"), __scope, false),
        __obj.situation map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("situation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_MessageHeaderTypeFormat extends scalaxb.ElemNameParser[MessageHeaderType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageHeader")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageHeaderType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "event")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "receiver")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sender")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "timestamp")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enterer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responsible")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "focus")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      MessageHeaderType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodingType](p9, scalaxb.ElemName(node) :: stack),
        p10 map { scalaxb.fromXML[MessageHeaderu46Destination](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[InstantType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MessageHeaderu46Source](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MessageHeaderu46Response](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MessageHeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodingType](__obj.event, Some(fhirUrl), Some("event"), __scope, false),
        __obj.destination flatMap { scalaxb.toXML[MessageHeaderu46Destination](_, Some(fhirUrl), Some("destination"), __scope, false) },
        __obj.receiver map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sender"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[InstantType](__obj.timestamp, Some(fhirUrl), Some("timestamp"), __scope, false),
        __obj.enterer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enterer"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[MessageHeaderu46Source](__obj.source, Some(fhirUrl), Some("source"), __scope, false),
        __obj.responsible map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("responsible"), __scope, false) } getOrElse {Nil},
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[MessageHeaderu46Response](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.focus flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("focus"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_MessageHeaderu46DestinationFormat extends scalaxb.ElemNameParser[MessageHeaderu46Destination] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageHeader.Destination")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageHeaderu46Destination] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      MessageHeaderu46Destination(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageHeaderu46Destination, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageHeaderu46Destination, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.target map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("target"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[UriType](__obj.endpoint, Some(fhirUrl), Some("endpoint"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_MessageHeaderu46SourceFormat extends scalaxb.ElemNameParser[MessageHeaderu46Source] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageHeader.Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageHeaderu46Source] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "software")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      MessageHeaderu46Source(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p7, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageHeaderu46Source, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageHeaderu46Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.software map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("software"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.contact map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("contact"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[UriType](__obj.endpoint, Some(fhirUrl), Some("endpoint"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_MessageHeaderu46ResponseFormat extends scalaxb.ElemNameParser[MessageHeaderu46Response] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("MessageHeader.Response")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MessageHeaderu46Response] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      MessageHeaderu46Response(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ResponseType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: MessageHeaderu46Response, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MessageHeaderu46Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        scalaxb.toXML[ResponseType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.details map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("details"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ResponseTypeu45listFormat = new DefaultComionkinmrshl7fhir_ResponseTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ResponseTypeu45listFormat extends scalaxb.XMLFormat[ResponseTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ResponseTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ok")) => Ok
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transient-error")) => Transientu45error
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fatal-error")) => Fatalu45error

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ResponseTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ResponseTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ResponseTypeFormat extends scalaxb.ElemNameParser[ResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ResponseType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ResponseTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_NamingSystemType2Format extends scalaxb.ElemNameParser[NamingSystemType2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NamingSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NamingSystemType2] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responsible")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "uniqueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "replacedBy")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      NamingSystemType2(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PublicationStatus](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[NamingSystemType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DateTimeType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[NamingSystemu46UniqueId](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: NamingSystemType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[NamingSystemType](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        scalaxb.toXML[DateTimeType](__obj.date, Some(fhirUrl), Some("date"), __scope, false),
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.responsible map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("responsible"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.uniqueId flatMap { scalaxb.toXML[NamingSystemu46UniqueId](_, Some(fhirUrl), Some("uniqueId"), __scope, false) },
        __obj.replacedBy map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replacedBy"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NamingSystemu46UniqueIdFormat extends scalaxb.ElemNameParser[NamingSystemu46UniqueId] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NamingSystem.UniqueId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NamingSystemu46UniqueId] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "preferred")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      NamingSystemu46UniqueId(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[NamingSystemIdentifierType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NamingSystemu46UniqueId, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NamingSystemu46UniqueId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[NamingSystemIdentifierType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false),
        __obj.preferred map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("preferred"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_NamingSystemIdentifierTypeu45listFormat = new DefaultComionkinmrshl7fhir_NamingSystemIdentifierTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NamingSystemIdentifierTypeu45listFormat extends scalaxb.XMLFormat[NamingSystemIdentifierTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NamingSystemIdentifierTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oid")) => OidValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uuid")) => UuidValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uri")) => UriValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NamingSystemIdentifierTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NamingSystemIdentifierTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NamingSystemIdentifierTypeFormat extends scalaxb.ElemNameParser[NamingSystemIdentifierType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NamingSystemIdentifierType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NamingSystemIdentifierType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NamingSystemIdentifierType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NamingSystemIdentifierTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NamingSystemIdentifierType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NamingSystemIdentifierType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_NamingSystemTypeu45listFormat = new DefaultComionkinmrshl7fhir_NamingSystemTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NamingSystemTypeu45listFormat extends scalaxb.XMLFormat[NamingSystemTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NamingSystemTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("codesystem")) => CodesystemValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("identifier")) => IdentifierValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("root")) => Root

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NamingSystemTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NamingSystemTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NamingSystemTypeFormat extends scalaxb.ElemNameParser[NamingSystemType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NamingSystemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NamingSystemType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NamingSystemType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NamingSystemTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NamingSystemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NamingSystemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderTypeFormat extends scalaxb.ElemNameParser[NutritionOrderType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "dateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "orderer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "allergyIntolerance")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "foodPreferenceModifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "excludeFoodModifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "oralDiet")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supplement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "enteralFormula")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      NutritionOrderType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[NutritionOrderStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DateTimeType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[NutritionOrderu46OralDiet](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[NutritionOrderu46Supplement](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[NutritionOrderu46EnteralFormula](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: NutritionOrderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[NutritionOrderStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DateTimeType](__obj.dateTime, Some(fhirUrl), Some("dateTime"), __scope, false),
        __obj.orderer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("orderer"), __scope, false) } getOrElse {Nil},
        __obj.allergyIntolerance flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("allergyIntolerance"), __scope, false) },
        __obj.foodPreferenceModifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("foodPreferenceModifier"), __scope, false) },
        __obj.excludeFoodModifier flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("excludeFoodModifier"), __scope, false) },
        __obj.oralDiet map { scalaxb.toXML[NutritionOrderu46OralDiet](_, Some(fhirUrl), Some("oralDiet"), __scope, false) } getOrElse {Nil},
        __obj.supplement flatMap { scalaxb.toXML[NutritionOrderu46Supplement](_, Some(fhirUrl), Some("supplement"), __scope, false) },
        __obj.enteralFormula map { scalaxb.toXML[NutritionOrderu46EnteralFormula](_, Some(fhirUrl), Some("enteralFormula"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46OralDietFormat extends scalaxb.ElemNameParser[NutritionOrderu46OralDiet] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.OralDiet")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46OralDiet] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "schedule")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "nutrient")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "texture")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "fluidConsistencyType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "instruction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      NutritionOrderu46OralDiet(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[NutritionOrderu46Nutrient](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[NutritionOrderu46Texture](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46OralDiet, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46OralDiet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.schedule flatMap { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("schedule"), __scope, false) },
        __obj.nutrient flatMap { scalaxb.toXML[NutritionOrderu46Nutrient](_, Some(fhirUrl), Some("nutrient"), __scope, false) },
        __obj.texture flatMap { scalaxb.toXML[NutritionOrderu46Texture](_, Some(fhirUrl), Some("texture"), __scope, false) },
        __obj.fluidConsistencyType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("fluidConsistencyType"), __scope, false) },
        __obj.instruction map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("instruction"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46NutrientFormat extends scalaxb.ElemNameParser[NutritionOrderu46Nutrient] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.Nutrient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46Nutrient] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      NutritionOrderu46Nutrient(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46Nutrient, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46Nutrient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.modifier map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46TextureFormat extends scalaxb.ElemNameParser[NutritionOrderu46Texture] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.Texture")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46Texture] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "foodType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      NutritionOrderu46Texture(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46Texture, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46Texture, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.modifier map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("modifier"), __scope, false) } getOrElse {Nil},
        __obj.foodType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("foodType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46SupplementFormat extends scalaxb.ElemNameParser[NutritionOrderu46Supplement] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.Supplement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46Supplement] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "productName")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "schedule")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "instruction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      NutritionOrderu46Supplement(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46Supplement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46Supplement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.productName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("productName"), __scope, false) } getOrElse {Nil},
        __obj.schedule flatMap { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("schedule"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.instruction map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("instruction"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46EnteralFormulaFormat extends scalaxb.ElemNameParser[NutritionOrderu46EnteralFormula] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.EnteralFormula")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46EnteralFormula] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "baseFormulaType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "baseFormulaProductName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "additiveType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "additiveProductName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "caloricDensity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "routeofAdministration")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "administration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxVolumeToDeliver")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "administrationInstruction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      NutritionOrderu46EnteralFormula(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[NutritionOrderu46Administration](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46EnteralFormula, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46EnteralFormula, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.baseFormulaType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("baseFormulaType"), __scope, false) } getOrElse {Nil},
        __obj.baseFormulaProductName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("baseFormulaProductName"), __scope, false) } getOrElse {Nil},
        __obj.additiveType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("additiveType"), __scope, false) } getOrElse {Nil},
        __obj.additiveProductName map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("additiveProductName"), __scope, false) } getOrElse {Nil},
        __obj.caloricDensity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("caloricDensity"), __scope, false) } getOrElse {Nil},
        __obj.routeofAdministration map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("routeofAdministration"), __scope, false) } getOrElse {Nil},
        __obj.administration flatMap { scalaxb.toXML[NutritionOrderu46Administration](_, Some(fhirUrl), Some("administration"), __scope, false) },
        __obj.maxVolumeToDeliver map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("maxVolumeToDeliver"), __scope, false) } getOrElse {Nil},
        __obj.administrationInstruction map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("administrationInstruction"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderu46AdministrationFormat extends scalaxb.ElemNameParser[NutritionOrderu46Administration] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrder.Administration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderu46Administration] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "schedule")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rateRatio")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      NutritionOrderu46Administration(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderu46Administration, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderu46Administration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.schedule map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("schedule"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.rateQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("rateQuantity"), __scope, false) } getOrElse {Nil},
        __obj.rateRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("rateRatio"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_NutritionOrderStatusu45listFormat = new DefaultComionkinmrshl7fhir_NutritionOrderStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_NutritionOrderStatusu45listFormat extends scalaxb.XMLFormat[NutritionOrderStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): NutritionOrderStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposed")) => Proposed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("planned")) => Planned
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requested")) => RequestedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45hold
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, NutritionOrderStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: NutritionOrderStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_NutritionOrderStatusFormat extends scalaxb.ElemNameParser[NutritionOrderStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("NutritionOrderStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NutritionOrderStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      NutritionOrderStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[NutritionOrderStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NutritionOrderStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NutritionOrderStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ObservationTypeFormat extends scalaxb.ElemNameParser[ObservationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Observation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObservationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectiveDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issued")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dataAbsentReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "interpretation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "specimen")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "device")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referenceRange")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "related")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "component")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 =>
      ObservationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ObservationStatus](p11, scalaxb.ElemName(node) :: stack),
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p38 map { scalaxb.fromXML[Observationu46ReferenceRange](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[Observationu46Related](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[Observationu46Component](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ObservationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        scalaxb.toXML[ObservationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.effectiveDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("effectiveDateTime"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.issued map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("issued"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.dataAbsentReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("dataAbsentReason"), __scope, false) } getOrElse {Nil},
        __obj.interpretation map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("interpretation"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.specimen map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("specimen"), __scope, false) } getOrElse {Nil},
        __obj.device map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("device"), __scope, false) } getOrElse {Nil},
        __obj.referenceRange flatMap { scalaxb.toXML[Observationu46ReferenceRange](_, Some(fhirUrl), Some("referenceRange"), __scope, false) },
        __obj.related flatMap { scalaxb.toXML[Observationu46Related](_, Some(fhirUrl), Some("related"), __scope, false) },
        __obj.component flatMap { scalaxb.toXML[Observationu46Component](_, Some(fhirUrl), Some("component"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Observationu46ReferenceRangeFormat extends scalaxb.ElemNameParser[Observationu46ReferenceRange] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Observation.ReferenceRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Observationu46ReferenceRange] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "low")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "high")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "appliesTo")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "age")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Observationu46ReferenceRange(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Observationu46ReferenceRange, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Observationu46ReferenceRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.low map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("low"), __scope, false) } getOrElse {Nil},
        __obj.high map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("high"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.appliesTo flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("appliesTo"), __scope, false) },
        __obj.age map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("age"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Observationu46RelatedFormat extends scalaxb.ElemNameParser[Observationu46Related] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Observation.Related")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Observationu46Related] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "target")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Observationu46Related(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ObservationRelationshipType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Observationu46Related, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Observationu46Related, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[ObservationRelationshipType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.target, Some(fhirUrl), Some("target"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Observationu46ComponentFormat extends scalaxb.ElemNameParser[Observationu46Component] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Observation.Component")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Observationu46Component] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dataAbsentReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "interpretation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "referenceRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      Observationu46Component(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[Observationu46ReferenceRange](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Observationu46Component, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Observationu46Component, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.dataAbsentReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("dataAbsentReason"), __scope, false) } getOrElse {Nil},
        __obj.interpretation map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("interpretation"), __scope, false) } getOrElse {Nil},
        __obj.referenceRange flatMap { scalaxb.toXML[Observationu46ReferenceRange](_, Some(fhirUrl), Some("referenceRange"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ObservationRelationshipTypeu45listFormat = new DefaultComionkinmrshl7fhir_ObservationRelationshipTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ObservationRelationshipTypeu45listFormat extends scalaxb.XMLFormat[ObservationRelationshipTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ObservationRelationshipTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("has-member")) => Hasu45member
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("derived-from")) => Derivedu45from
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sequel-to")) => Sequelu45to
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("replaces")) => Replaces
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("qualified-by")) => Qualifiedu45by
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("interfered-by")) => Interferedu45by

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ObservationRelationshipTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ObservationRelationshipTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ObservationRelationshipTypeFormat extends scalaxb.ElemNameParser[ObservationRelationshipType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ObservationRelationshipType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObservationRelationshipType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ObservationRelationshipType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ObservationRelationshipTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ObservationRelationshipType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ObservationRelationshipType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OperationDefinitionTypeFormat extends scalaxb.ElemNameParser[OperationDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "idempotent")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "base")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "instance")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "overload")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      OperationDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[OperationKind](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p23, scalaxb.ElemName(node) :: stack),
        p24.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BooleanTypeType](p27, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p28, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p29, scalaxb.ElemName(node) :: stack),
        p30 map { scalaxb.fromXML[OperationDefinitionu46Parameter](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[OperationDefinitionu46Overload](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: OperationDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[OperationKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.idempotent map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("idempotent"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.base map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("base"), __scope, false) } getOrElse {Nil},
        __obj.resource flatMap { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("resource"), __scope, false) },
        scalaxb.toXML[BooleanTypeType](__obj.system, Some(fhirUrl), Some("system"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.instance, Some(fhirUrl), Some("instance"), __scope, false),
        __obj.parameter flatMap { scalaxb.toXML[OperationDefinitionu46Parameter](_, Some(fhirUrl), Some("parameter"), __scope, false) },
        __obj.overload flatMap { scalaxb.toXML[OperationDefinitionu46Overload](_, Some(fhirUrl), Some("overload"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OperationDefinitionu46ParameterFormat extends scalaxb.ElemNameParser[OperationDefinitionu46Parameter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationDefinition.Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationDefinitionu46Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "max")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "searchType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "binding")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "part")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      OperationDefinitionu46Parameter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[OperationParameterUse](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[IntegerType](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[FHIRAllTypes](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[SearchParamType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[OperationDefinitionu46Binding](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[OperationDefinitionu46Parameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationDefinitionu46Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationDefinitionu46Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[OperationParameterUse](__obj.use, Some(fhirUrl), Some("use"), __scope, false),
        scalaxb.toXML[IntegerType](__obj.min, Some(fhirUrl), Some("min"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.max, Some(fhirUrl), Some("max"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[FHIRAllTypes](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.searchType map { scalaxb.toXML[SearchParamType](_, Some(fhirUrl), Some("searchType"), __scope, false) } getOrElse {Nil},
        __obj.profile map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[OperationDefinitionu46Binding](_, Some(fhirUrl), Some("binding"), __scope, false) } getOrElse {Nil},
        __obj.part flatMap { scalaxb.toXML[OperationDefinitionu46Parameter](_, Some(fhirUrl), Some("part"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OperationDefinitionu46BindingFormat extends scalaxb.ElemNameParser[OperationDefinitionu46Binding] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationDefinition.Binding")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationDefinitionu46Binding] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "strength")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSetReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      OperationDefinitionu46Binding(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BindingStrength](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationDefinitionu46Binding, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationDefinitionu46Binding, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[BindingStrength](__obj.strength, Some(fhirUrl), Some("strength"), __scope, false),
        __obj.valueSetUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueSetUri"), __scope, false) } getOrElse {Nil},
        __obj.valueSetReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueSetReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_OperationDefinitionu46OverloadFormat extends scalaxb.ElemNameParser[OperationDefinitionu46Overload] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationDefinition.Overload")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationDefinitionu46Overload] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameterName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      OperationDefinitionu46Overload(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationDefinitionu46Overload, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationDefinitionu46Overload, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.parameterName flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("parameterName"), __scope, false) },
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_FHIRAllTypesu45listFormat = new DefaultComionkinmrshl7fhir_FHIRAllTypesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FHIRAllTypesu45listFormat extends scalaxb.XMLFormat[FHIRAllTypesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FHIRAllTypesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Address")) => AddressValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Age")) => AgeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Annotation")) => AnnotationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Attachment")) => AttachmentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BackboneElement")) => BackboneElementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CodeableConcept")) => CodeableConceptValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coding")) => CodingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ContactDetail")) => ContactDetailValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ContactPoint")) => ContactPointValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Contributor")) => ContributorValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Count")) => CountValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DataRequirement")) => DataRequirementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Distance")) => DistanceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Dosage")) => DosageValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Duration")) => DurationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Element")) => ElementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ElementDefinition")) => ElementDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Extension")) => ExtensionValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HumanName")) => HumanNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Identifier")) => IdentifierValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Meta")) => MetaValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Money")) => MoneyValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Narrative")) => NarrativeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ParameterDefinition")) => ParameterDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Period")) => PeriodValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Quantity")) => QuantityValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Range")) => RangeTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Ratio")) => RatioValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Reference")) => ReferenceValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedArtifact")) => RelatedArtifactValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SampledData")) => SampledDataValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Signature")) => SignatureValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SimpleQuantity")) => SimpleQuantityValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Timing")) => TimingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TriggerDefinition")) => TriggerDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UsageContext")) => UsageContextValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("base64Binary")) => Base64BinaryTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boolean")) => BooleanTypeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("code")) => CodeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("date")) => DateValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateTime")) => DateTimeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decimal")) => DecimalValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("id")) => IdValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instant")) => InstantValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("integer")) => IntegerValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("markdown")) => MarkdownValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oid")) => OidValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("positiveInt")) => PositiveIntValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("string")) => StringTypeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("time")) => TimeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unsignedInt")) => UnsignedIntValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uri")) => UriValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uuid")) => UuidValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xhtml")) => XhtmlValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Account")) => AccountValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ActivityDefinition")) => ActivityDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AdverseEvent")) => AdverseEventValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AllergyIntolerance")) => AllergyIntoleranceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Appointment")) => AppointmentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AppointmentResponse")) => AppointmentResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AuditEvent")) => AuditEventValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Basic")) => BasicValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Binary")) => BinaryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BodySite")) => BodySiteValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Bundle")) => BundleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CapabilityStatement")) => CapabilityStatementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CarePlan")) => CarePlanValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CareTeam")) => CareTeamValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ChargeItem")) => ChargeItemValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Claim")) => ClaimValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClaimResponse")) => ClaimResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClinicalImpression")) => ClinicalImpressionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CodeSystem")) => CodeSystemValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Communication")) => CommunicationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CommunicationRequest")) => CommunicationRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CompartmentDefinition")) => CompartmentDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Composition")) => CompositionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ConceptMap")) => ConceptMapValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Condition")) => ConditionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Consent")) => ConsentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Contract")) => ContractValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coverage")) => CoverageValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DataElement")) => DataElementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DetectedIssue")) => DetectedIssueValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Device")) => DeviceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceComponent")) => DeviceComponentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceMetric")) => DeviceMetricValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceRequest")) => DeviceRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceUseStatement")) => DeviceUseStatementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DiagnosticReport")) => DiagnosticReportValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentManifest")) => DocumentManifestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentReference")) => DocumentReferenceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DomainResource")) => DomainResourceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityRequest")) => EligibilityRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityResponse")) => EligibilityResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Encounter")) => EncounterValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Endpoint")) => EndpointValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentRequest")) => EnrollmentRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentResponse")) => EnrollmentResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EpisodeOfCare")) => EpisodeOfCareValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExpansionProfile")) => ExpansionProfileValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExplanationOfBenefit")) => ExplanationOfBenefitValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FamilyMemberHistory")) => FamilyMemberHistoryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Flag")) => FlagValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Goal")) => GoalValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GraphDefinition")) => GraphDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Group")) => GroupValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GuidanceResponse")) => GuidanceResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HealthcareService")) => HealthcareServiceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingManifest")) => ImagingManifestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingStudy")) => ImagingStudyValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Immunization")) => ImmunizationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImmunizationRecommendation")) => ImmunizationRecommendationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImplementationGuide")) => ImplementationGuideValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Library")) => LibraryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Linkage")) => LinkageValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("List")) => ListTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Location")) => LocationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Measure")) => MeasureValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MeasureReport")) => MeasureReportValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Media")) => MediaValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Medication")) => MedicationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationAdministration")) => MedicationAdministrationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationDispense")) => MedicationDispenseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationRequest")) => MedicationRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationStatement")) => MedicationStatementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageDefinition")) => MessageDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageHeader")) => MessageHeaderValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NamingSystem")) => NamingSystemValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NutritionOrder")) => NutritionOrderValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Observation")) => ObservationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationDefinition")) => OperationDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationOutcome")) => OperationOutcomeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Organization")) => OrganizationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Parameters")) => ParametersValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Patient")) => PatientValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentNotice")) => PaymentNoticeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentReconciliation")) => PaymentReconciliationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Person")) => PersonValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PlanDefinition")) => PlanDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Practitioner")) => PractitionerValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PractitionerRole")) => PractitionerRoleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Procedure")) => ProcedureValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcedureRequest")) => ProcedureRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessRequest")) => ProcessRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessResponse")) => ProcessResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Provenance")) => ProvenanceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Questionnaire")) => QuestionnaireValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("QuestionnaireResponse")) => QuestionnaireResponseValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ReferralRequest")) => ReferralRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedPerson")) => RelatedPersonValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RequestGroup")) => RequestGroupValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchStudy")) => ResearchStudyValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchSubject")) => ResearchSubjectValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Resource")) => ResourceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RiskAssessment")) => RiskAssessmentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Schedule")) => ScheduleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SearchParameter")) => SearchParameterValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Sequence")) => SequenceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ServiceDefinition")) => ServiceDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Slot")) => SlotValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Specimen")) => SpecimenValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureDefinition")) => StructureDefinitionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureMap")) => StructureMapValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Subscription")) => SubscriptionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Substance")) => SubstanceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyDelivery")) => SupplyDeliveryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyRequest")) => SupplyRequestValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Task")) => TaskValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestReport")) => TestReportValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestScript")) => TestScriptValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ValueSet")) => ValueSetValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VisionPrescription")) => VisionPrescriptionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Type")) => TypeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Any")) => AnyType

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FHIRAllTypesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FHIRAllTypesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FHIRAllTypesFormat extends scalaxb.ElemNameParser[FHIRAllTypes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FHIRAllTypes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FHIRAllTypes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FHIRAllTypes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FHIRAllTypesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FHIRAllTypes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FHIRAllTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_OperationParameterUseu45listFormat = new DefaultComionkinmrshl7fhir_OperationParameterUseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_OperationParameterUseu45listFormat extends scalaxb.XMLFormat[OperationParameterUseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): OperationParameterUseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in")) => InValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("out")) => Out

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, OperationParameterUseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: OperationParameterUseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_OperationParameterUseFormat extends scalaxb.ElemNameParser[OperationParameterUse] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationParameterUse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationParameterUse] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      OperationParameterUse(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[OperationParameterUseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationParameterUse, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationParameterUse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_OperationKindu45listFormat = new DefaultComionkinmrshl7fhir_OperationKindu45listFormat {}
  trait DefaultComionkinmrshl7fhir_OperationKindu45listFormat extends scalaxb.XMLFormat[OperationKindu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): OperationKindu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operation")) => Operation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("query")) => Query

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, OperationKindu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: OperationKindu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_OperationKindFormat extends scalaxb.ElemNameParser[OperationKind] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationKind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationKind] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      OperationKind(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[OperationKindu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationKind, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationKind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OperationOutcomeTypeFormat extends scalaxb.ElemNameParser[OperationOutcomeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationOutcome")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationOutcomeType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "issue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      OperationOutcomeType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[OperationOutcomeu46Issue](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: OperationOutcomeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.issue flatMap { scalaxb.toXML[OperationOutcomeu46Issue](_, Some(fhirUrl), Some("issue"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OperationOutcomeu46IssueFormat extends scalaxb.ElemNameParser[OperationOutcomeu46Issue] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("OperationOutcome.Issue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OperationOutcomeu46Issue] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "severity")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "details")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diagnostics")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      OperationOutcomeu46Issue(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IssueSeverity](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[IssueType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OperationOutcomeu46Issue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OperationOutcomeu46Issue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IssueSeverity](__obj.severity, Some(fhirUrl), Some("severity"), __scope, false),
        scalaxb.toXML[IssueType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.details map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("details"), __scope, false) } getOrElse {Nil},
        __obj.diagnostics map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("diagnostics"), __scope, false) } getOrElse {Nil},
        __obj.location flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("location"), __scope, false) },
        __obj.expression flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_IssueTypeu45listFormat = new DefaultComionkinmrshl7fhir_IssueTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_IssueTypeu45listFormat extends scalaxb.XMLFormat[IssueTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): IssueTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("invalid")) => Invalid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("structure")) => Structure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("required")) => Required
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("value")) => Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("invariant")) => Invariant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("security")) => Security
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("login")) => Login
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("expired")) => Expired
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("forbidden")) => ForbiddenValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suppressed")) => Suppressed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("processing")) => Processing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-supported")) => Notu45supported
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("duplicate")) => Duplicate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-found")) => Notu45found
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("too-long")) => Toou45long
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("code-invalid")) => Codeu45invalid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extension")) => ExtensionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("too-costly")) => Toou45costly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("business-rule")) => Businessu45rule
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("conflict")) => ConflictValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("incomplete")) => Incomplete
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transient")) => Transient
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lock-error")) => Locku45error
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("no-store")) => Nou45store
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exception")) => Exception
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("timeout")) => Timeout
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("throttled")) => Throttled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("informational")) => Informational

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IssueTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: IssueTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_IssueTypeFormat extends scalaxb.ElemNameParser[IssueType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("IssueType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IssueType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IssueType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[IssueTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IssueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IssueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_IssueSeverityu45listFormat = new DefaultComionkinmrshl7fhir_IssueSeverityu45listFormat {}
  trait DefaultComionkinmrshl7fhir_IssueSeverityu45listFormat extends scalaxb.XMLFormat[IssueSeverityu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): IssueSeverityu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fatal")) => Fatal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("warning")) => Warning
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("information")) => Information

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IssueSeverityu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: IssueSeverityu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_IssueSeverityFormat extends scalaxb.ElemNameParser[IssueSeverity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("IssueSeverity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IssueSeverity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IssueSeverity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[IssueSeverityu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IssueSeverity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IssueSeverity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_OrganizationTypeFormat extends scalaxb.ElemNameParser[OrganizationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Organization")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OrganizationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "alias")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      OrganizationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[Organizationu46Contact](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: OrganizationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.typeValue flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.alias flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("alias"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.address flatMap { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) },
        __obj.partOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[Organizationu46Contact](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Organizationu46ContactFormat extends scalaxb.ElemNameParser[Organizationu46Contact] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Organization.Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Organizationu46Contact] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Organizationu46Contact(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Organizationu46Contact, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Organizationu46Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.address map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ParametersTypeFormat extends scalaxb.ElemNameParser[ParametersType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Parameters")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ParametersType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ParametersType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[Parametersu46Parameter](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ParametersType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.parameter flatMap { scalaxb.toXML[Parametersu46Parameter](_, Some(fhirUrl), Some("parameter"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Parametersu46ParameterFormat extends scalaxb.ElemNameParser[Parametersu46Parameter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Parameters.Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Parametersu46Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMeta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "part")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 =>
      Parametersu46Parameter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[Parametersu46Parameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Parametersu46Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Parametersu46Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.valueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("valueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("valueInstant"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("valueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.valueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("valueOid"), __scope, false) } getOrElse {Nil},
        __obj.valuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("valuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("valueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("valueAddress"), __scope, false) } getOrElse {Nil},
        __obj.valueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("valueAge"), __scope, false) } getOrElse {Nil},
        __obj.valueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("valueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("valueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.valueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("valueCount"), __scope, false) } getOrElse {Nil},
        __obj.valueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("valueDistance"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil},
        __obj.valueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("valueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.valueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("valueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.valueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("valueMoney"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("valueSignature"), __scope, false) } getOrElse {Nil},
        __obj.valueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("valueTiming"), __scope, false) } getOrElse {Nil},
        __obj.valueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("valueMeta"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil},
        __obj.part flatMap { scalaxb.toXML[Parametersu46Parameter](_, Some(fhirUrl), Some("part"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PatientTypeFormat extends scalaxb.ElemNameParser[PatientType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Patient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PatientType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "birthDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deceasedDateTime")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maritalStatus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "multipleBirthBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "multipleBirthInteger")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "photo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "animal")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "communication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "generalPractitioner")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      PatientType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Patientu46Contact](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Patientu46Animal](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[Patientu46Communication](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[Patientu46Link](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PatientType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.name flatMap { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.birthDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("birthDate"), __scope, false) } getOrElse {Nil},
        __obj.deceasedBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("deceasedBoolean"), __scope, false) } getOrElse {Nil},
        __obj.deceasedDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("deceasedDateTime"), __scope, false) } getOrElse {Nil},
        __obj.address flatMap { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) },
        __obj.maritalStatus map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("maritalStatus"), __scope, false) } getOrElse {Nil},
        __obj.multipleBirthBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("multipleBirthBoolean"), __scope, false) } getOrElse {Nil},
        __obj.multipleBirthInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("multipleBirthInteger"), __scope, false) } getOrElse {Nil},
        __obj.photo flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("photo"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[Patientu46Contact](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.animal map { scalaxb.toXML[Patientu46Animal](_, Some(fhirUrl), Some("animal"), __scope, false) } getOrElse {Nil},
        __obj.communication flatMap { scalaxb.toXML[Patientu46Communication](_, Some(fhirUrl), Some("communication"), __scope, false) },
        __obj.generalPractitioner flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("generalPractitioner"), __scope, false) },
        __obj.managingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.link flatMap { scalaxb.toXML[Patientu46Link](_, Some(fhirUrl), Some("link"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Patientu46ContactFormat extends scalaxb.ElemNameParser[Patientu46Contact] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Patient.Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Patientu46Contact] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      Patientu46Contact(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Patientu46Contact, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Patientu46Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.relationship flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relationship"), __scope, false) },
        __obj.name map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.address map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) } getOrElse {Nil},
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Patientu46AnimalFormat extends scalaxb.ElemNameParser[Patientu46Animal] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Patient.Animal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Patientu46Animal] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "species")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "breed")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "genderStatus")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Patientu46Animal(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Patientu46Animal, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Patientu46Animal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.species, Some(fhirUrl), Some("species"), __scope, false),
        __obj.breed map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("breed"), __scope, false) } getOrElse {Nil},
        __obj.genderStatus map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("genderStatus"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Patientu46CommunicationFormat extends scalaxb.ElemNameParser[Patientu46Communication] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Patient.Communication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Patientu46Communication] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "preferred")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Patientu46Communication(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Patientu46Communication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Patientu46Communication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.language, Some(fhirUrl), Some("language"), __scope, false),
        __obj.preferred map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("preferred"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Patientu46LinkFormat extends scalaxb.ElemNameParser[Patientu46Link] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Patient.Link")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Patientu46Link] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "other")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Patientu46Link(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[LinkType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Patientu46Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Patientu46Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.other, Some(fhirUrl), Some("other"), __scope, false),
        scalaxb.toXML[LinkType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false))

  }

  def buildComionkinmrshl7fhir_LinkTypeu45listFormat = new DefaultComionkinmrshl7fhir_LinkTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_LinkTypeu45listFormat extends scalaxb.XMLFormat[LinkTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): LinkTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("replaced-by")) => Replacedu45by
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("replaces")) => ReplacesValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refer")) => Refer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seealso")) => Seealso

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LinkTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: LinkTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_LinkTypeFormat extends scalaxb.ElemNameParser[LinkType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("LinkType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LinkType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      LinkType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[LinkTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: LinkType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LinkType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PaymentNoticeTypeFormat extends scalaxb.ElemNameParser[PaymentNoticeType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PaymentNotice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PaymentNoticeType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "statusDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "paymentStatus")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      PaymentNoticeType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PaymentNoticeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.statusDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("statusDate"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.target map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("target"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.paymentStatus map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("paymentStatus"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PaymentReconciliationTypeFormat extends scalaxb.ElemNameParser[PaymentReconciliationType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PaymentReconciliation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PaymentReconciliationType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestOrganization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "detail")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "total")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "processNote")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      PaymentReconciliationType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[PaymentReconciliationu46Detail](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[PaymentReconciliationu46ProcessNote](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PaymentReconciliationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.requestProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestProvider"), __scope, false) } getOrElse {Nil},
        __obj.requestOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestOrganization"), __scope, false) } getOrElse {Nil},
        __obj.detail flatMap { scalaxb.toXML[PaymentReconciliationu46Detail](_, Some(fhirUrl), Some("detail"), __scope, false) },
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.total map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("total"), __scope, false) } getOrElse {Nil},
        __obj.processNote flatMap { scalaxb.toXML[PaymentReconciliationu46ProcessNote](_, Some(fhirUrl), Some("processNote"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PaymentReconciliationu46DetailFormat extends scalaxb.ElemNameParser[PaymentReconciliationu46Detail] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PaymentReconciliation.Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PaymentReconciliationu46Detail] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "submitter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payee")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      PaymentReconciliationu46Detail(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PaymentReconciliationu46Detail, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PaymentReconciliationu46Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.submitter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("submitter"), __scope, false) } getOrElse {Nil},
        __obj.payee map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("payee"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.amount map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PaymentReconciliationu46ProcessNoteFormat extends scalaxb.ElemNameParser[PaymentReconciliationu46ProcessNote] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PaymentReconciliation.ProcessNote")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PaymentReconciliationu46ProcessNote] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      PaymentReconciliationu46ProcessNote(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PaymentReconciliationu46ProcessNote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PaymentReconciliationu46ProcessNote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PersonTypeFormat extends scalaxb.ElemNameParser[PersonType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Person")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PersonType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "birthDate")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "photo")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "managingOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      PersonType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[Personu46Link](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PersonType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.name flatMap { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.birthDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("birthDate"), __scope, false) } getOrElse {Nil},
        __obj.address flatMap { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) },
        __obj.photo map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("photo"), __scope, false) } getOrElse {Nil},
        __obj.managingOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("managingOrganization"), __scope, false) } getOrElse {Nil},
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.link flatMap { scalaxb.toXML[Personu46Link](_, Some(fhirUrl), Some("link"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Personu46LinkFormat extends scalaxb.ElemNameParser[Personu46Link] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Person.Link")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Personu46Link] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assurance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Personu46Link(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[IdentityAssuranceLevel](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Personu46Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Personu46Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.target, Some(fhirUrl), Some("target"), __scope, false),
        __obj.assurance map { scalaxb.toXML[IdentityAssuranceLevel](_, Some(fhirUrl), Some("assurance"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_IdentityAssuranceLevelu45listFormat = new DefaultComionkinmrshl7fhir_IdentityAssuranceLevelu45listFormat {}
  trait DefaultComionkinmrshl7fhir_IdentityAssuranceLevelu45listFormat extends scalaxb.XMLFormat[IdentityAssuranceLevelu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): IdentityAssuranceLevelu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("level1")) => Level1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("level2")) => Level2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("level3")) => Level3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("level4")) => Level4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdentityAssuranceLevelu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: IdentityAssuranceLevelu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_IdentityAssuranceLevelFormat extends scalaxb.ElemNameParser[IdentityAssuranceLevel] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("IdentityAssuranceLevel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IdentityAssuranceLevel] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      IdentityAssuranceLevel(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[IdentityAssuranceLevelu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IdentityAssuranceLevel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IdentityAssuranceLevel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionTypeFormat extends scalaxb.ElemNameParser[PlanDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contributor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "library")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "goal")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 =>
      PlanDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ContributorType2](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[PlanDefinitionu46Goal](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[PlanDefinitionu46Action](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PlanDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.contributor flatMap { scalaxb.toXML[ContributorType2](_, Some(fhirUrl), Some("contributor"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.library flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("library"), __scope, false) },
        __obj.goal flatMap { scalaxb.toXML[PlanDefinitionu46Goal](_, Some(fhirUrl), Some("goal"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[PlanDefinitionu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46GoalFormat extends scalaxb.ElemNameParser[PlanDefinitionu46Goal] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.Goal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46Goal] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "addresses")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      PlanDefinitionu46Goal(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[PlanDefinitionu46Target](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46Goal, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46Goal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeableConceptType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.priority map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.start map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.addresses flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("addresses"), __scope, false) },
        __obj.documentation flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("documentation"), __scope, false) },
        __obj.target flatMap { scalaxb.toXML[PlanDefinitionu46Target](_, Some(fhirUrl), Some("target"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46TargetFormat extends scalaxb.ElemNameParser[PlanDefinitionu46Target] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46Target] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "measure")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detailCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "due")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      PlanDefinitionu46Target(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46Target, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.measure map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("measure"), __scope, false) } getOrElse {Nil},
        __obj.detailQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("detailQuantity"), __scope, false) } getOrElse {Nil},
        __obj.detailRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("detailRange"), __scope, false) } getOrElse {Nil},
        __obj.detailCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("detailCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.due map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("due"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46ActionFormat extends scalaxb.ElemNameParser[PlanDefinitionu46Action] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.Action")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46Action] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "textEquivalent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "goalId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "triggerDefinition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "input")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "output")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedAction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingTiming")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupingBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "selectionBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requiredBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "precheckBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "cardinalityBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "transform")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dynamicValue")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      PlanDefinitionu46Action(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[TriggerDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[PlanDefinitionu46Condition](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[PlanDefinitionu46RelatedAction](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[PlanDefinitionu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ActionGroupingBehavior](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ActionSelectionBehavior](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[ActionRequiredBehavior](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ActionPrecheckBehavior](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ActionCardinalityBehavior](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[PlanDefinitionu46DynamicValue](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[PlanDefinitionu46Action](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46Action, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46Action, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.label map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("label"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.textEquivalent map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("textEquivalent"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.reason flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.documentation flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("documentation"), __scope, false) },
        __obj.goalId flatMap { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("goalId"), __scope, false) },
        __obj.triggerDefinition flatMap { scalaxb.toXML[TriggerDefinitionType](_, Some(fhirUrl), Some("triggerDefinition"), __scope, false) },
        __obj.condition flatMap { scalaxb.toXML[PlanDefinitionu46Condition](_, Some(fhirUrl), Some("condition"), __scope, false) },
        __obj.input flatMap { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("input"), __scope, false) },
        __obj.output flatMap { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("output"), __scope, false) },
        __obj.relatedAction flatMap { scalaxb.toXML[PlanDefinitionu46RelatedAction](_, Some(fhirUrl), Some("relatedAction"), __scope, false) },
        __obj.timingDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("timingDateTime"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.timingDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("timingDuration"), __scope, false) } getOrElse {Nil},
        __obj.timingRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("timingRange"), __scope, false) } getOrElse {Nil},
        __obj.timingTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("timingTiming"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[PlanDefinitionu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.groupingBehavior map { scalaxb.toXML[ActionGroupingBehavior](_, Some(fhirUrl), Some("groupingBehavior"), __scope, false) } getOrElse {Nil},
        __obj.selectionBehavior map { scalaxb.toXML[ActionSelectionBehavior](_, Some(fhirUrl), Some("selectionBehavior"), __scope, false) } getOrElse {Nil},
        __obj.requiredBehavior map { scalaxb.toXML[ActionRequiredBehavior](_, Some(fhirUrl), Some("requiredBehavior"), __scope, false) } getOrElse {Nil},
        __obj.precheckBehavior map { scalaxb.toXML[ActionPrecheckBehavior](_, Some(fhirUrl), Some("precheckBehavior"), __scope, false) } getOrElse {Nil},
        __obj.cardinalityBehavior map { scalaxb.toXML[ActionCardinalityBehavior](_, Some(fhirUrl), Some("cardinalityBehavior"), __scope, false) } getOrElse {Nil},
        __obj.definition map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.transform map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("transform"), __scope, false) } getOrElse {Nil},
        __obj.dynamicValue flatMap { scalaxb.toXML[PlanDefinitionu46DynamicValue](_, Some(fhirUrl), Some("dynamicValue"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[PlanDefinitionu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46ConditionFormat extends scalaxb.ElemNameParser[PlanDefinitionu46Condition] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.Condition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46Condition] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      PlanDefinitionu46Condition(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ActionConditionKind](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46Condition, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46Condition, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ActionConditionKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46RelatedActionFormat extends scalaxb.ElemNameParser[PlanDefinitionu46RelatedAction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.RelatedAction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46RelatedAction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actionId")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offsetDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offsetRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      PlanDefinitionu46RelatedAction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ActionRelationshipType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46RelatedAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46RelatedAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.actionId, Some(fhirUrl), Some("actionId"), __scope, false),
        scalaxb.toXML[ActionRelationshipType](__obj.relationship, Some(fhirUrl), Some("relationship"), __scope, false),
        __obj.offsetDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("offsetDuration"), __scope, false) } getOrElse {Nil},
        __obj.offsetRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("offsetRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46ParticipantFormat extends scalaxb.ElemNameParser[PlanDefinitionu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      PlanDefinitionu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ActionParticipantType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ActionParticipantType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PlanDefinitionu46DynamicValueFormat extends scalaxb.ElemNameParser[PlanDefinitionu46DynamicValue] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PlanDefinition.DynamicValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PlanDefinitionu46DynamicValue] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      PlanDefinitionu46DynamicValue(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PlanDefinitionu46DynamicValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PlanDefinitionu46DynamicValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ActionRequiredBehavioru45listFormat = new DefaultComionkinmrshl7fhir_ActionRequiredBehavioru45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionRequiredBehavioru45listFormat extends scalaxb.XMLFormat[ActionRequiredBehavioru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionRequiredBehavioru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("must")) => Must
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("could")) => Could
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("must-unless-documented")) => Mustu45unlessu45documented

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionRequiredBehavioru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionRequiredBehavioru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionRequiredBehaviorFormat extends scalaxb.ElemNameParser[ActionRequiredBehavior] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionRequiredBehavior")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionRequiredBehavior] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionRequiredBehavior(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionRequiredBehavioru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionRequiredBehavior, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionRequiredBehavior, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionRelationshipTypeu45listFormat = new DefaultComionkinmrshl7fhir_ActionRelationshipTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionRelationshipTypeu45listFormat extends scalaxb.XMLFormat[ActionRelationshipTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionRelationshipTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("before-start")) => Beforeu45start
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("before")) => Before
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("before-end")) => Beforeu45end
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("concurrent-with-start")) => Concurrentu45withu45start
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("concurrent")) => Concurrent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("concurrent-with-end")) => Concurrentu45withu45end
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("after-start")) => Afteru45start
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("after")) => After
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("after-end")) => Afteru45end

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionRelationshipTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionRelationshipTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionRelationshipTypeFormat extends scalaxb.ElemNameParser[ActionRelationshipType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionRelationshipType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionRelationshipType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionRelationshipType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionRelationshipTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionRelationshipType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionRelationshipType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionGroupingBehavioru45listFormat = new DefaultComionkinmrshl7fhir_ActionGroupingBehavioru45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionGroupingBehavioru45listFormat extends scalaxb.XMLFormat[ActionGroupingBehavioru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionGroupingBehavioru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visual-group")) => Visualu45group
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("logical-group")) => Logicalu45group
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sentence-group")) => Sentenceu45group

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionGroupingBehavioru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionGroupingBehavioru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionGroupingBehaviorFormat extends scalaxb.ElemNameParser[ActionGroupingBehavior] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionGroupingBehavior")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionGroupingBehavior] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionGroupingBehavior(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionGroupingBehavioru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionGroupingBehavior, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionGroupingBehavior, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionSelectionBehavioru45listFormat = new DefaultComionkinmrshl7fhir_ActionSelectionBehavioru45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionSelectionBehavioru45listFormat extends scalaxb.XMLFormat[ActionSelectionBehavioru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionSelectionBehavioru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("any")) => AnyTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("all")) => AllType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("all-or-none")) => Allu45oru45none
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exactly-one")) => Exactlyu45one
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("at-most-one")) => Atu45mostu45one
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("one-or-more")) => Oneu45oru45more

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionSelectionBehavioru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionSelectionBehavioru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionSelectionBehaviorFormat extends scalaxb.ElemNameParser[ActionSelectionBehavior] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionSelectionBehavior")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionSelectionBehavior] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionSelectionBehavior(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionSelectionBehavioru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionSelectionBehavior, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionSelectionBehavior, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionCardinalityBehavioru45listFormat = new DefaultComionkinmrshl7fhir_ActionCardinalityBehavioru45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionCardinalityBehavioru45listFormat extends scalaxb.XMLFormat[ActionCardinalityBehavioru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionCardinalityBehavioru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("single")) => SingleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiple")) => MultipleValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionCardinalityBehavioru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionCardinalityBehavioru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionCardinalityBehaviorFormat extends scalaxb.ElemNameParser[ActionCardinalityBehavior] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionCardinalityBehavior")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionCardinalityBehavior] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionCardinalityBehavior(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionCardinalityBehavioru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionCardinalityBehavior, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionCardinalityBehavior, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionPrecheckBehavioru45listFormat = new DefaultComionkinmrshl7fhir_ActionPrecheckBehavioru45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionPrecheckBehavioru45listFormat extends scalaxb.XMLFormat[ActionPrecheckBehavioru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionPrecheckBehavioru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("yes")) => Yes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("no")) => NoValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionPrecheckBehavioru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionPrecheckBehavioru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionPrecheckBehaviorFormat extends scalaxb.ElemNameParser[ActionPrecheckBehavior] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionPrecheckBehavior")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionPrecheckBehavior] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionPrecheckBehavior(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionPrecheckBehavioru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionPrecheckBehavior, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionPrecheckBehavior, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ActionConditionKindu45listFormat = new DefaultComionkinmrshl7fhir_ActionConditionKindu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionConditionKindu45listFormat extends scalaxb.XMLFormat[ActionConditionKindu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionConditionKindu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("applicability")) => Applicability
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("start")) => Start
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stop")) => Stop

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionConditionKindu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionConditionKindu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionConditionKindFormat extends scalaxb.ElemNameParser[ActionConditionKind] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionConditionKind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionConditionKind] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionConditionKind(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionConditionKindu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionConditionKind, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionConditionKind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PractitionerTypeFormat extends scalaxb.ElemNameParser[PractitionerType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Practitioner")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PractitionerType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "birthDate")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "photo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "qualification")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "communication")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      PractitionerType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[Practitioneru46Qualification](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PractitionerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.name flatMap { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.address flatMap { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) },
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.birthDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("birthDate"), __scope, false) } getOrElse {Nil},
        __obj.photo flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("photo"), __scope, false) },
        __obj.qualification flatMap { scalaxb.toXML[Practitioneru46Qualification](_, Some(fhirUrl), Some("qualification"), __scope, false) },
        __obj.communication flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("communication"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Practitioneru46QualificationFormat extends scalaxb.ElemNameParser[Practitioneru46Qualification] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Practitioner.Qualification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Practitioneru46Qualification] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issuer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Practitioneru46Qualification(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Practitioneru46Qualification, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Practitioneru46Qualification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.issuer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("issuer"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PractitionerRoleTypeFormat extends scalaxb.ElemNameParser[PractitionerRoleType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PractitionerRole")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PractitionerRoleType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "practitioner")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "healthcareService")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "availableTime")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "notAvailable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availabilityExceptions")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      PractitionerRoleType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[PractitionerRoleu46AvailableTime](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[PractitionerRoleu46NotAvailable](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: PractitionerRoleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.practitioner map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("practitioner"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.specialty flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) },
        __obj.location flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) },
        __obj.healthcareService flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("healthcareService"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.availableTime flatMap { scalaxb.toXML[PractitionerRoleu46AvailableTime](_, Some(fhirUrl), Some("availableTime"), __scope, false) },
        __obj.notAvailable flatMap { scalaxb.toXML[PractitionerRoleu46NotAvailable](_, Some(fhirUrl), Some("notAvailable"), __scope, false) },
        __obj.availabilityExceptions map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("availabilityExceptions"), __scope, false) } getOrElse {Nil},
        __obj.endpoint flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("endpoint"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_PractitionerRoleu46AvailableTimeFormat extends scalaxb.ElemNameParser[PractitionerRoleu46AvailableTime] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PractitionerRole.AvailableTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PractitionerRoleu46AvailableTime] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "daysOfWeek")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "allDay")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availableStartTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "availableEndTime")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      PractitionerRoleu46AvailableTime(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[DaysOfWeek](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PractitionerRoleu46AvailableTime, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PractitionerRoleu46AvailableTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.daysOfWeek flatMap { scalaxb.toXML[DaysOfWeek](_, Some(fhirUrl), Some("daysOfWeek"), __scope, false) },
        __obj.allDay map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("allDay"), __scope, false) } getOrElse {Nil},
        __obj.availableStartTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("availableStartTime"), __scope, false) } getOrElse {Nil},
        __obj.availableEndTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("availableEndTime"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_PractitionerRoleu46NotAvailableFormat extends scalaxb.ElemNameParser[PractitionerRoleu46NotAvailable] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("PractitionerRole.NotAvailable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PractitionerRoleu46NotAvailable] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "during")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      PractitionerRoleu46NotAvailable(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: PractitionerRoleu46NotAvailable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: PractitionerRoleu46NotAvailable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.during map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("during"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ProcedureTypeFormat extends scalaxb.ElemNameParser[ProcedureType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Procedure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcedureType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDone")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "notDoneReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performedDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performedPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "report")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "complication")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "complicationDetail")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "followUp")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "focalDevice")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "usedReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "usedCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 =>
      ProcedureType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[EventStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p18, scalaxb.ElemName(node) :: stack),
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Procedureu46Performer](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[Procedureu46FocalDevice](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ProcedureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[EventStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.notDone map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("notDone"), __scope, false) } getOrElse {Nil},
        __obj.notDoneReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("notDoneReason"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.performedDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("performedDateTime"), __scope, false) } getOrElse {Nil},
        __obj.performedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("performedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.performer flatMap { scalaxb.toXML[Procedureu46Performer](_, Some(fhirUrl), Some("performer"), __scope, false) },
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.bodySite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) },
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.report flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("report"), __scope, false) },
        __obj.complication flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("complication"), __scope, false) },
        __obj.complicationDetail flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("complicationDetail"), __scope, false) },
        __obj.followUp flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("followUp"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.focalDevice flatMap { scalaxb.toXML[Procedureu46FocalDevice](_, Some(fhirUrl), Some("focalDevice"), __scope, false) },
        __obj.usedReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("usedReference"), __scope, false) },
        __obj.usedCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("usedCode"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Procedureu46PerformerFormat extends scalaxb.ElemNameParser[Procedureu46Performer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Procedure.Performer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Procedureu46Performer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Procedureu46Performer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Procedureu46Performer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Procedureu46Performer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.actor, Some(fhirUrl), Some("actor"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Procedureu46FocalDeviceFormat extends scalaxb.ElemNameParser[Procedureu46FocalDevice] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Procedure.FocalDevice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Procedureu46FocalDevice] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "manipulated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Procedureu46FocalDevice(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Procedureu46FocalDevice, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Procedureu46FocalDevice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.action map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("action"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.manipulated, Some(fhirUrl), Some("manipulated"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ProcedureRequestTypeFormat extends scalaxb.ElemNameParser[ProcedureRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcedureRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcedureRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requisition")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "doNotPerform")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asNeededBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "asNeededCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performerType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInfo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specimen")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relevantHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 =>
      ProcedureRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RequestStatus](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[RequestIntent](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p19, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p20, scalaxb.ElemName(node) :: stack),
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[ProcedureRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p37 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ProcedureRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        __obj.requisition map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("requisition"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[RequestStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[RequestIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.doNotPerform map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("doNotPerform"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("occurrenceTiming"), __scope, false) } getOrElse {Nil},
        __obj.asNeededBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("asNeededBoolean"), __scope, false) } getOrElse {Nil},
        __obj.asNeededCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("asNeededCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[ProcedureRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.performerType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("performerType"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil},
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.supportingInfo flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInfo"), __scope, false) },
        __obj.specimen flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("specimen"), __scope, false) },
        __obj.bodySite flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.relevantHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("relevantHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ProcedureRequestu46RequesterFormat extends scalaxb.ElemNameParser[ProcedureRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcedureRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcedureRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ProcedureRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ProcedureRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ProcedureRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_RequestIntentu45listFormat = new DefaultComionkinmrshl7fhir_RequestIntentu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RequestIntentu45listFormat extends scalaxb.XMLFormat[RequestIntentu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RequestIntentu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("proposal")) => ProposalValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("plan")) => PlanValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("order")) => OrderValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("original-order")) => Originalu45order
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reflex-order")) => Reflexu45order
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filler-order")) => Filleru45order
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instance-order")) => Instanceu45orderValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("option")) => OptionTypeValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestIntentu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RequestIntentu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RequestIntentFormat extends scalaxb.ElemNameParser[RequestIntent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestIntent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestIntent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RequestIntent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RequestIntentu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestIntent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestIntent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ProcessRequestTypeFormat extends scalaxb.ElemNameParser[ProcessRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcessRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcessRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "action")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "provider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "nullify")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "include")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "exclude")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      ProcessRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ActionList](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[ProcessRequestu46Item](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ProcessRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.action map { scalaxb.toXML[ActionList](_, Some(fhirUrl), Some("action"), __scope, false) } getOrElse {Nil},
        __obj.target map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("target"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.provider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("provider"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.nullify map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("nullify"), __scope, false) } getOrElse {Nil},
        __obj.reference map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("reference"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[ProcessRequestu46Item](_, Some(fhirUrl), Some("item"), __scope, false) },
        __obj.include flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("include"), __scope, false) },
        __obj.exclude flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("exclude"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ProcessRequestu46ItemFormat extends scalaxb.ElemNameParser[ProcessRequestu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcessRequest.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcessRequestu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "sequenceLinkId")) ^^
      { case p1 ~ p2 ~ p3 =>
      ProcessRequestu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IntegerType](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ProcessRequestu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ProcessRequestu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IntegerType](__obj.sequenceLinkId, Some(fhirUrl), Some("sequenceLinkId"), __scope, false))

  }

  def buildComionkinmrshl7fhir_ActionListu45listFormat = new DefaultComionkinmrshl7fhir_ActionListu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ActionListu45listFormat extends scalaxb.XMLFormat[ActionListu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionListu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancel")) => Cancel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poll")) => Poll
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reprocess")) => Reprocess
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("status")) => Status

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionListu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionListu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ActionListFormat extends scalaxb.ElemNameParser[ActionList] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ActionList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ActionList] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ActionList(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionListu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ActionList, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ActionList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ProcessResponseTypeFormat extends scalaxb.ElemNameParser[ProcessResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcessResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcessResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "created")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "organization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "disposition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestProvider")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestOrganization")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "form")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "processNote")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "error")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "communicationRequest")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      ProcessResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ProcessResponseu46ProcessNote](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ProcessResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.created map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("created"), __scope, false) } getOrElse {Nil},
        __obj.organization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("organization"), __scope, false) } getOrElse {Nil},
        __obj.request map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) } getOrElse {Nil},
        __obj.outcome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("outcome"), __scope, false) } getOrElse {Nil},
        __obj.disposition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("disposition"), __scope, false) } getOrElse {Nil},
        __obj.requestProvider map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestProvider"), __scope, false) } getOrElse {Nil},
        __obj.requestOrganization map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("requestOrganization"), __scope, false) } getOrElse {Nil},
        __obj.form map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("form"), __scope, false) } getOrElse {Nil},
        __obj.processNote flatMap { scalaxb.toXML[ProcessResponseu46ProcessNote](_, Some(fhirUrl), Some("processNote"), __scope, false) },
        __obj.error flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("error"), __scope, false) },
        __obj.communicationRequest flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("communicationRequest"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ProcessResponseu46ProcessNoteFormat extends scalaxb.ElemNameParser[ProcessResponseu46ProcessNote] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProcessResponse.ProcessNote")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProcessResponseu46ProcessNote] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ProcessResponseu46ProcessNote(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ProcessResponseu46ProcessNote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ProcessResponseu46ProcessNote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ProvenanceTypeFormat extends scalaxb.ElemNameParser[ProvenanceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Provenance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProvenanceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "recorded")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "policy")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "location")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "activity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "entity")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      ProvenanceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[InstantType](p11, scalaxb.ElemName(node) :: stack),
        p12 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[Provenanceu46Agent](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[Provenanceu46Entity](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ProvenanceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.target flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("target"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[InstantType](__obj.recorded, Some(fhirUrl), Some("recorded"), __scope, false),
        __obj.policy flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("policy"), __scope, false) },
        __obj.location map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.reason flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("reason"), __scope, false) },
        __obj.activity map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("activity"), __scope, false) } getOrElse {Nil},
        __obj.agent flatMap { scalaxb.toXML[Provenanceu46Agent](_, Some(fhirUrl), Some("agent"), __scope, false) },
        __obj.entity flatMap { scalaxb.toXML[Provenanceu46Entity](_, Some(fhirUrl), Some("entity"), __scope, false) },
        __obj.signature flatMap { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("signature"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Provenanceu46AgentFormat extends scalaxb.ElemNameParser[Provenanceu46Agent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Provenance.Agent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Provenanceu46Agent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whoUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whoReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOfUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOfReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relatedAgentType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Provenanceu46Agent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Provenanceu46Agent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Provenanceu46Agent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.role flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("role"), __scope, false) },
        __obj.whoUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("whoUri"), __scope, false) } getOrElse {Nil},
        __obj.whoReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("whoReference"), __scope, false) } getOrElse {Nil},
        __obj.onBehalfOfUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("onBehalfOfUri"), __scope, false) } getOrElse {Nil},
        __obj.onBehalfOfReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOfReference"), __scope, false) } getOrElse {Nil},
        __obj.relatedAgentType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relatedAgentType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Provenanceu46EntityFormat extends scalaxb.ElemNameParser[Provenanceu46Entity] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Provenance.Entity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Provenanceu46Entity] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "role")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whatUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whatReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whatIdentifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "agent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Provenanceu46Entity(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ProvenanceEntityRole](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[Provenanceu46Agent](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Provenanceu46Entity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Provenanceu46Entity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ProvenanceEntityRole](__obj.role, Some(fhirUrl), Some("role"), __scope, false),
        __obj.whatUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("whatUri"), __scope, false) } getOrElse {Nil},
        __obj.whatReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("whatReference"), __scope, false) } getOrElse {Nil},
        __obj.whatIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("whatIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.agent flatMap { scalaxb.toXML[Provenanceu46Agent](_, Some(fhirUrl), Some("agent"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ProvenanceEntityRoleu45listFormat = new DefaultComionkinmrshl7fhir_ProvenanceEntityRoleu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ProvenanceEntityRoleu45listFormat extends scalaxb.XMLFormat[ProvenanceEntityRoleu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ProvenanceEntityRoleu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("derivation")) => Derivation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("revision")) => Revision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("quotation")) => Quotation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("source")) => SourceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("removal")) => Removal

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ProvenanceEntityRoleu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ProvenanceEntityRoleu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ProvenanceEntityRoleFormat extends scalaxb.ElemNameParser[ProvenanceEntityRole] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ProvenanceEntityRole")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProvenanceEntityRole] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ProvenanceEntityRole(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ProvenanceEntityRoleu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ProvenanceEntityRole, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ProvenanceEntityRole, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireTypeFormat extends scalaxb.ElemNameParser[QuestionnaireType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Questionnaire")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "subjectType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 =>
      QuestionnaireType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[Questionnaireu46Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: QuestionnaireType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.subjectType flatMap { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("subjectType"), __scope, false) },
        __obj.item flatMap { scalaxb.toXML[Questionnaireu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Questionnaireu46ItemFormat extends scalaxb.ElemNameParser[Questionnaireu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Questionnaire.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Questionnaireu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "linkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prefix")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "enableWhen")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "required")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "repeats")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "readOnly")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "maxLength")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "options")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "option")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "initialReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      Questionnaireu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[QuestionnaireItemType](p8, scalaxb.ElemName(node) :: stack),
        p9 map { scalaxb.fromXML[Questionnaireu46EnableWhen](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[Questionnaireu46Option](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[Questionnaireu46Item](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Questionnaireu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Questionnaireu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.linkId, Some(fhirUrl), Some("linkId"), __scope, false),
        __obj.definition map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.prefix map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("prefix"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[QuestionnaireItemType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.enableWhen flatMap { scalaxb.toXML[Questionnaireu46EnableWhen](_, Some(fhirUrl), Some("enableWhen"), __scope, false) },
        __obj.required map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("required"), __scope, false) } getOrElse {Nil},
        __obj.repeats map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("repeats"), __scope, false) } getOrElse {Nil},
        __obj.readOnly map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("readOnly"), __scope, false) } getOrElse {Nil},
        __obj.maxLength map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("maxLength"), __scope, false) } getOrElse {Nil},
        __obj.options map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("options"), __scope, false) } getOrElse {Nil},
        __obj.option flatMap { scalaxb.toXML[Questionnaireu46Option](_, Some(fhirUrl), Some("option"), __scope, false) },
        __obj.initialBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("initialBoolean"), __scope, false) } getOrElse {Nil},
        __obj.initialDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("initialDecimal"), __scope, false) } getOrElse {Nil},
        __obj.initialInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("initialInteger"), __scope, false) } getOrElse {Nil},
        __obj.initialDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("initialDate"), __scope, false) } getOrElse {Nil},
        __obj.initialDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("initialDateTime"), __scope, false) } getOrElse {Nil},
        __obj.initialTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("initialTime"), __scope, false) } getOrElse {Nil},
        __obj.initialString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("initialString"), __scope, false) } getOrElse {Nil},
        __obj.initialUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("initialUri"), __scope, false) } getOrElse {Nil},
        __obj.initialAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("initialAttachment"), __scope, false) } getOrElse {Nil},
        __obj.initialCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("initialCoding"), __scope, false) } getOrElse {Nil},
        __obj.initialQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("initialQuantity"), __scope, false) } getOrElse {Nil},
        __obj.initialReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("initialReference"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[Questionnaireu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Questionnaireu46EnableWhenFormat extends scalaxb.ElemNameParser[Questionnaireu46EnableWhen] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Questionnaire.EnableWhen")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Questionnaireu46EnableWhen] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "question")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hasAnswer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "answerReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      Questionnaireu46EnableWhen(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Questionnaireu46EnableWhen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Questionnaireu46EnableWhen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.question, Some(fhirUrl), Some("question"), __scope, false),
        __obj.hasAnswer map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("hasAnswer"), __scope, false) } getOrElse {Nil},
        __obj.answerBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("answerBoolean"), __scope, false) } getOrElse {Nil},
        __obj.answerDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("answerDecimal"), __scope, false) } getOrElse {Nil},
        __obj.answerInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("answerInteger"), __scope, false) } getOrElse {Nil},
        __obj.answerDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("answerDate"), __scope, false) } getOrElse {Nil},
        __obj.answerDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("answerDateTime"), __scope, false) } getOrElse {Nil},
        __obj.answerTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("answerTime"), __scope, false) } getOrElse {Nil},
        __obj.answerString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("answerString"), __scope, false) } getOrElse {Nil},
        __obj.answerUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("answerUri"), __scope, false) } getOrElse {Nil},
        __obj.answerAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("answerAttachment"), __scope, false) } getOrElse {Nil},
        __obj.answerCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("answerCoding"), __scope, false) } getOrElse {Nil},
        __obj.answerQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("answerQuantity"), __scope, false) } getOrElse {Nil},
        __obj.answerReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("answerReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Questionnaireu46OptionFormat extends scalaxb.ElemNameParser[Questionnaireu46Option] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Questionnaire.Option")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Questionnaireu46Option] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Questionnaireu46Option(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Questionnaireu46Option, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Questionnaireu46Option, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_QuestionnaireItemTypeu45listFormat = new DefaultComionkinmrshl7fhir_QuestionnaireItemTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_QuestionnaireItemTypeu45listFormat extends scalaxb.XMLFormat[QuestionnaireItemTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): QuestionnaireItemTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("group")) => GroupValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("display")) => Display
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boolean")) => BooleanTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decimal")) => DecimalValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("integer")) => IntegerValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("date")) => DateValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateTime")) => DateTimeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("time")) => TimeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("string")) => StringTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("text")) => TextValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("url")) => Url
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("choice")) => Choice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("open-choice")) => Openu45choice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("attachment")) => AttachmentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reference")) => ReferenceValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("quantity")) => QuantityValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QuestionnaireItemTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: QuestionnaireItemTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireItemTypeFormat extends scalaxb.ElemNameParser[QuestionnaireItemType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuestionnaireItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireItemType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      QuestionnaireItemType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[QuestionnaireItemTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuestionnaireItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuestionnaireItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireResponseTypeFormat extends scalaxb.ElemNameParser[QuestionnaireResponseType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuestionnaireResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireResponseType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "questionnaire")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authored")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      QuestionnaireResponseType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[QuestionnaireResponseStatus](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[QuestionnaireResponseu46Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: QuestionnaireResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.parent flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) },
        __obj.questionnaire map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("questionnaire"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[QuestionnaireResponseStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.authored map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authored"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[QuestionnaireResponseu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireResponseu46ItemFormat extends scalaxb.ElemNameParser[QuestionnaireResponseu46Item] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuestionnaireResponse.Item")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireResponseu46Item] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "linkId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "answer")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      QuestionnaireResponseu46Item(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[QuestionnaireResponseu46Answer](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[QuestionnaireResponseu46Item](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuestionnaireResponseu46Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuestionnaireResponseu46Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.linkId, Some(fhirUrl), Some("linkId"), __scope, false),
        __obj.definition map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("definition"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.answer flatMap { scalaxb.toXML[QuestionnaireResponseu46Answer](_, Some(fhirUrl), Some("answer"), __scope, false) },
        __obj.item flatMap { scalaxb.toXML[QuestionnaireResponseu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireResponseu46AnswerFormat extends scalaxb.ElemNameParser[QuestionnaireResponseu46Answer] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuestionnaireResponse.Answer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireResponseu46Answer] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "item")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      QuestionnaireResponseu46Answer(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[QuestionnaireResponseu46Item](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuestionnaireResponseu46Answer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuestionnaireResponseu46Answer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[QuestionnaireResponseu46Item](_, Some(fhirUrl), Some("item"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_QuestionnaireResponseStatusu45listFormat = new DefaultComionkinmrshl7fhir_QuestionnaireResponseStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_QuestionnaireResponseStatusu45listFormat extends scalaxb.XMLFormat[QuestionnaireResponseStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): QuestionnaireResponseStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue16
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amended")) => AmendedValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue38
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QuestionnaireResponseStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: QuestionnaireResponseStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_QuestionnaireResponseStatusFormat extends scalaxb.ElemNameParser[QuestionnaireResponseStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("QuestionnaireResponseStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QuestionnaireResponseStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      QuestionnaireResponseStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[QuestionnaireResponseStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QuestionnaireResponseStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QuestionnaireResponseStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ReferralRequestTypeFormat extends scalaxb.ElemNameParser[ReferralRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ReferralRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReferralRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "serviceRequested")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recipient")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonCode")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supportingInfo")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relevantHistory")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      ReferralRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RequestStatus](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[RequestIntent](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p19, scalaxb.ElemName(node) :: stack),
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferralRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ReferralRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[RequestStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[RequestIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.serviceRequested flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceRequested"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[ReferralRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.specialty map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) } getOrElse {Nil},
        __obj.recipient flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recipient"), __scope, false) },
        __obj.reasonCode flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCode"), __scope, false) },
        __obj.reasonReference flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.supportingInfo flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supportingInfo"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.relevantHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("relevantHistory"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ReferralRequestu46RequesterFormat extends scalaxb.ElemNameParser[ReferralRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ReferralRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReferralRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ReferralRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ReferralRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReferralRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RelatedPersonTypeFormat extends scalaxb.ElemNameParser[RelatedPersonType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RelatedPerson")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RelatedPersonType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "telecom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gender")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "birthDate")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "address")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "photo")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      RelatedPersonType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[AdministrativeGender](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: RelatedPersonType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.patient, Some(fhirUrl), Some("patient"), __scope, false),
        __obj.relationship map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("relationship"), __scope, false) } getOrElse {Nil},
        __obj.name flatMap { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("name"), __scope, false) },
        __obj.telecom flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("telecom"), __scope, false) },
        __obj.gender map { scalaxb.toXML[AdministrativeGender](_, Some(fhirUrl), Some("gender"), __scope, false) } getOrElse {Nil},
        __obj.birthDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("birthDate"), __scope, false) } getOrElse {Nil},
        __obj.address flatMap { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("address"), __scope, false) },
        __obj.photo flatMap { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("photo"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RequestGroupTypeFormat extends scalaxb.ElemNameParser[RequestGroupType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestGroup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestGroupType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "replaces")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "author")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      RequestGroupType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RequestStatus](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[RequestIntent](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[RequestGroupu46Action](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: RequestGroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definition"), __scope, false) },
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.replaces flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("replaces"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[RequestStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[RequestIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.author map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("author"), __scope, false) } getOrElse {Nil},
        __obj.reasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.reasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[RequestGroupu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_RequestGroupu46ActionFormat extends scalaxb.ElemNameParser[RequestGroupu46Action] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestGroup.Action")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestGroupu46Action] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "textEquivalent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedAction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timingTiming")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupingBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "selectionBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requiredBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "precheckBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "cardinalityBehavior")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      RequestGroupu46Action(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[RequestGroupu46Condition](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[RequestGroupu46RelatedAction](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[ActionGroupingBehavior](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ActionSelectionBehavior](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ActionRequiredBehavior](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ActionPrecheckBehavior](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ActionCardinalityBehavior](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[RequestGroupu46Action](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestGroupu46Action, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestGroupu46Action, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.label map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("label"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.textEquivalent map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("textEquivalent"), __scope, false) } getOrElse {Nil},
        __obj.code flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) },
        __obj.documentation flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("documentation"), __scope, false) },
        __obj.condition flatMap { scalaxb.toXML[RequestGroupu46Condition](_, Some(fhirUrl), Some("condition"), __scope, false) },
        __obj.relatedAction flatMap { scalaxb.toXML[RequestGroupu46RelatedAction](_, Some(fhirUrl), Some("relatedAction"), __scope, false) },
        __obj.timingDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("timingDateTime"), __scope, false) } getOrElse {Nil},
        __obj.timingPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.timingDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("timingDuration"), __scope, false) } getOrElse {Nil},
        __obj.timingRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("timingRange"), __scope, false) } getOrElse {Nil},
        __obj.timingTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("timingTiming"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.groupingBehavior map { scalaxb.toXML[ActionGroupingBehavior](_, Some(fhirUrl), Some("groupingBehavior"), __scope, false) } getOrElse {Nil},
        __obj.selectionBehavior map { scalaxb.toXML[ActionSelectionBehavior](_, Some(fhirUrl), Some("selectionBehavior"), __scope, false) } getOrElse {Nil},
        __obj.requiredBehavior map { scalaxb.toXML[ActionRequiredBehavior](_, Some(fhirUrl), Some("requiredBehavior"), __scope, false) } getOrElse {Nil},
        __obj.precheckBehavior map { scalaxb.toXML[ActionPrecheckBehavior](_, Some(fhirUrl), Some("precheckBehavior"), __scope, false) } getOrElse {Nil},
        __obj.cardinalityBehavior map { scalaxb.toXML[ActionCardinalityBehavior](_, Some(fhirUrl), Some("cardinalityBehavior"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil},
        __obj.action flatMap { scalaxb.toXML[RequestGroupu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_RequestGroupu46ConditionFormat extends scalaxb.ElemNameParser[RequestGroupu46Condition] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestGroup.Condition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestGroupu46Condition] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      RequestGroupu46Condition(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ActionConditionKind](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestGroupu46Condition, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestGroupu46Condition, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ActionConditionKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RequestGroupu46RelatedActionFormat extends scalaxb.ElemNameParser[RequestGroupu46RelatedAction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RequestGroup.RelatedAction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestGroupu46RelatedAction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "actionId")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "relationship")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offsetDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offsetRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      RequestGroupu46RelatedAction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ActionRelationshipType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestGroupu46RelatedAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestGroupu46RelatedAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.actionId, Some(fhirUrl), Some("actionId"), __scope, false),
        scalaxb.toXML[ActionRelationshipType](__obj.relationship, Some(fhirUrl), Some("relationship"), __scope, false),
        __obj.offsetDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("offsetDuration"), __scope, false) } getOrElse {Nil},
        __obj.offsetRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("offsetRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ResearchStudyTypeFormat extends scalaxb.ElemNameParser[ResearchStudyType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResearchStudy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResearchStudyType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "protocol")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "focus")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "keyword")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "enrollment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sponsor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "principalInvestigator")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "site")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonStopped")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "arm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      ResearchStudyType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResearchStudyStatus](p13, scalaxb.ElemName(node) :: stack),
        p14 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ResearchStudyu46Arm](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ResearchStudyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.protocol flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("protocol"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[ResearchStudyStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        __obj.focus flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("focus"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.keyword flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("keyword"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.enrollment flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("enrollment"), __scope, false) },
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.sponsor map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("sponsor"), __scope, false) } getOrElse {Nil},
        __obj.principalInvestigator map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("principalInvestigator"), __scope, false) } getOrElse {Nil},
        __obj.site flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("site"), __scope, false) },
        __obj.reasonStopped map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonStopped"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.arm flatMap { scalaxb.toXML[ResearchStudyu46Arm](_, Some(fhirUrl), Some("arm"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ResearchStudyu46ArmFormat extends scalaxb.ElemNameParser[ResearchStudyu46Arm] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResearchStudy.Arm")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResearchStudyu46Arm] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ResearchStudyu46Arm(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResearchStudyu46Arm, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResearchStudyu46Arm, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ResearchStudyStatusu45listFormat = new DefaultComionkinmrshl7fhir_ResearchStudyStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ResearchStudyStatusu45listFormat extends scalaxb.XMLFormat[ResearchStudyStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ResearchStudyStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progress
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => Stopped
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ResearchStudyStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ResearchStudyStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ResearchStudyStatusFormat extends scalaxb.ElemNameParser[ResearchStudyStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResearchStudyStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResearchStudyStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ResearchStudyStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ResearchStudyStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResearchStudyStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResearchStudyStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ResearchSubjectTypeFormat extends scalaxb.ElemNameParser[ResearchSubjectType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResearchSubject")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResearchSubjectType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "study")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "individual")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assignedArm")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "actualArm")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "consent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      ResearchSubjectType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ResearchSubjectStatus](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ResearchSubjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ResearchSubjectStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.study, Some(fhirUrl), Some("study"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.individual, Some(fhirUrl), Some("individual"), __scope, false),
        __obj.assignedArm map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("assignedArm"), __scope, false) } getOrElse {Nil},
        __obj.actualArm map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("actualArm"), __scope, false) } getOrElse {Nil},
        __obj.consent map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("consent"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_ResearchSubjectStatusu45listFormat = new DefaultComionkinmrshl7fhir_ResearchSubjectStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ResearchSubjectStatusu45listFormat extends scalaxb.XMLFormat[ResearchSubjectStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ResearchSubjectStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("candidate")) => Candidate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("enrolled")) => Enrolled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue23
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => SuspendedValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withdrawn")) => Withdrawn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue17

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ResearchSubjectStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ResearchSubjectStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ResearchSubjectStatusFormat extends scalaxb.ElemNameParser[ResearchSubjectStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ResearchSubjectStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResearchSubjectStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ResearchSubjectStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ResearchSubjectStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ResearchSubjectStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ResearchSubjectStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_RiskAssessmentTypeFormat extends scalaxb.ElemNameParser[RiskAssessmentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RiskAssessment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RiskAssessmentType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basis")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "prediction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "mitigation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      RiskAssessmentType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ObservationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[RiskAssessmentu46Prediction](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: RiskAssessmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.basedOn map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) } getOrElse {Nil},
        __obj.parent map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ObservationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.subject map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("subject"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.condition map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("condition"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil},
        __obj.reasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.reasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) } getOrElse {Nil},
        __obj.basis flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basis"), __scope, false) },
        __obj.prediction flatMap { scalaxb.toXML[RiskAssessmentu46Prediction](_, Some(fhirUrl), Some("prediction"), __scope, false) },
        __obj.mitigation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("mitigation"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_RiskAssessmentu46PredictionFormat extends scalaxb.ElemNameParser[RiskAssessmentu46Prediction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("RiskAssessment.Prediction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RiskAssessmentu46Prediction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "outcome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "probabilityDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "probabilityRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "qualitativeRisk")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "relativeRisk")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whenPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "whenRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rationale")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      RiskAssessmentu46Prediction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RiskAssessmentu46Prediction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RiskAssessmentu46Prediction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.outcome, Some(fhirUrl), Some("outcome"), __scope, false),
        __obj.probabilityDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("probabilityDecimal"), __scope, false) } getOrElse {Nil},
        __obj.probabilityRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("probabilityRange"), __scope, false) } getOrElse {Nil},
        __obj.qualitativeRisk map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("qualitativeRisk"), __scope, false) } getOrElse {Nil},
        __obj.relativeRisk map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("relativeRisk"), __scope, false) } getOrElse {Nil},
        __obj.whenPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("whenPeriod"), __scope, false) } getOrElse {Nil},
        __obj.whenRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("whenRange"), __scope, false) } getOrElse {Nil},
        __obj.rationale map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("rationale"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ScheduleTypeFormat extends scalaxb.ElemNameParser[ScheduleType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Schedule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ScheduleType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "active")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "serviceCategory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "serviceType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "actor")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "planningHorizon")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      ScheduleType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ScheduleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.active map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("active"), __scope, false) } getOrElse {Nil},
        __obj.serviceCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceCategory"), __scope, false) } getOrElse {Nil},
        __obj.serviceType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceType"), __scope, false) },
        __obj.specialty flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) },
        __obj.actor flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("actor"), __scope, false) },
        __obj.planningHorizon map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("planningHorizon"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SearchParameterTypeFormat extends scalaxb.ElemNameParser[SearchParameterType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchParameterType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "base")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "derivedFrom")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "xpath")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "xpathUsage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "comparator")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "chain")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "component")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      SearchParameterType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[PublicationStatus](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p20, scalaxb.ElemName(node) :: stack),
        p21 map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SearchParamType](p22, scalaxb.ElemName(node) :: stack),
        p23.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[MarkdownType](p24, scalaxb.ElemName(node) :: stack),
        p25.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[XPathUsageType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ResourceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[SearchComparator](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[SearchModifierCode](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[SearchParameteru46Component](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SearchParameterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.base flatMap { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("base"), __scope, false) },
        scalaxb.toXML[SearchParamType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.derivedFrom map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("derivedFrom"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[MarkdownType](__obj.description, Some(fhirUrl), Some("description"), __scope, false),
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil},
        __obj.xpath map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("xpath"), __scope, false) } getOrElse {Nil},
        __obj.xpathUsage map { scalaxb.toXML[XPathUsageType](_, Some(fhirUrl), Some("xpathUsage"), __scope, false) } getOrElse {Nil},
        __obj.target flatMap { scalaxb.toXML[ResourceTypeType](_, Some(fhirUrl), Some("target"), __scope, false) },
        __obj.comparator flatMap { scalaxb.toXML[SearchComparator](_, Some(fhirUrl), Some("comparator"), __scope, false) },
        __obj.modifier flatMap { scalaxb.toXML[SearchModifierCode](_, Some(fhirUrl), Some("modifier"), __scope, false) },
        __obj.chain flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("chain"), __scope, false) },
        __obj.component flatMap { scalaxb.toXML[SearchParameteru46Component](_, Some(fhirUrl), Some("component"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SearchParameteru46ComponentFormat extends scalaxb.ElemNameParser[SearchParameteru46Component] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchParameter.Component")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchParameteru46Component] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "definition")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "expression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      SearchParameteru46Component(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SearchParameteru46Component, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SearchParameteru46Component, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.definition, Some(fhirUrl), Some("definition"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.expression, Some(fhirUrl), Some("expression"), __scope, false))

  }

  def buildComionkinmrshl7fhir_XPathUsageTypeu45listFormat = new DefaultComionkinmrshl7fhir_XPathUsageTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_XPathUsageTypeu45listFormat extends scalaxb.XMLFormat[XPathUsageTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): XPathUsageTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normal")) => Normal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("phonetic")) => Phonetic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nearby")) => Nearby
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("distance")) => DistanceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => Other

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, XPathUsageTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: XPathUsageTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_XPathUsageTypeFormat extends scalaxb.ElemNameParser[XPathUsageType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("XPathUsageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[XPathUsageType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      XPathUsageType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[XPathUsageTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: XPathUsageType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: XPathUsageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SearchModifierCodeu45listFormat = new DefaultComionkinmrshl7fhir_SearchModifierCodeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SearchModifierCodeu45listFormat extends scalaxb.XMLFormat[SearchModifierCodeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SearchModifierCodeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("missing")) => Missing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exact")) => Exact
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("contains")) => ContainsValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not")) => Not
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("text")) => Text
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in")) => InValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not-in")) => Notu45in
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("below")) => Below
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("above")) => Above
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("type")) => TypeValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SearchModifierCodeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SearchModifierCodeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SearchModifierCodeFormat extends scalaxb.ElemNameParser[SearchModifierCode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchModifierCode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchModifierCode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SearchModifierCode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SearchModifierCodeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SearchModifierCode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SearchModifierCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SearchComparatoru45listFormat = new DefaultComionkinmrshl7fhir_SearchComparatoru45listFormat {}
  trait DefaultComionkinmrshl7fhir_SearchComparatoru45listFormat extends scalaxb.XMLFormat[SearchComparatoru45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SearchComparatoru45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eq")) => Eq
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ne")) => Ne
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gt")) => Gt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lt")) => Lt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ge")) => Ge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("le")) => Le
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sa")) => Sa
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eb")) => Eb
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ap")) => Ap

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SearchComparatoru45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SearchComparatoru45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SearchComparatorFormat extends scalaxb.ElemNameParser[SearchComparator] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SearchComparator")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SearchComparator] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SearchComparator(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SearchComparatoru45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SearchComparator, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SearchComparator, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SequenceTypeFormat extends scalaxb.ElemNameParser[SequenceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Sequence")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SequenceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "coordinateSystem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "specimen")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "device")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "performer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referenceSeq")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "variant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "observedSeq")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "quality")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "readCoverage")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "repository")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "pointer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      SequenceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IntegerType](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Sequenceu46ReferenceSeq](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[Sequenceu46Variant](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[Sequenceu46Quality](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Sequenceu46Repository](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SequenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[IntegerType](__obj.coordinateSystem, Some(fhirUrl), Some("coordinateSystem"), __scope, false),
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.specimen map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("specimen"), __scope, false) } getOrElse {Nil},
        __obj.device map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("device"), __scope, false) } getOrElse {Nil},
        __obj.performer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("performer"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.referenceSeq map { scalaxb.toXML[Sequenceu46ReferenceSeq](_, Some(fhirUrl), Some("referenceSeq"), __scope, false) } getOrElse {Nil},
        __obj.variant flatMap { scalaxb.toXML[Sequenceu46Variant](_, Some(fhirUrl), Some("variant"), __scope, false) },
        __obj.observedSeq map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("observedSeq"), __scope, false) } getOrElse {Nil},
        __obj.quality flatMap { scalaxb.toXML[Sequenceu46Quality](_, Some(fhirUrl), Some("quality"), __scope, false) },
        __obj.readCoverage map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("readCoverage"), __scope, false) } getOrElse {Nil},
        __obj.repository flatMap { scalaxb.toXML[Sequenceu46Repository](_, Some(fhirUrl), Some("repository"), __scope, false) },
        __obj.pointer flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("pointer"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Sequenceu46ReferenceSeqFormat extends scalaxb.ElemNameParser[Sequenceu46ReferenceSeq] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Sequence.ReferenceSeq")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Sequenceu46ReferenceSeq] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "chromosome")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "genomeBuild")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referenceSeqId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referenceSeqPointer")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referenceSeqString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "strand")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "windowStart")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "windowEnd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      Sequenceu46ReferenceSeq(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IntegerType](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[IntegerType](p10, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Sequenceu46ReferenceSeq, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Sequenceu46ReferenceSeq, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.chromosome map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("chromosome"), __scope, false) } getOrElse {Nil},
        __obj.genomeBuild map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("genomeBuild"), __scope, false) } getOrElse {Nil},
        __obj.referenceSeqId map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("referenceSeqId"), __scope, false) } getOrElse {Nil},
        __obj.referenceSeqPointer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("referenceSeqPointer"), __scope, false) } getOrElse {Nil},
        __obj.referenceSeqString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("referenceSeqString"), __scope, false) } getOrElse {Nil},
        __obj.strand map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("strand"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[IntegerType](__obj.windowStart, Some(fhirUrl), Some("windowStart"), __scope, false),
        scalaxb.toXML[IntegerType](__obj.windowEnd, Some(fhirUrl), Some("windowEnd"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_Sequenceu46VariantFormat extends scalaxb.ElemNameParser[Sequenceu46Variant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Sequence.Variant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Sequenceu46Variant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "observedAllele")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "referenceAllele")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "cigar")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "variantPointer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Sequenceu46Variant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Sequenceu46Variant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Sequenceu46Variant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.start map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil},
        __obj.observedAllele map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("observedAllele"), __scope, false) } getOrElse {Nil},
        __obj.referenceAllele map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("referenceAllele"), __scope, false) } getOrElse {Nil},
        __obj.cigar map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("cigar"), __scope, false) } getOrElse {Nil},
        __obj.variantPointer map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("variantPointer"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Sequenceu46QualityFormat extends scalaxb.ElemNameParser[Sequenceu46Quality] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Sequence.Quality")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Sequenceu46Quality] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "standardSequence")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "score")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "truthTP")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "queryTP")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "truthFN")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "queryFP")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "gtFP")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "precision")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "recall")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fScore")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      Sequenceu46Quality(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[QualityType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Sequenceu46Quality, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Sequenceu46Quality, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[QualityType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.standardSequence map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("standardSequence"), __scope, false) } getOrElse {Nil},
        __obj.start map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("start"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil},
        __obj.score map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("score"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.truthTP map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("truthTP"), __scope, false) } getOrElse {Nil},
        __obj.queryTP map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("queryTP"), __scope, false) } getOrElse {Nil},
        __obj.truthFN map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("truthFN"), __scope, false) } getOrElse {Nil},
        __obj.queryFP map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("queryFP"), __scope, false) } getOrElse {Nil},
        __obj.gtFP map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("gtFP"), __scope, false) } getOrElse {Nil},
        __obj.precision map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("precision"), __scope, false) } getOrElse {Nil},
        __obj.recall map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("recall"), __scope, false) } getOrElse {Nil},
        __obj.fScore map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("fScore"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Sequenceu46RepositoryFormat extends scalaxb.ElemNameParser[Sequenceu46Repository] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Sequence.Repository")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Sequenceu46Repository] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "datasetId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "variantsetId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "readsetId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Sequenceu46Repository(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RepositoryType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Sequenceu46Repository, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Sequenceu46Repository, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[RepositoryType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.datasetId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("datasetId"), __scope, false) } getOrElse {Nil},
        __obj.variantsetId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("variantsetId"), __scope, false) } getOrElse {Nil},
        __obj.readsetId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("readsetId"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_RepositoryTypeu45listFormat = new DefaultComionkinmrshl7fhir_RepositoryTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_RepositoryTypeu45listFormat extends scalaxb.XMLFormat[RepositoryTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): RepositoryTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("directlink")) => Directlink
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openapi")) => Openapi
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("login")) => LoginValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oauth")) => Oauth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => OtherValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RepositoryTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: RepositoryTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_RepositoryTypeFormat extends scalaxb.ElemNameParser[RepositoryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("repositoryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RepositoryType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      RepositoryType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[RepositoryTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RepositoryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RepositoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_QualityTypeu45listFormat = new DefaultComionkinmrshl7fhir_QualityTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_QualityTypeu45listFormat extends scalaxb.XMLFormat[QualityTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): QualityTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("indel")) => Indel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snp")) => Snp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => UnknownValue17

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QualityTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: QualityTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_QualityTypeFormat extends scalaxb.ElemNameParser[QualityType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("qualityType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QualityType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      QualityType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[QualityTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: QualityType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QualityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ServiceDefinitionTypeFormat extends scalaxb.ElemNameParser[ServiceDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ServiceDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ServiceDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "usage")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "approvalDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastReviewDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "effectivePeriod")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "topic")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contributor")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relatedArtifact")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "trigger")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dataRequirement")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operationDefinition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 =>
      ServiceDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[ContributorType2](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[RelatedArtifactType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[TriggerDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[DataRequirementType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ServiceDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.usage map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("usage"), __scope, false) } getOrElse {Nil},
        __obj.approvalDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("approvalDate"), __scope, false) } getOrElse {Nil},
        __obj.lastReviewDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lastReviewDate"), __scope, false) } getOrElse {Nil},
        __obj.effectivePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("effectivePeriod"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.topic flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("topic"), __scope, false) },
        __obj.contributor flatMap { scalaxb.toXML[ContributorType2](_, Some(fhirUrl), Some("contributor"), __scope, false) },
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.relatedArtifact flatMap { scalaxb.toXML[RelatedArtifactType](_, Some(fhirUrl), Some("relatedArtifact"), __scope, false) },
        __obj.trigger flatMap { scalaxb.toXML[TriggerDefinitionType](_, Some(fhirUrl), Some("trigger"), __scope, false) },
        __obj.dataRequirement flatMap { scalaxb.toXML[DataRequirementType](_, Some(fhirUrl), Some("dataRequirement"), __scope, false) },
        __obj.operationDefinition map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("operationDefinition"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SlotTypeFormat extends scalaxb.ElemNameParser[SlotType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Slot")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SlotType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "serviceCategory")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "serviceType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "specialty")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "appointmentType")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "schedule")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "start")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "overbooked")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      SlotType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[SlotStatus](p15, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[InstantType](p16, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[InstantType](p17, scalaxb.ElemName(node) :: stack),
        p18.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SlotType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.serviceCategory map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceCategory"), __scope, false) } getOrElse {Nil},
        __obj.serviceType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("serviceType"), __scope, false) },
        __obj.specialty flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("specialty"), __scope, false) },
        __obj.appointmentType map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("appointmentType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.schedule, Some(fhirUrl), Some("schedule"), __scope, false),
        scalaxb.toXML[SlotStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[InstantType](__obj.start, Some(fhirUrl), Some("start"), __scope, false),
        scalaxb.toXML[InstantType](__obj.end, Some(fhirUrl), Some("end"), __scope, false),
        __obj.overbooked map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("overbooked"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_SlotStatusu45listFormat = new DefaultComionkinmrshl7fhir_SlotStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SlotStatusu45listFormat extends scalaxb.XMLFormat[SlotStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SlotStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busy")) => Busy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("free")) => Free
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busy-unavailable")) => Busyu45unavailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busy-tentative")) => Busyu45tentative
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue39

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SlotStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SlotStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SlotStatusFormat extends scalaxb.ElemNameParser[SlotStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SlotStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SlotStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SlotStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SlotStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SlotStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SlotStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SpecimenTypeFormat extends scalaxb.ElemNameParser[SpecimenType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Specimen")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SpecimenType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "accessionIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "subject")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "receivedTime")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parent")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "request")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "collection")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "processing")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "container")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      SpecimenType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[SpecimenStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Specimenu46Collection](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[Specimenu46Processing](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[Specimenu46Container](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SpecimenType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.accessionIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("accessionIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[SpecimenStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[ReferenceType](__obj.subject, Some(fhirUrl), Some("subject"), __scope, false),
        __obj.receivedTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("receivedTime"), __scope, false) } getOrElse {Nil},
        __obj.parent flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("parent"), __scope, false) },
        __obj.request flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("request"), __scope, false) },
        __obj.collection map { scalaxb.toXML[Specimenu46Collection](_, Some(fhirUrl), Some("collection"), __scope, false) } getOrElse {Nil},
        __obj.processing flatMap { scalaxb.toXML[Specimenu46Processing](_, Some(fhirUrl), Some("processing"), __scope, false) },
        __obj.container flatMap { scalaxb.toXML[Specimenu46Container](_, Some(fhirUrl), Some("container"), __scope, false) },
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Specimenu46CollectionFormat extends scalaxb.ElemNameParser[Specimenu46Collection] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Specimen.Collection")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Specimenu46Collection] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "collector")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "collectedDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "collectedPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "method")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "bodySite")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Specimenu46Collection(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Specimenu46Collection, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Specimenu46Collection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.collector map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("collector"), __scope, false) } getOrElse {Nil},
        __obj.collectedDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("collectedDateTime"), __scope, false) } getOrElse {Nil},
        __obj.collectedPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("collectedPeriod"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("method"), __scope, false) } getOrElse {Nil},
        __obj.bodySite map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("bodySite"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Specimenu46ProcessingFormat extends scalaxb.ElemNameParser[Specimenu46Processing] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Specimen.Processing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Specimenu46Processing] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "procedure")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "additive")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timeDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "timePeriod")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      Specimenu46Processing(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Specimenu46Processing, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Specimenu46Processing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.procedure map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("procedure"), __scope, false) } getOrElse {Nil},
        __obj.additive flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("additive"), __scope, false) },
        __obj.timeDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("timeDateTime"), __scope, false) } getOrElse {Nil},
        __obj.timePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("timePeriod"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Specimenu46ContainerFormat extends scalaxb.ElemNameParser[Specimenu46Container] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Specimen.Container")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Specimenu46Container] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "capacity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "specimenQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "additiveCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "additiveReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      Specimenu46Container(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Specimenu46Container, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Specimenu46Container, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.capacity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("capacity"), __scope, false) } getOrElse {Nil},
        __obj.specimenQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("specimenQuantity"), __scope, false) } getOrElse {Nil},
        __obj.additiveCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("additiveCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.additiveReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("additiveReference"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_SpecimenStatusu45listFormat = new DefaultComionkinmrshl7fhir_SpecimenStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SpecimenStatusu45listFormat extends scalaxb.XMLFormat[SpecimenStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SpecimenStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("available")) => Available
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unavailable")) => UnavailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unsatisfactory")) => Unsatisfactory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue40

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SpecimenStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SpecimenStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SpecimenStatusFormat extends scalaxb.ElemNameParser[SpecimenStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SpecimenStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SpecimenStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SpecimenStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SpecimenStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SpecimenStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SpecimenStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureDefinitionTypeFormat extends scalaxb.ElemNameParser[StructureDefinitionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureDefinition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureDefinitionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "keyword")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "fhirVersion")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "mapping")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "kind")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "abstract")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contextType")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contextInvariant")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "baseDefinition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "derivation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "snapshot")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "differential")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 =>
      StructureDefinitionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[StructureDefinitionu46Mapping](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StructureDefinitionKind](p27, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BooleanTypeType](p28, scalaxb.ElemName(node) :: stack),
        p29.headOption map { scalaxb.fromXML[ExtensionContext](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p32, scalaxb.ElemName(node) :: stack),
        p33.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[TypeDerivationRule](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[StructureDefinitionu46Snapshot](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[StructureDefinitionu46Differential](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: StructureDefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.keyword flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("keyword"), __scope, false) },
        __obj.fhirVersion map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("fhirVersion"), __scope, false) } getOrElse {Nil},
        __obj.mapping flatMap { scalaxb.toXML[StructureDefinitionu46Mapping](_, Some(fhirUrl), Some("mapping"), __scope, false) },
        scalaxb.toXML[StructureDefinitionKind](__obj.kind, Some(fhirUrl), Some("kind"), __scope, false),
        scalaxb.toXML[BooleanTypeType](__obj.abstractValue, Some(fhirUrl), Some("abstract"), __scope, false),
        __obj.contextType map { scalaxb.toXML[ExtensionContext](_, Some(fhirUrl), Some("contextType"), __scope, false) } getOrElse {Nil},
        __obj.context flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("context"), __scope, false) },
        __obj.contextInvariant flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("contextInvariant"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.baseDefinition map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("baseDefinition"), __scope, false) } getOrElse {Nil},
        __obj.derivation map { scalaxb.toXML[TypeDerivationRule](_, Some(fhirUrl), Some("derivation"), __scope, false) } getOrElse {Nil},
        __obj.snapshot map { scalaxb.toXML[StructureDefinitionu46Snapshot](_, Some(fhirUrl), Some("snapshot"), __scope, false) } getOrElse {Nil},
        __obj.differential map { scalaxb.toXML[StructureDefinitionu46Differential](_, Some(fhirUrl), Some("differential"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureDefinitionu46MappingFormat extends scalaxb.ElemNameParser[StructureDefinitionu46Mapping] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureDefinition.Mapping")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureDefinitionu46Mapping] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "uri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      StructureDefinitionu46Mapping(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureDefinitionu46Mapping, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureDefinitionu46Mapping, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.identity, Some(fhirUrl), Some("identity"), __scope, false),
        __obj.uri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("uri"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureDefinitionu46SnapshotFormat extends scalaxb.ElemNameParser[StructureDefinitionu46Snapshot] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureDefinition.Snapshot")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureDefinitionu46Snapshot] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "element")) ^^
      { case p1 ~ p2 ~ p3 =>
      StructureDefinitionu46Snapshot(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[ElementDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureDefinitionu46Snapshot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureDefinitionu46Snapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.element flatMap { scalaxb.toXML[ElementDefinitionType](_, Some(fhirUrl), Some("element"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureDefinitionu46DifferentialFormat extends scalaxb.ElemNameParser[StructureDefinitionu46Differential] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureDefinition.Differential")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureDefinitionu46Differential] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "element")) ^^
      { case p1 ~ p2 ~ p3 =>
      StructureDefinitionu46Differential(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[ElementDefinitionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureDefinitionu46Differential, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureDefinitionu46Differential, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.element flatMap { scalaxb.toXML[ElementDefinitionType](_, Some(fhirUrl), Some("element"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureDefinitionKindu45listFormat = new DefaultComionkinmrshl7fhir_StructureDefinitionKindu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureDefinitionKindu45listFormat extends scalaxb.XMLFormat[StructureDefinitionKindu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureDefinitionKindu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("primitive-type")) => Primitiveu45type
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("complex-type")) => Complexu45type
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resource")) => ResourceValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("logical")) => LogicalValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureDefinitionKindu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureDefinitionKindu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureDefinitionKindFormat extends scalaxb.ElemNameParser[StructureDefinitionKind] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureDefinitionKind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureDefinitionKind] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureDefinitionKind(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureDefinitionKindu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureDefinitionKind, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureDefinitionKind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TypeDerivationRuleu45listFormat = new DefaultComionkinmrshl7fhir_TypeDerivationRuleu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TypeDerivationRuleu45listFormat extends scalaxb.XMLFormat[TypeDerivationRuleu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TypeDerivationRuleu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specialization")) => Specialization
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("constraint")) => Constraint

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TypeDerivationRuleu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TypeDerivationRuleu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TypeDerivationRuleFormat extends scalaxb.ElemNameParser[TypeDerivationRule] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TypeDerivationRule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TypeDerivationRule] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TypeDerivationRule(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TypeDerivationRuleu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TypeDerivationRule, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TypeDerivationRule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ExtensionContextu45listFormat = new DefaultComionkinmrshl7fhir_ExtensionContextu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ExtensionContextu45listFormat extends scalaxb.XMLFormat[ExtensionContextu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ExtensionContextu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resource")) => ResourceValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("datatype")) => Datatype
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extension")) => ExtensionValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ExtensionContextu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ExtensionContextu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ExtensionContextFormat extends scalaxb.ElemNameParser[ExtensionContext] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ExtensionContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ExtensionContext] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ExtensionContext(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ExtensionContextu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ExtensionContext, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ExtensionContext, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureMapTypeFormat extends scalaxb.ElemNameParser[StructureMapType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "structure")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "import")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "group")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      StructureMapType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[StructureMapu46Structure](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[StructureMapu46Group](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: StructureMapType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.structure flatMap { scalaxb.toXML[StructureMapu46Structure](_, Some(fhirUrl), Some("structure"), __scope, false) },
        __obj.importValue flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("import"), __scope, false) },
        __obj.group flatMap { scalaxb.toXML[StructureMapu46Group](_, Some(fhirUrl), Some("group"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46StructureFormat extends scalaxb.ElemNameParser[StructureMapu46Structure] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Structure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Structure] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "alias")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      StructureMapu46Structure(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StructureMapModelMode](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Structure, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Structure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        scalaxb.toXML[StructureMapModelMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.alias map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("alias"), __scope, false) } getOrElse {Nil},
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46GroupFormat extends scalaxb.ElemNameParser[StructureMapu46Group] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Group] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "extends")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "typeMode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "input")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      StructureMapu46Group(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StructureMapGroupTypeMode](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StructureMapu46Input](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[StructureMapu46Rule](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.extendsValue map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("extends"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StructureMapGroupTypeMode](__obj.typeMode, Some(fhirUrl), Some("typeMode"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.input flatMap { scalaxb.toXML[StructureMapu46Input](_, Some(fhirUrl), Some("input"), __scope, false) },
        __obj.rule flatMap { scalaxb.toXML[StructureMapu46Rule](_, Some(fhirUrl), Some("rule"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46InputFormat extends scalaxb.ElemNameParser[StructureMapu46Input] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Input")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Input] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "mode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      StructureMapu46Input(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StructureMapInputMode](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Input, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Input, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.typeValue map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StructureMapInputMode](__obj.mode, Some(fhirUrl), Some("mode"), __scope, false),
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46RuleFormat extends scalaxb.ElemNameParser[StructureMapu46Rule] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Rule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Rule] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "source")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "target")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dependent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "documentation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      StructureMapu46Rule(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[StructureMapu46Source](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[StructureMapu46Target](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[StructureMapu46Rule](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StructureMapu46Dependent](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Rule, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Rule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.source flatMap { scalaxb.toXML[StructureMapu46Source](_, Some(fhirUrl), Some("source"), __scope, false) },
        __obj.target flatMap { scalaxb.toXML[StructureMapu46Target](_, Some(fhirUrl), Some("target"), __scope, false) },
        __obj.rule flatMap { scalaxb.toXML[StructureMapu46Rule](_, Some(fhirUrl), Some("rule"), __scope, false) },
        __obj.dependent flatMap { scalaxb.toXML[StructureMapu46Dependent](_, Some(fhirUrl), Some("dependent"), __scope, false) },
        __obj.documentation map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46SourceFormat extends scalaxb.ElemNameParser[StructureMapu46Source] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Source] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "min")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "max")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValueMeta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "element")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "listMode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "variable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "condition")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "check")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 ~ p48 ~ p49 =>
      StructureMapu46Source(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p46.headOption map { scalaxb.fromXML[StructureMapSourceListMode](_, scalaxb.ElemName(node) :: stack) },
        p47.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p48.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p49.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Source, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.context, Some(fhirUrl), Some("context"), __scope, false),
        __obj.min map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("min"), __scope, false) } getOrElse {Nil},
        __obj.max map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("max"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("defaultValueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("defaultValueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("defaultValueCode"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("defaultValueDate"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("defaultValueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("defaultValueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("defaultValueId"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("defaultValueInstant"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("defaultValueInteger"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("defaultValueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("defaultValueOid"), __scope, false) } getOrElse {Nil},
        __obj.defaultValuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("defaultValuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("defaultValueString"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("defaultValueTime"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("defaultValueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("defaultValueUri"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("defaultValueAddress"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("defaultValueAge"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("defaultValueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("defaultValueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("defaultValueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("defaultValueCoding"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("defaultValueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("defaultValueCount"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("defaultValueDistance"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("defaultValueDuration"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("defaultValueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("defaultValueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("defaultValueMoney"), __scope, false) } getOrElse {Nil},
        __obj.defaultValuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("defaultValuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("defaultValueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("defaultValueRange"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("defaultValueRatio"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("defaultValueReference"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("defaultValueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("defaultValueSignature"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("defaultValueTiming"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("defaultValueMeta"), __scope, false) } getOrElse {Nil},
        __obj.element map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("element"), __scope, false) } getOrElse {Nil},
        __obj.listMode map { scalaxb.toXML[StructureMapSourceListMode](_, Some(fhirUrl), Some("listMode"), __scope, false) } getOrElse {Nil},
        __obj.variable map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("variable"), __scope, false) } getOrElse {Nil},
        __obj.condition map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("condition"), __scope, false) } getOrElse {Nil},
        __obj.check map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("check"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46TargetFormat extends scalaxb.ElemNameParser[StructureMapu46Target] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Target] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contextType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "element")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "variable")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "listMode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "listRuleId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "transform")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      StructureMapu46Target(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StructureMapContextType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[StructureMapTargetListMode](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StructureMapTransform](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[StructureMapu46Parameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Target, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.context map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.contextType map { scalaxb.toXML[StructureMapContextType](_, Some(fhirUrl), Some("contextType"), __scope, false) } getOrElse {Nil},
        __obj.element map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("element"), __scope, false) } getOrElse {Nil},
        __obj.variable map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("variable"), __scope, false) } getOrElse {Nil},
        __obj.listMode flatMap { scalaxb.toXML[StructureMapTargetListMode](_, Some(fhirUrl), Some("listMode"), __scope, false) },
        __obj.listRuleId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("listRuleId"), __scope, false) } getOrElse {Nil},
        __obj.transform map { scalaxb.toXML[StructureMapTransform](_, Some(fhirUrl), Some("transform"), __scope, false) } getOrElse {Nil},
        __obj.parameter flatMap { scalaxb.toXML[StructureMapu46Parameter](_, Some(fhirUrl), Some("parameter"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46ParameterFormat extends scalaxb.ElemNameParser[StructureMapu46Parameter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      StructureMapu46Parameter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_StructureMapu46DependentFormat extends scalaxb.ElemNameParser[StructureMapu46Dependent] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMap.Dependent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapu46Dependent] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "variable")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      StructureMapu46Dependent(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapu46Dependent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapu46Dependent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.variable flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("variable"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapInputModeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapInputModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapInputModeu45listFormat extends scalaxb.XMLFormat[StructureMapInputModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapInputModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("source")) => SourceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("target")) => TargetValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapInputModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapInputModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapInputModeFormat extends scalaxb.ElemNameParser[StructureMapInputMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapInputMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapInputMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapInputMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapInputModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapInputMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapInputMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapContextTypeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapContextTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapContextTypeu45listFormat extends scalaxb.XMLFormat[StructureMapContextTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapContextTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("type")) => Type
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("variable")) => Variable

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapContextTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapContextTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapContextTypeFormat extends scalaxb.ElemNameParser[StructureMapContextType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapContextType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapContextType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapContextType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapContextTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapContextType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapContextType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapTargetListModeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapTargetListModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapTargetListModeu45listFormat extends scalaxb.XMLFormat[StructureMapTargetListModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapTargetListModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("first")) => FirstValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("share")) => Share
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("last")) => LastValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collate")) => Collate

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapTargetListModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapTargetListModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapTargetListModeFormat extends scalaxb.ElemNameParser[StructureMapTargetListMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapTargetListMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapTargetListMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapTargetListMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapTargetListModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapTargetListMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapTargetListMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapTransformu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapTransformu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapTransformu45listFormat extends scalaxb.XMLFormat[StructureMapTransformu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapTransformu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("create")) => Create
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("copy")) => Copy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("truncate")) => Truncate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("escape")) => Escape
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cast")) => Cast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("append")) => Append
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("translate")) => Translate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reference")) => ReferenceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateOp")) => DateOp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uuid")) => UuidValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pointer")) => Pointer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("evaluate")) => Evaluate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cc")) => Cc
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("c")) => C
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("qty")) => Qty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("id")) => IdValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cp")) => Cp

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapTransformu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapTransformu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapTransformFormat extends scalaxb.ElemNameParser[StructureMapTransform] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapTransform")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapTransform] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapTransform(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapTransformu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapTransform, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapTransform, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapSourceListModeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapSourceListModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapSourceListModeu45listFormat extends scalaxb.XMLFormat[StructureMapSourceListModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapSourceListModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("first")) => First
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not_first")) => Not_first
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("last")) => Last
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("not_last")) => Not_last
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("only_one")) => Only_one

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapSourceListModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapSourceListModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapSourceListModeFormat extends scalaxb.ElemNameParser[StructureMapSourceListMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapSourceListMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapSourceListMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapSourceListMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapSourceListModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapSourceListMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapSourceListMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapGroupTypeModeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapGroupTypeModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapGroupTypeModeu45listFormat extends scalaxb.XMLFormat[StructureMapGroupTypeModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapGroupTypeModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => NoneTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("types")) => Types
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("type-and-types")) => Typeu45andu45types

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapGroupTypeModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapGroupTypeModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapGroupTypeModeFormat extends scalaxb.ElemNameParser[StructureMapGroupTypeMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapGroupTypeMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapGroupTypeMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapGroupTypeMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapGroupTypeModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapGroupTypeMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapGroupTypeMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_StructureMapModelModeu45listFormat = new DefaultComionkinmrshl7fhir_StructureMapModelModeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_StructureMapModelModeu45listFormat extends scalaxb.XMLFormat[StructureMapModelModeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): StructureMapModelModeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("source")) => Source
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("queried")) => Queried
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("target")) => Target
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("produced")) => Produced

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StructureMapModelModeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: StructureMapModelModeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_StructureMapModelModeFormat extends scalaxb.ElemNameParser[StructureMapModelMode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("StructureMapModelMode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StructureMapModelMode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      StructureMapModelMode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[StructureMapModelModeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: StructureMapModelMode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: StructureMapModelMode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SubscriptionTypeFormat extends scalaxb.ElemNameParser[SubscriptionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Subscription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SubscriptionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "end")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "criteria")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "error")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "channel")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "tag")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      SubscriptionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SubscriptionStatus](p9, scalaxb.ElemName(node) :: stack),
        p10 map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Subscriptionu46Channel](p15, scalaxb.ElemName(node) :: stack),
        p16 map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SubscriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[SubscriptionStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.contact flatMap { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.end map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("end"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.reason, Some(fhirUrl), Some("reason"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.criteria, Some(fhirUrl), Some("criteria"), __scope, false),
        __obj.error map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("error"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Subscriptionu46Channel](__obj.channel, Some(fhirUrl), Some("channel"), __scope, false),
        __obj.tag flatMap { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("tag"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Subscriptionu46ChannelFormat extends scalaxb.ElemNameParser[Subscriptionu46Channel] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Subscription.Channel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Subscriptionu46Channel] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "endpoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "payload")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "header")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      Subscriptionu46Channel(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SubscriptionChannelType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Subscriptionu46Channel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Subscriptionu46Channel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[SubscriptionChannelType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.endpoint map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("endpoint"), __scope, false) } getOrElse {Nil},
        __obj.payload map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("payload"), __scope, false) } getOrElse {Nil},
        __obj.header flatMap { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("header"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SubscriptionStatusu45listFormat = new DefaultComionkinmrshl7fhir_SubscriptionStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SubscriptionStatusu45listFormat extends scalaxb.XMLFormat[SubscriptionStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SubscriptionStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requested")) => Requested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => Error
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("off")) => Off

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SubscriptionStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SubscriptionStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SubscriptionStatusFormat extends scalaxb.ElemNameParser[SubscriptionStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SubscriptionStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SubscriptionStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SubscriptionStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SubscriptionStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SubscriptionStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SubscriptionStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_SubscriptionChannelTypeu45listFormat = new DefaultComionkinmrshl7fhir_SubscriptionChannelTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SubscriptionChannelTypeu45listFormat extends scalaxb.XMLFormat[SubscriptionChannelTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SubscriptionChannelTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rest-hook")) => Restu45hook
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("websocket")) => Websocket
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("email")) => Email
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sms")) => Sms
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("message")) => Message

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SubscriptionChannelTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SubscriptionChannelTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SubscriptionChannelTypeFormat extends scalaxb.ElemNameParser[SubscriptionChannelType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SubscriptionChannelType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SubscriptionChannelType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SubscriptionChannelType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SubscriptionChannelTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SubscriptionChannelType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SubscriptionChannelType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SubstanceTypeFormat extends scalaxb.ElemNameParser[SubstanceType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Substance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SubstanceType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "instance")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "ingredient")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      SubstanceType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FHIRSubstanceStatus](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[Substanceu46Instance](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[Substanceu46Ingredient](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SubstanceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FHIRSubstanceStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.category flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.instance flatMap { scalaxb.toXML[Substanceu46Instance](_, Some(fhirUrl), Some("instance"), __scope, false) },
        __obj.ingredient flatMap { scalaxb.toXML[Substanceu46Ingredient](_, Some(fhirUrl), Some("ingredient"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Substanceu46InstanceFormat extends scalaxb.ElemNameParser[Substanceu46Instance] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Substance.Instance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Substanceu46Instance] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expiry")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Substanceu46Instance(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Substanceu46Instance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Substanceu46Instance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.expiry map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("expiry"), __scope, false) } getOrElse {Nil},
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Substanceu46IngredientFormat extends scalaxb.ElemNameParser[Substanceu46Ingredient] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Substance.Ingredient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Substanceu46Ingredient] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "substanceCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "substanceReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Substanceu46Ingredient(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Substanceu46Ingredient, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Substanceu46Ingredient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.substanceCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("substanceCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.substanceReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("substanceReference"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_FHIRSubstanceStatusu45listFormat = new DefaultComionkinmrshl7fhir_FHIRSubstanceStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FHIRSubstanceStatusu45listFormat extends scalaxb.XMLFormat[FHIRSubstanceStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FHIRSubstanceStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => ActiveValue24
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inactive")) => InactiveValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue41

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FHIRSubstanceStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FHIRSubstanceStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FHIRSubstanceStatusFormat extends scalaxb.ElemNameParser[FHIRSubstanceStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FHIRSubstanceStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FHIRSubstanceStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FHIRSubstanceStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FHIRSubstanceStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FHIRSubstanceStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FHIRSubstanceStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SupplyDeliveryTypeFormat extends scalaxb.ElemNameParser[SupplyDeliveryType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyDelivery")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyDeliveryType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "suppliedItem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "supplier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "receiver")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      SupplyDeliveryType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[SupplyDeliveryStatus](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[SupplyDeliveryu46SuppliedItem](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SupplyDeliveryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        __obj.status map { scalaxb.toXML[SupplyDeliveryStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.suppliedItem map { scalaxb.toXML[SupplyDeliveryu46SuppliedItem](_, Some(fhirUrl), Some("suppliedItem"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("occurrenceTiming"), __scope, false) } getOrElse {Nil},
        __obj.supplier map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supplier"), __scope, false) } getOrElse {Nil},
        __obj.destination map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.receiver flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("receiver"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SupplyDeliveryu46SuppliedItemFormat extends scalaxb.ElemNameParser[SupplyDeliveryu46SuppliedItem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyDelivery.SuppliedItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyDeliveryu46SuppliedItem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      SupplyDeliveryu46SuppliedItem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SupplyDeliveryu46SuppliedItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SupplyDeliveryu46SuppliedItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.quantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.itemCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("itemCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.itemReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("itemReference"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_SupplyDeliveryStatusu45listFormat = new DefaultComionkinmrshl7fhir_SupplyDeliveryStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SupplyDeliveryStatusu45listFormat extends scalaxb.XMLFormat[SupplyDeliveryStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SupplyDeliveryStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue18
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abandoned")) => Abandoned
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue42

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SupplyDeliveryStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SupplyDeliveryStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SupplyDeliveryStatusFormat extends scalaxb.ElemNameParser[SupplyDeliveryStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyDeliveryStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyDeliveryStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SupplyDeliveryStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SupplyDeliveryStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SupplyDeliveryStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SupplyDeliveryStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_SupplyRequestTypeFormat extends scalaxb.ElemNameParser[SupplyRequestType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyRequestType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "category")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "orderedItem")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrencePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "occurrenceTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "supplier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deliverFrom")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "deliverTo")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      SupplyRequestType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[SupplyRequestStatus](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[SupplyRequestu46OrderedItem](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[SupplyRequestu46Requester](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SupplyRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[SupplyRequestStatus](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.orderedItem map { scalaxb.toXML[SupplyRequestu46OrderedItem](_, Some(fhirUrl), Some("orderedItem"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("occurrenceDateTime"), __scope, false) } getOrElse {Nil},
        __obj.occurrencePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("occurrencePeriod"), __scope, false) } getOrElse {Nil},
        __obj.occurrenceTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("occurrenceTiming"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[SupplyRequestu46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.supplier flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("supplier"), __scope, false) },
        __obj.reasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.reasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) } getOrElse {Nil},
        __obj.deliverFrom map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("deliverFrom"), __scope, false) } getOrElse {Nil},
        __obj.deliverTo map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("deliverTo"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SupplyRequestu46OrderedItemFormat extends scalaxb.ElemNameParser[SupplyRequestu46OrderedItem] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyRequest.OrderedItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyRequestu46OrderedItem] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "quantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "itemReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      SupplyRequestu46OrderedItem(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Quantityable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SupplyRequestu46OrderedItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SupplyRequestu46OrderedItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[Quantityable](__obj.quantity, Some(fhirUrl), Some("quantity"), __scope, false),
        __obj.itemCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("itemCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.itemReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("itemReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_SupplyRequestu46RequesterFormat extends scalaxb.ElemNameParser[SupplyRequestu46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyRequest.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyRequestu46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      SupplyRequestu46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SupplyRequestu46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SupplyRequestu46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_SupplyRequestStatusu45listFormat = new DefaultComionkinmrshl7fhir_SupplyRequestStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_SupplyRequestStatusu45listFormat extends scalaxb.XMLFormat[SupplyRequestStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SupplyRequestStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => Draft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => Active
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => Suspended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => Cancelled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => Completed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45error
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => Unknown

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SupplyRequestStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SupplyRequestStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_SupplyRequestStatusFormat extends scalaxb.ElemNameParser[SupplyRequestStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("SupplyRequestStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SupplyRequestStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      SupplyRequestStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SupplyRequestStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: SupplyRequestStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SupplyRequestStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TaskTypeFormat extends scalaxb.ElemNameParser[TaskType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Task")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TaskType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definitionUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "definitionReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "basedOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "groupIdentifier")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "partOf")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "statusReason")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "businessStatus")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "intent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "priority")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "focus")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "for")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "context")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "executionPeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "authoredOn")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lastModified")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requester")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "performerType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "owner")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reason")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "relevantHistory")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "restriction")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "input")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "output")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 =>
      TaskType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TaskStatus](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[RequestIntent](p18, scalaxb.ElemName(node) :: stack),
        p19.headOption map { scalaxb.fromXML[RequestPriority](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[Tasku46Requester](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[Tasku46Restriction](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[Tasku46Input](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[Tasku46Output](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: TaskType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.definitionUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("definitionUri"), __scope, false) } getOrElse {Nil},
        __obj.definitionReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("definitionReference"), __scope, false) } getOrElse {Nil},
        __obj.basedOn flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("basedOn"), __scope, false) },
        __obj.groupIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("groupIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.partOf flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("partOf"), __scope, false) },
        scalaxb.toXML[TaskStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.statusReason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("statusReason"), __scope, false) } getOrElse {Nil},
        __obj.businessStatus map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("businessStatus"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[RequestIntent](__obj.intent, Some(fhirUrl), Some("intent"), __scope, false),
        __obj.priority map { scalaxb.toXML[RequestPriority](_, Some(fhirUrl), Some("priority"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.focus map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("focus"), __scope, false) } getOrElse {Nil},
        __obj.forValue map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("for"), __scope, false) } getOrElse {Nil},
        __obj.context map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("context"), __scope, false) } getOrElse {Nil},
        __obj.executionPeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("executionPeriod"), __scope, false) } getOrElse {Nil},
        __obj.authoredOn map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("authoredOn"), __scope, false) } getOrElse {Nil},
        __obj.lastModified map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("lastModified"), __scope, false) } getOrElse {Nil},
        __obj.requester map { scalaxb.toXML[Tasku46Requester](_, Some(fhirUrl), Some("requester"), __scope, false) } getOrElse {Nil},
        __obj.performerType flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("performerType"), __scope, false) },
        __obj.owner map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("owner"), __scope, false) } getOrElse {Nil},
        __obj.reason map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reason"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) },
        __obj.relevantHistory flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("relevantHistory"), __scope, false) },
        __obj.restriction map { scalaxb.toXML[Tasku46Restriction](_, Some(fhirUrl), Some("restriction"), __scope, false) } getOrElse {Nil},
        __obj.input flatMap { scalaxb.toXML[Tasku46Input](_, Some(fhirUrl), Some("input"), __scope, false) },
        __obj.output flatMap { scalaxb.toXML[Tasku46Output](_, Some(fhirUrl), Some("output"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Tasku46RequesterFormat extends scalaxb.ElemNameParser[Tasku46Requester] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Task.Requester")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Tasku46Requester] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "agent")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "onBehalfOf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Tasku46Requester(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Tasku46Requester, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Tasku46Requester, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.agent, Some(fhirUrl), Some("agent"), __scope, false),
        __obj.onBehalfOf map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("onBehalfOf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Tasku46RestrictionFormat extends scalaxb.ElemNameParser[Tasku46Restriction] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Task.Restriction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Tasku46Restriction] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "repetitions")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "period")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "recipient")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Tasku46Restriction(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Tasku46Restriction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Tasku46Restriction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.repetitions map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("repetitions"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.recipient flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("recipient"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_Tasku46InputFormat extends scalaxb.ElemNameParser[Tasku46Input] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Task.Input")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Tasku46Input] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMeta")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 =>
      Tasku46Input(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Tasku46Input, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Tasku46Input, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.valueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("valueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("valueInstant"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("valueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.valueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("valueOid"), __scope, false) } getOrElse {Nil},
        __obj.valuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("valuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("valueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("valueAddress"), __scope, false) } getOrElse {Nil},
        __obj.valueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("valueAge"), __scope, false) } getOrElse {Nil},
        __obj.valueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("valueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("valueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.valueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("valueCount"), __scope, false) } getOrElse {Nil},
        __obj.valueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("valueDistance"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil},
        __obj.valueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("valueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.valueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("valueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.valueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("valueMoney"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("valueSignature"), __scope, false) } getOrElse {Nil},
        __obj.valueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("valueTiming"), __scope, false) } getOrElse {Nil},
        __obj.valueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("valueMeta"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_Tasku46OutputFormat extends scalaxb.ElemNameParser[Tasku46Output] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("Task.Output")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Tasku46Output] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBase64Binary")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDateTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInstant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMarkdown")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueOid")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePositiveInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTime")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUnsignedInt")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAddress")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAge")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAnnotation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueAttachment")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCoding")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueContactPoint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCount")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDistance")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDuration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueHumanName")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueIdentifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMoney")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valuePeriod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueQuantity")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRange")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueRatio")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueReference")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSampledData")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueSignature")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueTiming")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueMeta")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 =>
      Tasku46Output(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeableConceptType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Base64BinaryTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[InstantType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[OidType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[PositiveIntType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[TimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[UnsignedIntType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[AddressType2](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[AgeType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[AttachmentType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ContactPointType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[CountType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[DistanceType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[DurationType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[HumanNameType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[MoneyType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[PeriodType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[RangeTypeType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[RatioType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[SampledDataType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[SignatureType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[TimingType](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Tasku46Output, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Tasku46Output, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeableConceptType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        __obj.valueBase64Binary map { scalaxb.toXML[Base64BinaryTypeType](_, Some(fhirUrl), Some("valueBase64Binary"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil},
        __obj.valueDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("valueDate"), __scope, false) } getOrElse {Nil},
        __obj.valueDateTime map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("valueDateTime"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("valueId"), __scope, false) } getOrElse {Nil},
        __obj.valueInstant map { scalaxb.toXML[InstantType](_, Some(fhirUrl), Some("valueInstant"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueMarkdown map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("valueMarkdown"), __scope, false) } getOrElse {Nil},
        __obj.valueOid map { scalaxb.toXML[OidType](_, Some(fhirUrl), Some("valueOid"), __scope, false) } getOrElse {Nil},
        __obj.valuePositiveInt map { scalaxb.toXML[PositiveIntType](_, Some(fhirUrl), Some("valuePositiveInt"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueTime map { scalaxb.toXML[TimeType](_, Some(fhirUrl), Some("valueTime"), __scope, false) } getOrElse {Nil},
        __obj.valueUnsignedInt map { scalaxb.toXML[UnsignedIntType](_, Some(fhirUrl), Some("valueUnsignedInt"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueAddress map { scalaxb.toXML[AddressType2](_, Some(fhirUrl), Some("valueAddress"), __scope, false) } getOrElse {Nil},
        __obj.valueAge map { scalaxb.toXML[AgeType](_, Some(fhirUrl), Some("valueAge"), __scope, false) } getOrElse {Nil},
        __obj.valueAnnotation map { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("valueAnnotation"), __scope, false) } getOrElse {Nil},
        __obj.valueAttachment map { scalaxb.toXML[AttachmentType](_, Some(fhirUrl), Some("valueAttachment"), __scope, false) } getOrElse {Nil},
        __obj.valueCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("valueCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.valueCoding map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("valueCoding"), __scope, false) } getOrElse {Nil},
        __obj.valueContactPoint map { scalaxb.toXML[ContactPointType](_, Some(fhirUrl), Some("valueContactPoint"), __scope, false) } getOrElse {Nil},
        __obj.valueCount map { scalaxb.toXML[CountType](_, Some(fhirUrl), Some("valueCount"), __scope, false) } getOrElse {Nil},
        __obj.valueDistance map { scalaxb.toXML[DistanceType](_, Some(fhirUrl), Some("valueDistance"), __scope, false) } getOrElse {Nil},
        __obj.valueDuration map { scalaxb.toXML[DurationType](_, Some(fhirUrl), Some("valueDuration"), __scope, false) } getOrElse {Nil},
        __obj.valueHumanName map { scalaxb.toXML[HumanNameType](_, Some(fhirUrl), Some("valueHumanName"), __scope, false) } getOrElse {Nil},
        __obj.valueIdentifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("valueIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.valueMoney map { scalaxb.toXML[MoneyType](_, Some(fhirUrl), Some("valueMoney"), __scope, false) } getOrElse {Nil},
        __obj.valuePeriod map { scalaxb.toXML[PeriodType](_, Some(fhirUrl), Some("valuePeriod"), __scope, false) } getOrElse {Nil},
        __obj.valueQuantity map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("valueQuantity"), __scope, false) } getOrElse {Nil},
        __obj.valueRange map { scalaxb.toXML[RangeTypeType](_, Some(fhirUrl), Some("valueRange"), __scope, false) } getOrElse {Nil},
        __obj.valueRatio map { scalaxb.toXML[RatioType](_, Some(fhirUrl), Some("valueRatio"), __scope, false) } getOrElse {Nil},
        __obj.valueReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("valueReference"), __scope, false) } getOrElse {Nil},
        __obj.valueSampledData map { scalaxb.toXML[SampledDataType](_, Some(fhirUrl), Some("valueSampledData"), __scope, false) } getOrElse {Nil},
        __obj.valueSignature map { scalaxb.toXML[SignatureType](_, Some(fhirUrl), Some("valueSignature"), __scope, false) } getOrElse {Nil},
        __obj.valueTiming map { scalaxb.toXML[TimingType](_, Some(fhirUrl), Some("valueTiming"), __scope, false) } getOrElse {Nil},
        __obj.valueMeta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("valueMeta"), __scope, false) } getOrElse {Nil})

  }

  def buildComionkinmrshl7fhir_TaskStatusu45listFormat = new DefaultComionkinmrshl7fhir_TaskStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TaskStatusu45listFormat extends scalaxb.XMLFormat[TaskStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TaskStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("draft")) => DraftValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requested")) => RequestedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("received")) => Received
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accepted")) => AcceptedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rejected")) => RejectedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ready")) => Ready
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancelled")) => CancelledValue15
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("on-hold")) => Onu45holdValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("failed")) => Failed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue19
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue43

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TaskStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TaskStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TaskStatusFormat extends scalaxb.ElemNameParser[TaskStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TaskStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TaskStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TaskStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TaskStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TaskStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TaskStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestReportTypeFormat extends scalaxb.ElemNameParser[TestReportType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "testScript")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "result")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "score")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "tester")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "issued")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "participant")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "setup")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "test")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "teardown")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      TestReportType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestReportStatus](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ReferenceType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[TestReportResult](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[TestReportu46Participant](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[TestReportu46Setup](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[TestReportu46Test](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[TestReportu46Teardown](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: TestReportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[TestReportStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        scalaxb.toXML[ReferenceType](__obj.testScript, Some(fhirUrl), Some("testScript"), __scope, false),
        scalaxb.toXML[TestReportResult](__obj.result, Some(fhirUrl), Some("result"), __scope, false),
        __obj.score map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("score"), __scope, false) } getOrElse {Nil},
        __obj.tester map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("tester"), __scope, false) } getOrElse {Nil},
        __obj.issued map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("issued"), __scope, false) } getOrElse {Nil},
        __obj.participant flatMap { scalaxb.toXML[TestReportu46Participant](_, Some(fhirUrl), Some("participant"), __scope, false) },
        __obj.setup map { scalaxb.toXML[TestReportu46Setup](_, Some(fhirUrl), Some("setup"), __scope, false) } getOrElse {Nil},
        __obj.test flatMap { scalaxb.toXML[TestReportu46Test](_, Some(fhirUrl), Some("test"), __scope, false) },
        __obj.teardown map { scalaxb.toXML[TestReportu46Teardown](_, Some(fhirUrl), Some("teardown"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46ParticipantFormat extends scalaxb.ElemNameParser[TestReportu46Participant] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Participant")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Participant] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "uri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestReportu46Participant(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestReportParticipantType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[UriType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Participant, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Participant, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TestReportParticipantType](__obj.typeValue, Some(fhirUrl), Some("type"), __scope, false),
        scalaxb.toXML[UriType](__obj.uri, Some(fhirUrl), Some("uri"), __scope, false),
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46SetupFormat extends scalaxb.ElemNameParser[TestReportu46Setup] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Setup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Setup] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestReportu46Setup(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[TestReportu46Action](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Setup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Setup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[TestReportu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46ActionFormat extends scalaxb.ElemNameParser[TestReportu46Action] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Action")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Action] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assert")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestReportu46Action(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[TestReportu46Operation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[TestReportu46Assert](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Action, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Action, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.operation map { scalaxb.toXML[TestReportu46Operation](_, Some(fhirUrl), Some("operation"), __scope, false) } getOrElse {Nil},
        __obj.assert map { scalaxb.toXML[TestReportu46Assert](_, Some(fhirUrl), Some("assert"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46OperationFormat extends scalaxb.ElemNameParser[TestReportu46Operation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Operation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Operation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "result")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "message")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestReportu46Operation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestReportActionResult](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Operation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Operation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TestReportActionResult](__obj.result, Some(fhirUrl), Some("result"), __scope, false),
        __obj.message map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("message"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46AssertFormat extends scalaxb.ElemNameParser[TestReportu46Assert] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Assert")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Assert] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "result")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "message")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestReportu46Assert(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestReportActionResult](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Assert, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Assert, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TestReportActionResult](__obj.result, Some(fhirUrl), Some("result"), __scope, false),
        __obj.message map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("message"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46TestFormat extends scalaxb.ElemNameParser[TestReportu46Test] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Test")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Test] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestReportu46Test(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[TestReportu46Action1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Test, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Test, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.action flatMap { scalaxb.toXML[TestReportu46Action1](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46Action1Format extends scalaxb.ElemNameParser[TestReportu46Action1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Action1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Action1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assert")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestReportu46Action1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[TestReportu46Operation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[TestReportu46Assert](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Action1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Action1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.operation map { scalaxb.toXML[TestReportu46Operation](_, Some(fhirUrl), Some("operation"), __scope, false) } getOrElse {Nil},
        __obj.assert map { scalaxb.toXML[TestReportu46Assert](_, Some(fhirUrl), Some("assert"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46TeardownFormat extends scalaxb.ElemNameParser[TestReportu46Teardown] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Teardown")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Teardown] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestReportu46Teardown(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[TestReportu46Action2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Teardown, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Teardown, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[TestReportu46Action2](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestReportu46Action2Format extends scalaxb.ElemNameParser[TestReportu46Action2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReport.Action2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportu46Action2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "operation")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestReportu46Action2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestReportu46Operation](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportu46Action2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportu46Action2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TestReportu46Operation](__obj.operation, Some(fhirUrl), Some("operation"), __scope, false))

  }

  def buildComionkinmrshl7fhir_TestReportStatusu45listFormat = new DefaultComionkinmrshl7fhir_TestReportStatusu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TestReportStatusu45listFormat extends scalaxb.XMLFormat[TestReportStatusu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TestReportStatusu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completed")) => CompletedValue20
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in-progress")) => Inu45progressValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waiting")) => Waiting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopped")) => StoppedValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entered-in-error")) => Enteredu45inu45errorValue44

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestReportStatusu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TestReportStatusu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TestReportStatusFormat extends scalaxb.ElemNameParser[TestReportStatus] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReportStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportStatus] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TestReportStatus(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TestReportStatusu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TestReportActionResultu45listFormat = new DefaultComionkinmrshl7fhir_TestReportActionResultu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TestReportActionResultu45listFormat extends scalaxb.XMLFormat[TestReportActionResultu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TestReportActionResultu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pass")) => Pass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("skip")) => Skip
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fail")) => Fail
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("warning")) => WarningValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("error")) => ErrorValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestReportActionResultu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TestReportActionResultu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TestReportActionResultFormat extends scalaxb.ElemNameParser[TestReportActionResult] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReportActionResult")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportActionResult] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TestReportActionResult(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TestReportActionResultu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportActionResult, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportActionResult, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TestReportParticipantTypeu45listFormat = new DefaultComionkinmrshl7fhir_TestReportParticipantTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TestReportParticipantTypeu45listFormat extends scalaxb.XMLFormat[TestReportParticipantTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TestReportParticipantTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("test-engine")) => Testu45engine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("client")) => ClientValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("server")) => ServerValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestReportParticipantTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TestReportParticipantTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TestReportParticipantTypeFormat extends scalaxb.ElemNameParser[TestReportParticipantType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReportParticipantType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportParticipantType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TestReportParticipantType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TestReportParticipantTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportParticipantType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportParticipantType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TestReportResultu45listFormat = new DefaultComionkinmrshl7fhir_TestReportResultu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TestReportResultu45listFormat extends scalaxb.XMLFormat[TestReportResultu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TestReportResultu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pass")) => PassValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fail")) => FailValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pending")) => PendingValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestReportResultu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TestReportResultu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TestReportResultFormat extends scalaxb.ElemNameParser[TestReportResult] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestReportResult")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestReportResult] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TestReportResult(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TestReportResultu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestReportResult, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestReportResult, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptTypeFormat extends scalaxb.ElemNameParser[TestScriptType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "origin")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "metadata")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "fixture")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "profile")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "variable")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "ruleset")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "setup")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "test")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "teardown")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 =>
      TestScriptType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[TestScriptu46Origin](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[TestScriptu46Destination](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[TestScriptu46Metadata](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[TestScriptu46Fixture](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[TestScriptu46Variable](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[TestScriptu46Rule](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[TestScriptu46Ruleset](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[TestScriptu46Setup](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[TestScriptu46Test](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[TestScriptu46Teardown](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: TestScriptType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.identifier map { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.origin flatMap { scalaxb.toXML[TestScriptu46Origin](_, Some(fhirUrl), Some("origin"), __scope, false) },
        __obj.destination flatMap { scalaxb.toXML[TestScriptu46Destination](_, Some(fhirUrl), Some("destination"), __scope, false) },
        __obj.metadata map { scalaxb.toXML[TestScriptu46Metadata](_, Some(fhirUrl), Some("metadata"), __scope, false) } getOrElse {Nil},
        __obj.fixture flatMap { scalaxb.toXML[TestScriptu46Fixture](_, Some(fhirUrl), Some("fixture"), __scope, false) },
        __obj.profile flatMap { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("profile"), __scope, false) },
        __obj.variable flatMap { scalaxb.toXML[TestScriptu46Variable](_, Some(fhirUrl), Some("variable"), __scope, false) },
        __obj.rule flatMap { scalaxb.toXML[TestScriptu46Rule](_, Some(fhirUrl), Some("rule"), __scope, false) },
        __obj.ruleset flatMap { scalaxb.toXML[TestScriptu46Ruleset](_, Some(fhirUrl), Some("ruleset"), __scope, false) },
        __obj.setup map { scalaxb.toXML[TestScriptu46Setup](_, Some(fhirUrl), Some("setup"), __scope, false) } getOrElse {Nil},
        __obj.test flatMap { scalaxb.toXML[TestScriptu46Test](_, Some(fhirUrl), Some("test"), __scope, false) },
        __obj.teardown map { scalaxb.toXML[TestScriptu46Teardown](_, Some(fhirUrl), Some("teardown"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46OriginFormat extends scalaxb.ElemNameParser[TestScriptu46Origin] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Origin")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Origin] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "index")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "profile")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Origin(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IntegerType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodingType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Origin, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Origin, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IntegerType](__obj.index, Some(fhirUrl), Some("index"), __scope, false),
        scalaxb.toXML[CodingType](__obj.profile, Some(fhirUrl), Some("profile"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46DestinationFormat extends scalaxb.ElemNameParser[TestScriptu46Destination] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Destination")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Destination] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "index")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "profile")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Destination(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IntegerType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodingType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Destination, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Destination, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IntegerType](__obj.index, Some(fhirUrl), Some("index"), __scope, false),
        scalaxb.toXML[CodingType](__obj.profile, Some(fhirUrl), Some("profile"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46MetadataFormat extends scalaxb.ElemNameParser[TestScriptu46Metadata] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Metadata")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Metadata] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "capability")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Metadata(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[TestScriptu46Link](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[TestScriptu46Capability](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Metadata, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Metadata, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.link flatMap { scalaxb.toXML[TestScriptu46Link](_, Some(fhirUrl), Some("link"), __scope, false) },
        __obj.capability flatMap { scalaxb.toXML[TestScriptu46Capability](_, Some(fhirUrl), Some("capability"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46LinkFormat extends scalaxb.ElemNameParser[TestScriptu46Link] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Link")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Link] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Link(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.url, Some(fhirUrl), Some("url"), __scope, false),
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46CapabilityFormat extends scalaxb.ElemNameParser[TestScriptu46Capability] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Capability")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Capability] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "required")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "validated")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "origin")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "link")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "capabilities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      TestScriptu46Capability(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p9, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Capability, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Capability, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.required map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("required"), __scope, false) } getOrElse {Nil},
        __obj.validated map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("validated"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.origin flatMap { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("origin"), __scope, false) },
        __obj.destination map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.link flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("link"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.capabilities, Some(fhirUrl), Some("capabilities"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46FixtureFormat extends scalaxb.ElemNameParser[TestScriptu46Fixture] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Fixture")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Fixture] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "autocreate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "autodelete")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestScriptu46Fixture(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Fixture, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Fixture, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.autocreate map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("autocreate"), __scope, false) } getOrElse {Nil},
        __obj.autodelete map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("autodelete"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46VariableFormat extends scalaxb.ElemNameParser[TestScriptu46Variable] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Variable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Variable] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "defaultValue")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "headerField")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "hint")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      TestScriptu46Variable(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Variable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Variable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.defaultValue map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("defaultValue"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil},
        __obj.headerField map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("headerField"), __scope, false) } getOrElse {Nil},
        __obj.hint map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("hint"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil},
        __obj.sourceId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("sourceId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46RuleFormat extends scalaxb.ElemNameParser[TestScriptu46Rule] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Rule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Rule] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "param")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Rule(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Param](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Rule, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Rule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.resource, Some(fhirUrl), Some("resource"), __scope, false),
        __obj.param flatMap { scalaxb.toXML[TestScriptu46Param](_, Some(fhirUrl), Some("param"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46ParamFormat extends scalaxb.ElemNameParser[TestScriptu46Param] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Param")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Param] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Param(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Param, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Param, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.value map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46RulesetFormat extends scalaxb.ElemNameParser[TestScriptu46Ruleset] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Ruleset")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Ruleset] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Ruleset(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ReferenceType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Rule1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Ruleset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Ruleset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[ReferenceType](__obj.resource, Some(fhirUrl), Some("resource"), __scope, false),
        __obj.rule flatMap { scalaxb.toXML[TestScriptu46Rule1](_, Some(fhirUrl), Some("rule"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Rule1Format extends scalaxb.ElemNameParser[TestScriptu46Rule1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Rule1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Rule1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "ruleId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "param")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Rule1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Param1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Rule1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Rule1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.ruleId, Some(fhirUrl), Some("ruleId"), __scope, false),
        __obj.param flatMap { scalaxb.toXML[TestScriptu46Param1](_, Some(fhirUrl), Some("param"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Param1Format extends scalaxb.ElemNameParser[TestScriptu46Param1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Param1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Param1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Param1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Param1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Param1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.value map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46SetupFormat extends scalaxb.ElemNameParser[TestScriptu46Setup] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Setup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Setup] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestScriptu46Setup(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[TestScriptu46Action](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Setup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Setup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[TestScriptu46Action](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46ActionFormat extends scalaxb.ElemNameParser[TestScriptu46Action] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Action")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Action] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assert")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Action(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[TestScriptu46Operation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[TestScriptu46Assert](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Action, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Action, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.operation map { scalaxb.toXML[TestScriptu46Operation](_, Some(fhirUrl), Some("operation"), __scope, false) } getOrElse {Nil},
        __obj.assert map { scalaxb.toXML[TestScriptu46Assert](_, Some(fhirUrl), Some("assert"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46OperationFormat extends scalaxb.ElemNameParser[TestScriptu46Operation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Operation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Operation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "type")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "accept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "destination")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encodeRequestUrl")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "origin")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "params")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "requestHeader")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responseId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "targetId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      TestScriptu46Operation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[FHIRDefinedType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[ContentType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[ContentType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[TestScriptu46RequestHeader](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Operation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Operation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.typeValue map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[FHIRDefinedType](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil},
        __obj.label map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("label"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.accept map { scalaxb.toXML[ContentType](_, Some(fhirUrl), Some("accept"), __scope, false) } getOrElse {Nil},
        __obj.contentType map { scalaxb.toXML[ContentType](_, Some(fhirUrl), Some("contentType"), __scope, false) } getOrElse {Nil},
        __obj.destination map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.encodeRequestUrl map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("encodeRequestUrl"), __scope, false) } getOrElse {Nil},
        __obj.origin map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("origin"), __scope, false) } getOrElse {Nil},
        __obj.params map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("params"), __scope, false) } getOrElse {Nil},
        __obj.requestHeader flatMap { scalaxb.toXML[TestScriptu46RequestHeader](_, Some(fhirUrl), Some("requestHeader"), __scope, false) },
        __obj.requestId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("requestId"), __scope, false) } getOrElse {Nil},
        __obj.responseId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("responseId"), __scope, false) } getOrElse {Nil},
        __obj.sourceId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("sourceId"), __scope, false) } getOrElse {Nil},
        __obj.targetId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("targetId"), __scope, false) } getOrElse {Nil},
        __obj.url map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46RequestHeaderFormat extends scalaxb.ElemNameParser[TestScriptu46RequestHeader] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.RequestHeader")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46RequestHeader] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "field")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46RequestHeader(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46RequestHeader, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46RequestHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.field, Some(fhirUrl), Some("field"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46AssertFormat extends scalaxb.ElemNameParser[TestScriptu46Assert] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Assert")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Assert] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "label")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "direction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compareToSourceId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compareToSourceExpression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compareToSourcePath")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "contentType")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expression")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "headerField")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "minimumId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "navigationLinks")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operator")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "path")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestMethod")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "requestURL")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "resource")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "response")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "responseCode")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "rule")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "ruleset")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sourceId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "validateProfileId")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "value")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "warningOnly")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      TestScriptu46Assert(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[AssertionDirectionType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[ContentType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[AssertionOperatorType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[TestScriptRequestMethodCode](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[FHIRDefinedType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[AssertionResponseTypes](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[TestScriptu46Rule2](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[TestScriptu46Ruleset1](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Assert, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Assert, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.label map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("label"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.direction map { scalaxb.toXML[AssertionDirectionType](_, Some(fhirUrl), Some("direction"), __scope, false) } getOrElse {Nil},
        __obj.compareToSourceId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("compareToSourceId"), __scope, false) } getOrElse {Nil},
        __obj.compareToSourceExpression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("compareToSourceExpression"), __scope, false) } getOrElse {Nil},
        __obj.compareToSourcePath map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("compareToSourcePath"), __scope, false) } getOrElse {Nil},
        __obj.contentType map { scalaxb.toXML[ContentType](_, Some(fhirUrl), Some("contentType"), __scope, false) } getOrElse {Nil},
        __obj.expression map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("expression"), __scope, false) } getOrElse {Nil},
        __obj.headerField map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("headerField"), __scope, false) } getOrElse {Nil},
        __obj.minimumId map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("minimumId"), __scope, false) } getOrElse {Nil},
        __obj.navigationLinks map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("navigationLinks"), __scope, false) } getOrElse {Nil},
        __obj.operator map { scalaxb.toXML[AssertionOperatorType](_, Some(fhirUrl), Some("operator"), __scope, false) } getOrElse {Nil},
        __obj.path map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("path"), __scope, false) } getOrElse {Nil},
        __obj.requestMethod map { scalaxb.toXML[TestScriptRequestMethodCode](_, Some(fhirUrl), Some("requestMethod"), __scope, false) } getOrElse {Nil},
        __obj.requestURL map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("requestURL"), __scope, false) } getOrElse {Nil},
        __obj.resource map { scalaxb.toXML[FHIRDefinedType](_, Some(fhirUrl), Some("resource"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[AssertionResponseTypes](_, Some(fhirUrl), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.responseCode map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("responseCode"), __scope, false) } getOrElse {Nil},
        __obj.rule map { scalaxb.toXML[TestScriptu46Rule2](_, Some(fhirUrl), Some("rule"), __scope, false) } getOrElse {Nil},
        __obj.ruleset map { scalaxb.toXML[TestScriptu46Ruleset1](_, Some(fhirUrl), Some("ruleset"), __scope, false) } getOrElse {Nil},
        __obj.sourceId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("sourceId"), __scope, false) } getOrElse {Nil},
        __obj.validateProfileId map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("validateProfileId"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.warningOnly map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("warningOnly"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Rule2Format extends scalaxb.ElemNameParser[TestScriptu46Rule2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Rule2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Rule2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "ruleId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "param")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Rule2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Param2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Rule2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Rule2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.ruleId, Some(fhirUrl), Some("ruleId"), __scope, false),
        __obj.param flatMap { scalaxb.toXML[TestScriptu46Param2](_, Some(fhirUrl), Some("param"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Param2Format extends scalaxb.ElemNameParser[TestScriptu46Param2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Param2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Param2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Param2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Param2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Param2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Ruleset1Format extends scalaxb.ElemNameParser[TestScriptu46Ruleset1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Ruleset1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Ruleset1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "rulesetId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "rule")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Ruleset1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Rule3](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Ruleset1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Ruleset1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.rulesetId, Some(fhirUrl), Some("rulesetId"), __scope, false),
        __obj.rule flatMap { scalaxb.toXML[TestScriptu46Rule3](_, Some(fhirUrl), Some("rule"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Rule3Format extends scalaxb.ElemNameParser[TestScriptu46Rule3] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Rule3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Rule3] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "ruleId")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "param")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Rule3(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[IdType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[TestScriptu46Param3](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Rule3, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Rule3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[IdType](__obj.ruleId, Some(fhirUrl), Some("ruleId"), __scope, false),
        __obj.param flatMap { scalaxb.toXML[TestScriptu46Param3](_, Some(fhirUrl), Some("param"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Param3Format extends scalaxb.ElemNameParser[TestScriptu46Param3] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Param3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Param3] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Param3(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[StringTypeType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Param3, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Param3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46TestFormat extends scalaxb.ElemNameParser[TestScriptu46Test] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Test")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Test] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      TestScriptu46Test(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[TestScriptu46Action1](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Test, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Test, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.action flatMap { scalaxb.toXML[TestScriptu46Action1](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Action1Format extends scalaxb.ElemNameParser[TestScriptu46Action1] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Action1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Action1] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "operation")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "assert")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      TestScriptu46Action1(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[TestScriptu46Operation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[TestScriptu46Assert](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Action1, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Action1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.operation map { scalaxb.toXML[TestScriptu46Operation](_, Some(fhirUrl), Some("operation"), __scope, false) } getOrElse {Nil},
        __obj.assert map { scalaxb.toXML[TestScriptu46Assert](_, Some(fhirUrl), Some("assert"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46TeardownFormat extends scalaxb.ElemNameParser[TestScriptu46Teardown] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Teardown")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Teardown] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "action")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestScriptu46Teardown(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[TestScriptu46Action2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Teardown, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Teardown, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.action flatMap { scalaxb.toXML[TestScriptu46Action2](_, Some(fhirUrl), Some("action"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_TestScriptu46Action2Format extends scalaxb.ElemNameParser[TestScriptu46Action2] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScript.Action2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptu46Action2] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "operation")) ^^
      { case p1 ~ p2 ~ p3 =>
      TestScriptu46Action2(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[TestScriptu46Operation](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptu46Action2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptu46Action2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[TestScriptu46Operation](__obj.operation, Some(fhirUrl), Some("operation"), __scope, false))

  }

  def buildComionkinmrshl7fhir_FHIRDefinedTypeu45listFormat = new DefaultComionkinmrshl7fhir_FHIRDefinedTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_FHIRDefinedTypeu45listFormat extends scalaxb.XMLFormat[FHIRDefinedTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FHIRDefinedTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Address")) => Address
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Age")) => Age
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Annotation")) => Annotation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Attachment")) => Attachment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BackboneElement")) => BackboneElement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CodeableConcept")) => CodeableConcept
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coding")) => Coding
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ContactDetail")) => ContactDetail
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ContactPoint")) => ContactPoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Contributor")) => Contributor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Count")) => Count
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DataRequirement")) => DataRequirement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Distance")) => Distance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Dosage")) => Dosage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Duration")) => Duration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Element")) => Element
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ElementDefinition")) => ElementDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Extension")) => Extension
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HumanName")) => HumanName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Identifier")) => Identifier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Meta")) => Meta
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Money")) => Money
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Narrative")) => Narrative
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ParameterDefinition")) => ParameterDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Period")) => Period
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Quantity")) => Quantity
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Range")) => RangeType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Ratio")) => Ratio
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Reference")) => Reference
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedArtifact")) => RelatedArtifact
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SampledData")) => SampledData
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Signature")) => Signature
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SimpleQuantity")) => SimpleQuantity
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Timing")) => Timing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TriggerDefinition")) => TriggerDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UsageContext")) => UsageContext
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("base64Binary")) => Base64BinaryType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boolean")) => BooleanType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("code")) => Code
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("date")) => Date
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateTime")) => DateTime
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decimal")) => Decimal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("id")) => Id
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instant")) => Instant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("integer")) => Integer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("markdown")) => Markdown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oid")) => Oid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("positiveInt")) => PositiveInt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("string")) => StringType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("time")) => Time
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unsignedInt")) => UnsignedInt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uri")) => Uri
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uuid")) => Uuid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xhtml")) => Xhtml
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Account")) => Account
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ActivityDefinition")) => ActivityDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AdverseEvent")) => AdverseEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AllergyIntolerance")) => AllergyIntolerance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Appointment")) => Appointment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AppointmentResponse")) => AppointmentResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AuditEvent")) => AuditEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Basic")) => Basic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Binary")) => Binary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BodySite")) => BodySite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Bundle")) => Bundle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CapabilityStatement")) => CapabilityStatement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CarePlan")) => CarePlan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CareTeam")) => CareTeam
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ChargeItem")) => ChargeItem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Claim")) => Claim
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClaimResponse")) => ClaimResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ClinicalImpression")) => ClinicalImpression
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CodeSystem")) => CodeSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Communication")) => Communication
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CommunicationRequest")) => CommunicationRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CompartmentDefinition")) => CompartmentDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Composition")) => Composition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ConceptMap")) => ConceptMap
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Condition")) => Condition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Consent")) => Consent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Contract")) => Contract
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Coverage")) => Coverage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DataElement")) => DataElement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DetectedIssue")) => DetectedIssue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Device")) => Device
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceComponent")) => DeviceComponent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceMetric")) => DeviceMetric
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceRequest")) => DeviceRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeviceUseStatement")) => DeviceUseStatement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DiagnosticReport")) => DiagnosticReport
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentManifest")) => DocumentManifest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DocumentReference")) => DocumentReference
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DomainResource")) => DomainResource
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityRequest")) => EligibilityRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EligibilityResponse")) => EligibilityResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Encounter")) => Encounter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Endpoint")) => Endpoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentRequest")) => EnrollmentRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EnrollmentResponse")) => EnrollmentResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EpisodeOfCare")) => EpisodeOfCare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExpansionProfile")) => ExpansionProfile
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExplanationOfBenefit")) => ExplanationOfBenefit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FamilyMemberHistory")) => FamilyMemberHistory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Flag")) => Flag
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Goal")) => Goal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GraphDefinition")) => GraphDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Group")) => Group
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GuidanceResponse")) => GuidanceResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HealthcareService")) => HealthcareService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingManifest")) => ImagingManifest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImagingStudy")) => ImagingStudy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Immunization")) => Immunization
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImmunizationRecommendation")) => ImmunizationRecommendation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ImplementationGuide")) => ImplementationGuide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Library")) => Library
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Linkage")) => Linkage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("List")) => ListType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Location")) => Location
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Measure")) => Measure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MeasureReport")) => MeasureReport
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Media")) => Media
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Medication")) => Medication
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationAdministration")) => MedicationAdministration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationDispense")) => MedicationDispense
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationRequest")) => MedicationRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MedicationStatement")) => MedicationStatement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageDefinition")) => MessageDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MessageHeader")) => MessageHeader
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NamingSystem")) => NamingSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NutritionOrder")) => NutritionOrder
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Observation")) => Observation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationDefinition")) => OperationDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OperationOutcome")) => OperationOutcome
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Organization")) => Organization
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Parameters")) => Parameters
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Patient")) => Patient
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentNotice")) => PaymentNotice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PaymentReconciliation")) => PaymentReconciliation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Person")) => Person
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PlanDefinition")) => PlanDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Practitioner")) => Practitioner
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PractitionerRole")) => PractitionerRole
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Procedure")) => Procedure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcedureRequest")) => ProcedureRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessRequest")) => ProcessRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ProcessResponse")) => ProcessResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Provenance")) => Provenance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Questionnaire")) => Questionnaire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("QuestionnaireResponse")) => QuestionnaireResponse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ReferralRequest")) => ReferralRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RelatedPerson")) => RelatedPerson
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RequestGroup")) => RequestGroup
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchStudy")) => ResearchStudy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ResearchSubject")) => ResearchSubject
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Resource")) => Resource
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RiskAssessment")) => RiskAssessment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Schedule")) => Schedule
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SearchParameter")) => SearchParameter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Sequence")) => Sequence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ServiceDefinition")) => ServiceDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Slot")) => Slot
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Specimen")) => Specimen
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureDefinition")) => StructureDefinition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("StructureMap")) => StructureMap
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Subscription")) => Subscription
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Substance")) => Substance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyDelivery")) => SupplyDelivery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SupplyRequest")) => SupplyRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Task")) => Task
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestReport")) => TestReport
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TestScript")) => TestScript
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ValueSet")) => ValueSetValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VisionPrescription")) => VisionPrescription

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FHIRDefinedTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FHIRDefinedTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_FHIRDefinedTypeFormat extends scalaxb.ElemNameParser[FHIRDefinedType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("FHIRDefinedType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FHIRDefinedType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      FHIRDefinedType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FHIRDefinedTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FHIRDefinedType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FHIRDefinedType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_ContentTypeu45listFormat = new DefaultComionkinmrshl7fhir_ContentTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_ContentTypeu45listFormat extends scalaxb.XMLFormat[ContentTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ContentTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("xml")) => Xml
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("json")) => Json
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ttl")) => Ttl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => NoneType

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContentTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ContentTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_ContentTypeFormat extends scalaxb.ElemNameParser[ContentType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ContentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ContentType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      ContentType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ContentTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ContentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ContentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AssertionDirectionTypeu45listFormat = new DefaultComionkinmrshl7fhir_AssertionDirectionTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AssertionDirectionTypeu45listFormat extends scalaxb.XMLFormat[AssertionDirectionTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AssertionDirectionTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("response")) => Response
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("request")) => Request

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AssertionDirectionTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AssertionDirectionTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AssertionDirectionTypeFormat extends scalaxb.ElemNameParser[AssertionDirectionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AssertionDirectionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AssertionDirectionType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AssertionDirectionType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AssertionDirectionTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AssertionDirectionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AssertionDirectionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AssertionOperatorTypeu45listFormat = new DefaultComionkinmrshl7fhir_AssertionOperatorTypeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AssertionOperatorTypeu45listFormat extends scalaxb.XMLFormat[AssertionOperatorTypeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AssertionOperatorTypeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equals")) => Equals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notEquals")) => NotEquals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in")) => In
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notIn")) => NotIn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("greaterThan")) => GreaterThan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan")) => LessThan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("empty")) => Empty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notEmpty")) => NotEmpty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("contains")) => Contains
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notContains")) => NotContains
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eval")) => Eval

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AssertionOperatorTypeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AssertionOperatorTypeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AssertionOperatorTypeFormat extends scalaxb.ElemNameParser[AssertionOperatorType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AssertionOperatorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AssertionOperatorType] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AssertionOperatorType(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AssertionOperatorTypeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AssertionOperatorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AssertionOperatorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_AssertionResponseTypesu45listFormat = new DefaultComionkinmrshl7fhir_AssertionResponseTypesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_AssertionResponseTypesu45listFormat extends scalaxb.XMLFormat[AssertionResponseTypesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AssertionResponseTypesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("okay")) => Okay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("created")) => Created
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noContent")) => NoContent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notModified")) => NotModified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bad")) => Bad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("forbidden")) => Forbidden
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notFound")) => NotFound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("methodNotAllowed")) => MethodNotAllowed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("conflict")) => Conflict
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gone")) => Gone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("preconditionFailed")) => PreconditionFailed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unprocessable")) => Unprocessable

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AssertionResponseTypesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AssertionResponseTypesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_AssertionResponseTypesFormat extends scalaxb.ElemNameParser[AssertionResponseTypes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("AssertionResponseTypes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AssertionResponseTypes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      AssertionResponseTypes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[AssertionResponseTypesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AssertionResponseTypes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AssertionResponseTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_TestScriptRequestMethodCodeu45listFormat = new DefaultComionkinmrshl7fhir_TestScriptRequestMethodCodeu45listFormat {}
  trait DefaultComionkinmrshl7fhir_TestScriptRequestMethodCodeu45listFormat extends scalaxb.XMLFormat[TestScriptRequestMethodCodeu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TestScriptRequestMethodCodeu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delete")) => Delete
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("get")) => Get
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("options")) => Options
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patch")) => Patch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("post")) => Post
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("put")) => Put

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestScriptRequestMethodCodeu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TestScriptRequestMethodCodeu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_TestScriptRequestMethodCodeFormat extends scalaxb.ElemNameParser[TestScriptRequestMethodCode] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("TestScriptRequestMethodCode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestScriptRequestMethodCode] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      TestScriptRequestMethodCode(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TestScriptRequestMethodCodeu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: TestScriptRequestMethodCode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: TestScriptRequestMethodCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ValueSetFormat extends scalaxb.ElemNameParser[ValueSet] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSet] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "url")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "title")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "experimental")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "date")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "publisher")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contact")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "description")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "useContext")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "jurisdiction")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "immutable")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "purpose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "copyright")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "extensible")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "compose")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "expansion")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      ValueSet(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[PublicationStatus](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[ContactDetailType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[UsageContextType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[MarkdownType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[ValueSetu46Compose](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[ValueSetu46Expansion](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ValueSet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.url map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("url"), __scope, false) } getOrElse {Nil},
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("title"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[PublicationStatus](__obj.status, Some(fhirUrl), Some("status"), __scope, false),
        __obj.experimental map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("experimental"), __scope, false) } getOrElse {Nil},
        __obj.date map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("date"), __scope, false) } getOrElse {Nil},
        __obj.publisher map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("publisher"), __scope, false) } getOrElse {Nil},
        __obj.contact flatMap { scalaxb.toXML[ContactDetailType](_, Some(fhirUrl), Some("contact"), __scope, false) },
        __obj.description map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.useContext flatMap { scalaxb.toXML[UsageContextType](_, Some(fhirUrl), Some("useContext"), __scope, false) },
        __obj.jurisdiction flatMap { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("jurisdiction"), __scope, false) },
        __obj.immutable map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("immutable"), __scope, false) } getOrElse {Nil},
        __obj.purpose map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("purpose"), __scope, false) } getOrElse {Nil},
        __obj.copyright map { scalaxb.toXML[MarkdownType](_, Some(fhirUrl), Some("copyright"), __scope, false) } getOrElse {Nil},
        __obj.extensible map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("extensible"), __scope, false) } getOrElse {Nil},
        __obj.compose map { scalaxb.toXML[ValueSetu46Compose](_, Some(fhirUrl), Some("compose"), __scope, false) } getOrElse {Nil},
        __obj.expansion map { scalaxb.toXML[ValueSetu46Expansion](_, Some(fhirUrl), Some("expansion"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46ComposeFormat extends scalaxb.ElemNameParser[ValueSetu46Compose] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Compose")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Compose] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "lockedDate")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "inactive")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "include")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "exclude")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ValueSetu46Compose(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[DateType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ValueSetu46Include](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ValueSetu46Include](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Compose, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Compose, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.lockedDate map { scalaxb.toXML[DateType](_, Some(fhirUrl), Some("lockedDate"), __scope, false) } getOrElse {Nil},
        __obj.inactive map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("inactive"), __scope, false) } getOrElse {Nil},
        __obj.include flatMap { scalaxb.toXML[ValueSetu46Include](_, Some(fhirUrl), Some("include"), __scope, false) },
        __obj.exclude flatMap { scalaxb.toXML[ValueSetu46Include](_, Some(fhirUrl), Some("exclude"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46IncludeFormat extends scalaxb.ElemNameParser[ValueSetu46Include] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Include")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Include] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "concept")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "filter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "valueSet")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      ValueSetu46Include(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ValueSetu46Concept](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ValueSetu46Filter](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Include, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Include, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.concept flatMap { scalaxb.toXML[ValueSetu46Concept](_, Some(fhirUrl), Some("concept"), __scope, false) },
        __obj.filter flatMap { scalaxb.toXML[ValueSetu46Filter](_, Some(fhirUrl), Some("filter"), __scope, false) },
        __obj.valueSet flatMap { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueSet"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46ConceptFormat extends scalaxb.ElemNameParser[ValueSetu46Concept] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Concept")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Concept] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "designation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ValueSetu46Concept(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[ValueSetu46Designation](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Concept, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Concept, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.code, Some(fhirUrl), Some("code"), __scope, false),
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.designation flatMap { scalaxb.toXML[ValueSetu46Designation](_, Some(fhirUrl), Some("designation"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46DesignationFormat extends scalaxb.ElemNameParser[ValueSetu46Designation] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Designation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Designation] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "use")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ValueSetu46Designation(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodingType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Designation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Designation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.use map { scalaxb.toXML[CodingType](_, Some(fhirUrl), Some("use"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[StringTypeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46FilterFormat extends scalaxb.ElemNameParser[ValueSetu46Filter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Filter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Filter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "property")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "op")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ValueSetu46Filter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CodeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[FilterOperator](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CodeType](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Filter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Filter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[CodeType](__obj.property, Some(fhirUrl), Some("property"), __scope, false),
        scalaxb.toXML[FilterOperator](__obj.op, Some(fhirUrl), Some("op"), __scope, false),
        scalaxb.toXML[CodeType](__obj.value, Some(fhirUrl), Some("value"), __scope, false))

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46ExpansionFormat extends scalaxb.ElemNameParser[ValueSetu46Expansion] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Expansion")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Expansion] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "timestamp")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "total")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "offset")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "parameter")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contains")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      ValueSetu46Expansion(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[UriType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DateTimeType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ValueSetu46Parameter](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ValueSetu46Contains](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Expansion, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Expansion, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[UriType](__obj.identifier, Some(fhirUrl), Some("identifier"), __scope, false),
        scalaxb.toXML[DateTimeType](__obj.timestamp, Some(fhirUrl), Some("timestamp"), __scope, false),
        __obj.total map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("total"), __scope, false) } getOrElse {Nil},
        __obj.offset map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("offset"), __scope, false) } getOrElse {Nil},
        __obj.parameter flatMap { scalaxb.toXML[ValueSetu46Parameter](_, Some(fhirUrl), Some("parameter"), __scope, false) },
        __obj.contains flatMap { scalaxb.toXML[ValueSetu46Contains](_, Some(fhirUrl), Some("contains"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46ParameterFormat extends scalaxb.ElemNameParser[ValueSetu46Parameter] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      (scalaxb.ElemName(Some(fhirUrl), "name")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueString")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueBoolean")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueInteger")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueDecimal")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueUri")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "valueCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ValueSetu46Parameter(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[StringTypeType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        scalaxb.toXML[StringTypeType](__obj.name, Some(fhirUrl), Some("name"), __scope, false),
        __obj.valueString map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("valueString"), __scope, false) } getOrElse {Nil},
        __obj.valueBoolean map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("valueBoolean"), __scope, false) } getOrElse {Nil},
        __obj.valueInteger map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("valueInteger"), __scope, false) } getOrElse {Nil},
        __obj.valueDecimal map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("valueDecimal"), __scope, false) } getOrElse {Nil},
        __obj.valueUri map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("valueUri"), __scope, false) } getOrElse {Nil},
        __obj.valueCode map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("valueCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComionkinmrshl7fhir_ValueSetu46ContainsFormat extends scalaxb.ElemNameParser[ValueSetu46Contains] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("ValueSet.Contains")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueSetu46Contains] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "system")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "abstract")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "inactive")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "version")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "code")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "display")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "designation")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contains")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      ValueSetu46Contains(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BooleanTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[ValueSetu46Designation](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[ValueSetu46Contains](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ValueSetu46Contains, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueSetu46Contains, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.system map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.abstractValue map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("abstract"), __scope, false) } getOrElse {Nil},
        __obj.inactive map { scalaxb.toXML[BooleanTypeType](_, Some(fhirUrl), Some("inactive"), __scope, false) } getOrElse {Nil},
        __obj.version map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("version"), __scope, false) } getOrElse {Nil},
        __obj.code map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.display map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("display"), __scope, false) } getOrElse {Nil},
        __obj.designation flatMap { scalaxb.toXML[ValueSetu46Designation](_, Some(fhirUrl), Some("designation"), __scope, false) },
        __obj.contains flatMap { scalaxb.toXML[ValueSetu46Contains](_, Some(fhirUrl), Some("contains"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_VisionPrescriptionTypeFormat extends scalaxb.ElemNameParser[VisionPrescriptionType] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("VisionPrescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[VisionPrescriptionType] =
      phrase(opt(scalaxb.ElemName(Some(fhirUrl), "id")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "meta")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "implicitRules")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "language")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "text")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "contained")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "identifier")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "status")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "patient")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "encounter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "dateWritten")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prescriber")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonCodeableConcept")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "reasonReference")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "dispense")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      VisionPrescriptionType(p1.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[MetaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[UriType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[CodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[NarrativeType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[ResourceContainer](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[IdentifierType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[FinancialResourceStatusCodes](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DateTimeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[VisionPrescriptionu46Dispense](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: VisionPrescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[IdType](_, Some(fhirUrl), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.meta map { scalaxb.toXML[MetaType](_, Some(fhirUrl), Some("meta"), __scope, false) } getOrElse {Nil},
        __obj.implicitRules map { scalaxb.toXML[UriType](_, Some(fhirUrl), Some("implicitRules"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[CodeType](_, Some(fhirUrl), Some("language"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[NarrativeType](_, Some(fhirUrl), Some("text"), __scope, false) } getOrElse {Nil},
        __obj.contained flatMap { scalaxb.toXML[ResourceContainer](_, Some(fhirUrl), Some("contained"), __scope, false) },
        __obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.identifier flatMap { scalaxb.toXML[IdentifierType](_, Some(fhirUrl), Some("identifier"), __scope, false) },
        __obj.status map { scalaxb.toXML[FinancialResourceStatusCodes](_, Some(fhirUrl), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.patient map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("patient"), __scope, false) } getOrElse {Nil},
        __obj.encounter map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("encounter"), __scope, false) } getOrElse {Nil},
        __obj.dateWritten map { scalaxb.toXML[DateTimeType](_, Some(fhirUrl), Some("dateWritten"), __scope, false) } getOrElse {Nil},
        __obj.prescriber map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("prescriber"), __scope, false) } getOrElse {Nil},
        __obj.reasonCodeableConcept map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("reasonCodeableConcept"), __scope, false) } getOrElse {Nil},
        __obj.reasonReference map { scalaxb.toXML[ReferenceType](_, Some(fhirUrl), Some("reasonReference"), __scope, false) } getOrElse {Nil},
        __obj.dispense flatMap { scalaxb.toXML[VisionPrescriptionu46Dispense](_, Some(fhirUrl), Some("dispense"), __scope, false) })

  }

  trait DefaultComionkinmrshl7fhir_VisionPrescriptionu46DispenseFormat extends scalaxb.ElemNameParser[VisionPrescriptionu46Dispense] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("VisionPrescription.Dispense")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[VisionPrescriptionu46Dispense] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "modifierExtension")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "product")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "eye")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "sphere")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "cylinder")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "axis")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "prism")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "base")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "add")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "power")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "backCurve")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "diameter")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "duration")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "color")) ~ 
      opt(scalaxb.ElemName(Some(fhirUrl), "brand")) ~ 
      safeRep(scalaxb.ElemName(Some(fhirUrl), "note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      VisionPrescriptionu46Dispense(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CodeableConceptType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[VisionEyes](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[IntegerType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[VisionBase](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[DecimalType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Quantityable](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[StringTypeType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[AnnotationType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: VisionPrescriptionu46Dispense, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: VisionPrescriptionu46Dispense, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) },
        __obj.modifierExtension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("modifierExtension"), __scope, false) },
        __obj.product map { scalaxb.toXML[CodeableConceptType](_, Some(fhirUrl), Some("product"), __scope, false) } getOrElse {Nil},
        __obj.eye map { scalaxb.toXML[VisionEyes](_, Some(fhirUrl), Some("eye"), __scope, false) } getOrElse {Nil},
        __obj.sphere map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("sphere"), __scope, false) } getOrElse {Nil},
        __obj.cylinder map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("cylinder"), __scope, false) } getOrElse {Nil},
        __obj.axis map { scalaxb.toXML[IntegerType](_, Some(fhirUrl), Some("axis"), __scope, false) } getOrElse {Nil},
        __obj.prism map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("prism"), __scope, false) } getOrElse {Nil},
        __obj.base map { scalaxb.toXML[VisionBase](_, Some(fhirUrl), Some("base"), __scope, false) } getOrElse {Nil},
        __obj.add map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("add"), __scope, false) } getOrElse {Nil},
        __obj.power map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("power"), __scope, false) } getOrElse {Nil},
        __obj.backCurve map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("backCurve"), __scope, false) } getOrElse {Nil},
        __obj.diameter map { scalaxb.toXML[DecimalType](_, Some(fhirUrl), Some("diameter"), __scope, false) } getOrElse {Nil},
        __obj.duration map { scalaxb.toXML[Quantityable](_, Some(fhirUrl), Some("duration"), __scope, false) } getOrElse {Nil},
        __obj.color map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("color"), __scope, false) } getOrElse {Nil},
        __obj.brand map { scalaxb.toXML[StringTypeType](_, Some(fhirUrl), Some("brand"), __scope, false) } getOrElse {Nil},
        __obj.note flatMap { scalaxb.toXML[AnnotationType](_, Some(fhirUrl), Some("note"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_VisionBaseu45listFormat = new DefaultComionkinmrshl7fhir_VisionBaseu45listFormat {}
  trait DefaultComionkinmrshl7fhir_VisionBaseu45listFormat extends scalaxb.XMLFormat[VisionBaseu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): VisionBaseu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("up")) => Up
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("down")) => Down
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("in")) => InValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("out")) => OutValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, VisionBaseu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: VisionBaseu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_VisionBaseFormat extends scalaxb.ElemNameParser[VisionBase] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("VisionBase")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[VisionBase] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      VisionBase(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[VisionBaseu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: VisionBase, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: VisionBase, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }

  def buildComionkinmrshl7fhir_VisionEyesu45listFormat = new DefaultComionkinmrshl7fhir_VisionEyesu45listFormat {}
  trait DefaultComionkinmrshl7fhir_VisionEyesu45listFormat extends scalaxb.XMLFormat[VisionEyesu45list] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): VisionEyesu45list = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("right")) => RightType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("left")) => LeftType

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, VisionEyesu45list] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: VisionEyesu45list, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComionkinmrshl7fhir_VisionEyesFormat extends scalaxb.ElemNameParser[VisionEyes] {
    val targetNamespace: Option[String] = Some(fhirUrl)
    
    override def typeName: Option[String] = Some("VisionEyes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[VisionEyes] =
      phrase(safeRep(scalaxb.ElemName(Some(fhirUrl), "extension")) ^^
      { case p1 =>
      VisionEyes(p1 map { scalaxb.fromXML[ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[VisionEyesu45list](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: VisionEyes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@value", _) => __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: VisionEyes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.extension flatMap { scalaxb.toXML[ExtensionType](_, Some(fhirUrl), Some("extension"), __scope, false) })

  }


}

